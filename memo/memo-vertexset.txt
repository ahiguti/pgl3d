
make_vertex_setで頂点データを1つ登録すれば、複数のシェーダを使った
描画ができるようにする。できればインスタンスデータを1つですませら
れるようにしたい。trianglesのraycastとparallaxのインスタンスデータは
同じフォーマットのはず。


make_vertex_setへの引数の式、ctx_tex3dで出力している？
  -> gf_ctx_tex3d
  -> ctx.fill_or_joint

private threaded function void gf_ctx_fill(size_t n,
  build_context_i const& ctx, poly_t const& poly, mesh_index const& mp)
{
  ctx.fill_or_joint(true, false, n, "", poly, mp);
}

pgl3d::engine::pglshader::build_context_impl::fill_or_joint
    // ポリゴンメッシュ一枚をvptrs[n]に登録する。ポリゴン各頂点の頂点データ
    // を登録するか、jointの基準面または基準点として登録するか、のいずれか。
jointではなくてfillのときは、fillers[n]を呼ぶ。
        // fillers[n]は、polyを引数に取り、それをdrawer固有の形式の頂点データ
        // へと変換し、vptrs[n]へのpush_polygon_distinct呼び出しなどで頂点
        // データを登録する。頂点データはgpuに置かれるデータと物理エンジンが
        // 参照するためのものの両方を含む。
fillersはbuild_context_impl構築時に引数で渡される。これはmake_vertex_setが、
    for (const i, const& dr_name: dr_names) {
      const vbid = ds.vbid_pool->to_id(dr_name);
      debug_log("make_vertex_set", dr_name);
      const dp = *drawsteps_by_vbid.equal_range(vbid);
      ptr{vertices} vptr = make_vertices(vbid, shape_name);
      dgf_filler filler = dp.step->make_filler(vptr);
      vptrs.push_back(vptr);
      fillers.push_back(filler);
    }
としている。dr_namesはmake_vertex_setの最初の引数。
    // TODO: dr_names[0]はsubdrawerであってはならず、残りはsubdrawer
    // でなければならない。さもないと頂点セットの名前からvsidを引くとき
    // の一意性がなくなる。
この制約が問題。"さもないと"以下は正しいのか？

joint_id_typeはvbid_tとvsid_tのペアからなる。各シーンオブジェクトの種類を
joint_id_typeで表している。そのため各シーンオブジェクトは一つのvbidで描画
することしかできないはず。そのことを確認するべし。

vbid_tはpglshaderが保持しているvertex_bufferの配列のインデックス。
vbidはdrawerごとに決まる。subdrawerもmainとは異なるvbidを持つ。
(engine/pglshader)
vsid_tは各vertex_bufferの中のvertex_set配列のインデックス。
(opengl/glbuffer)
各vertex_setは構築後にvertex_buffer中のGPU上values/elementsバッファの
オフセット位置を割り当てられる。

インスタンスデータのつくりかたを追うべし。

各sceneにはrootとなるscene_nodeが準備してあり、それをインスタンス化する。
  app_scene.px:scene_control::instantiate_cur_scene()
jointの先を再帰的に構築したscene_nodeが作られる。
物理エンジンのcollision objectに登録する。

public metafunction bo_instances_type varray{instance_data};
  // バッファオブジェクト毎(drawer毎)のインスタンスデータ
public metafunction whole_instances_type varray{bo_instances_type};
  // 全バッファオブジェクト(drawer)のインスタンスデータ。vbidで引く。

whole_instancesを作っているところ
pglshader::prepare_whole_instances()でリサイズしている。
    ddata.local_whole_instances.resize(ddata.vertex_buffers.size(),
      bo_instances_type());
vertex_buffersはvbidごとのvertex setを保持している。
    for (const i, const& bo: ddata.vertex_buffers) {
      mutable& instances = ddata.local_whole_instances[i];
      for (const j: 0 .. bo->vs_arr.size()) {
        instances.push_back(instance_data());
      }
    }
各vbidについて、各vsidについてのinstance dataを空に初期化している。
これはengine初期化？した初回だけ実行される。
instance_dataはfloatの配列と、glbuffer中のオフセット。
instance_dataにはそのvbid/vsidの全インスタンスのデータを入れる。

app_scene::on_motion_step()の中でwhole_instancesをセットしている。

vbidのsubdrawerについて整理すればparallaxとraycast混ぜた頂点データは
作れそう。
drawerに3つのvbidを返すgetterがある。
  public function vbid_t get_vbid() const { return vbid_triangles; }
  public function vbid_t get_instances_vbid() const { return vbid_instances; }
  public function vbid_t get_vertices_vbid() const { return vbid_vertices; }

drawstepの定義はapp_drawstepにある。その中でmake_drawstep_raycastと
make_drawstep_triangles_surfaceを呼んでいて、いずれも
make_drawer_triangles_stypeを呼ぶ。num_ssubtypesにapp.raycast_layer
を渡しているのは、近いオブジェクトから順に描画するためのもの。

描画
pglshader::draw_frame()
  for (pgs.drawsteps.size()) {
    ds.step->draw_drawstep(pgs.ddata);
  }

pgl3d::drawer::triangles::draw_drawstep()
  main_drawer->draw_sub_step()

pgl3d::drawer::triangles::draw_sub_step()

has_instance_to_draw(vertex_buffer const& bo, bo_instances_type const& bo_ib)
  for (const vsid: 0 .. bo.num_vs()) {
    const& instance = bo_ib[vsid];
    const& arr = instance.instance_buffer;
    if (!arr.empty()) {
      return true;
    }
  }
  return false;

vertex_setにstypeの値などのdrawer_user_dataを持たすことができるようにすれば
いいのでは。

各vsidについてdrawしている箇所を探すべし。

pgl3d::engine::mainloop::main_ctrl::step_internal()
  pgs.frame_begin()

pglshader_frame_begin()
  pgs.ddata_agg_ibuffer.frame_begin(...);

aggregated_ibuffer_frame_begin()
    // 各vbid,vsidのインスタンスデータが連結されたバッファのどのオフセットに
    // 位置するのかをglbuffer_offset_floatに記録しておく。後でdrawcall発行
    // する際にそのオフセットを指定してdrawする。
    for (const vbid, mutable& bo_ib: whole_instances) {
      for (const vsid, mutable& inst: bo_ib) {
        mutable& arr = inst.instance_buffer;
        inst.glbuffer_offset_float = offset_float;
        offset_float += arr.size();
      }
    }

aggregated_ibuffer_draw()
        sdr.instance_attrib_pointer(instance.glbuffer_offset_float);
        bo.draw_elems_instanced(vsid,
          arr.size() / sdr.instance_attrib_num_float());

glUseProgramしているのはどこか？
  -> pglshader_draw_frame();
  -> draw_drawstep();
     glUseProgramした後にdraw_data::drawしている
     draw_data::drawは中でaggregated_ibuffer_drawを呼んでいる

glVertexAttribPointerしているのはどこか？
  -> vertex_buffer_draw(bo, vsid, sdr);
  -> vertex_buffer_draw_pre(bo, sdr);
  -> enable_vertex_attrib_array();

make_vertex_setで各vbidについてのバッファににshape_nameの名前でvsidを登録、
インスタンスは(vbid,vsid)の組で頂点データを指定している。
インスタンスが複数のvbidについての頂点データを持てるようにするには？

各drawer(drawstep)が描画前に、描画対象となるインスタンスデータと頂点データを
取得しているのはどこか？

struct draw_data {
  whole_instance_type local_whole_instances;
  varray{ptr{vertex_buffer}} vertex_buffers;
  aggregated_ibuffer agg_ibuffer;
  function void draw_all_vs_all_inst(sdr, vert_vbid, inst_vbid) {
    const& vb = *vertex_buffers[vert_vbid];
    const& ib = local_whole_instances[inst_vbid];
    agg_ibuffer.draw_all_vs_all_inst(sdr, vb, ib);
  }
};

trianglesが共通のvbid_instを使うためには？

vsid_tはvbid_tに無関係に採番するようにする。一つのvertex setは複数の
vbidについての頂点データを持つことができるようになる。

-----
jointのつくりかた
pgs.make_vertex_set(tr0_0, "plane-multi-2", ... g::ctx_poly_joint("box"));
ctx_poly_jointはfill_or_jointを呼ぶ
fill_or_jointは名前joint_nameが空でないとき以下のいずれかを呼ぶ
dgf_poly_joint_internal
dgf_point_joint_internal
いずれの関数もverticesにjoint_nameのエントリを追加(push_joint)する。

pglshader::prepare_node_factory

----
joint_idからvbidを無くしformatを追加する
-> 無理。オブジェクトをsortするためのsubdrawerを指定する方法が無くなる。

raycastとparallaxのvbidを関連付ける方法を考えるべし。

----
app_scene_shared {
  raycast_drawers_info rdi; // とくに初期化はしない
}
on_build_vertices
-> app_scene::prepare_vbids
ここでraycast_drawers_infoを初期化している。
  rdi.subdrawer_vbidsに各レイヤ用のsubdrawerをセット
  rdi.name_to_joint_idにshape名からjoint_idを返すmapをセット
  rdi.vs_radiusに各shapeの半径をセット

app_raycast_objects::raycast_objects {
}
raycast_objects::push_object()
  描画対象オブジェクトをobjestsフィールドに登録する。オブジェクトがカメラ
  に近いなら先に描画する対象の候補とする。
raycast_objects::prepare_instances()
  objestsフィールドに積まれたオブジェクトをinsts_allfmt引数に積む。
  カメラに近いオブジェクトは先に描画するためのsubdrawerのvbidのものに積む。
  小さいオブジェクトはssubtype=1のdrawerで描く。影を差す。

ftable[vbid](sn, ncd, idata)
これはtrianglesについては次の実装。
private pure function void prepare_instance_data_triangles(
  scene_node const& sn, node_common_data mutable& ncd,
  instance_data mutable& idata)
{
  buffer_append(idata.instance_buffer, sn.trans); /* model matrix */
}

レンダリングパスの組み立て
init_drawsteps()
dr_solid, dr_shadow, dr_zpreにparallaxとraycastのdrawerを取得。
  make_drawstep_triangles_surface()
  make_drawstep_triangles_raycast()
レンダリングパス最初はshadowmap。
    for (int i: 0 .. num_shadowmaps) {
      dr_r.push_back(pgl::make_drawstep_setfb(ctrue, sconf, ds,
        app.pviewport_sm, app.pviewport_sm, shadowmap_name + to_string(i),
        true, make_varray{string}(),
        "GL_DEPTH_COMPONENT", false));
        // set shadowmap framebuffer i
      dr_r.append(dr_shadow[static_cast{size_t}(i)]);
    }
カメラ視野描画のためのフレームバッファ"col1"をセット
  dr_r.push_back(pgl::make_drawstep_setfb(ctrue, sconf, ds, app.pviewport_main,
    app.pviewport_main,
    "col1", true, make_varray{string}("GL_RGBA"), "GL_DEPTH_COMPONENT",
    false));
    // set color+depth framebuffer
parallaxとraycastのdrawerで描画。
  dr_r.push_back(pgl::make_drawstep_chgmode(ctrue, sconf, ds, "zprepass"));
  dr_r.append(dr_zpre); // draw solid z-prepass
  dr_r.push_back(pgl::make_drawstep_chgmode(ctrue, sconf, ds, "solid"));
  dr_r.append(dr_solid); // draw solid color
  dr_r.push_back(pgl::make_drawstep_lineparticle(ctrue, sconf, ds,
    app.proj_df));
    // draw solid
背景のskybox描画。
  dr_r.push_back(pgl::make_drawstep_skybox(ctrue, sconf, ds, app.proj_df));
    // draw solid
それ以降はUI描画など。

raycast_layer=0にするとpglshader::make_vertex_set()
*drawsteps_by_vbid.equal_range()で落ちる。
vbid_triangles_1_0がdrawstepsに入っていない？
pglshader::get_drawsteps_by_vbidでdrawstepsがvbidと紐づけられる
app_drawstep::init_drawsteps()
pgl::make_drawstep_raycast()にapp.raycast_layerを渡している
make_drawer_triangles_stypeに0を渡すとdrawstepsが空になる
raycast_layerは1以上でなくてはならない。

raycast_layer=1にするとraycastが何も表示されない。
-> 修正済

---------------------------------------

ftable[vbid](sn, ncd, idata)
これはidata(vbidごとのinstance buffer)にsn.transから取得したmodel matrix
を追加する処理。

raycastとparallaxでインスタンスデータを共通化するためには、
1. make_vertex_setの段階ではraycast/parallaxで別々のvbidについての頂点
   データを作成する (現状のまま)
2. shapeの登録はmake_vertex_setに指定したdrawersの最初のもののvbid(たぶん
   raycastのものがよい)を使う (現状のまま？)
3. scene_nodeにもshape登録時のvbidが使われる(現状のまま)
4. インスタンスデータに積まれるのもshape登録時のvbid (現状のまま)
5. drawerのdraw時にはそのdrawerのget_instances_vbid()が指すインスタンス
   データを参照、get_vbid()が指す頂点データを参照して描画 (現状のまま？)

調べるべき箇所
- 2.が使うvbidはget_instances_vbid()にするべき？
- 5.が使うvbidはget_instances_vbid()になっているか？
- parallaxにもsubdrawerを用意する必要があるのでは？(done)

struct drawstep_triangles <drawstep_i>
  get_vbid() : vbid_triangles_?_?  これはsubdrawer固有のvbid
  get_instances_vbid() : "vbid_triangles_?_?   これを 1_? に変更
  get_vertices_vbid() : "vbid_triangles_?_0  これはmaindrawerのvbid

get_instances_main_vbid() が必要か？
  make_vertex_setで get_instances_main_vbid() はvbid_triangles_1_0を返す
  描画の際にはget_instances_vbid() はvbid_triangles_1_?を返す
1. make_vertex_setではget_instances_main_vbid()を使う
2. shapeの登録はget_instances_main_vbid()が使われることになる
3. scene_nodeにもget_instances_main_vbid()が使われることになる
4. インスタンスデータに積まれるのは、距離ソート処理してどのsubdrawerで
   描画するかを区別するので、そのインスタンスデータはget_instances_vbid()
   が返すvbidでindexされる。get_instances_vbid()は各subdrawerは個別の
   値を持つがstypeの区別はしない。
get_vertices_vbid()は不要になるので削除。

移行手順
1. get_vertices_vbidをget_instances_main_vbidに改名。?_0を返すのはそのまま。
2. get_instances_vbid()は?_?ではなく1_?を返し、get_instances_main_vbidは
   ?_0ではなく1_0を返すように変更。
ftable[vbid](sn, ncd, idata)の実装をどうするべきか確認。

---------------------------------------
現状の動作再整理

- make_vertex_setにはshape_nameとdrawer_namesを指定できる。shape_name
  はinternしてvsidを得る。各drawer_nameはinternしてdrawerのvbidを得る。
  各drawerごと(subdrawerも区別する)、各vsidごとの頂点データ(のvertex_set)
  が登録される。
- node_factoryはmainloopに入ると作られ、pglshader::prepareによって
  頂点データ一式を受け取る。pglshader::prepare_node_factoryでは
  node_factory::name_to_idを初期化する。draw_dataのvertex_buffersから
  subdrawerでないvbidについてvertexsetを持つvsidを探し、見つかったら
  それをname_to_idに登録する。
- scene_nodeを作るにはときにはnode_factory::make_node_by_nameまたは
  make_node_by_idを使う(name_to_idを引く)。引数joint_idのvbidの
  node_buffer_infoの、vsidで指定されたvertexsetのみを見る
  (make_vertex_setの最初のvbidのみのvertexsetしか見ない)ので、子joint
  は最初のvbidに指定しなければならないことに注意。
- joint_idのvbidフィールドにはdrawerのvbidが使われる。make_vertex_set
  の最初のvbid。
- ftableはvbidに対してprepare_instance_data_funcptrを返すmap。これに
  渡すvbidはdrawerのvbid。
- sceneを描画する前に、scene_nodeのすべての子nodeについてftableの
  エントリをjoint_id::vbidについて引いてインスタンスデータのvbid/vsid
  エントリに積む。このときjoint_idのvbidがdrawerのものであるのに対して、
  インスタンスデータに積まれるのはinstance_vbidである点に注意。
- 描画のためのドローコール発行時には、vertex_buffersのvertex_vbid, 
  インスタンスデータのinstances_vbidのそれぞれのエントリを参照する。

---------------------------------------
現状の課題再整理
- 一つのオブジェクト(インスタンス)に対してparallaxとraycastの両方の
  頂点データを持つようにできない。
  x1. ftableエントリの関数でインスタンスデータを積むときにinstance_vbid
      のエントリへ積むように変更する。そのためにはftable[vbid]の引数idata
      を全インスタンスデータを渡し、関数側でinstance_vbidを引くように変更
      する必要がある。
      -> これは不採用
  x1. make_vertex_setに指定するdr_namesは、最初のエントリは必ずdrawer_vbid
       とinstance_vbidが一致するようなものにする。それ以外のエントリは最初
       のエントリと同じinstance_vbidになるようなdrawerにする。
      -> これは不採用
  1. node_factoryのname_to_idを、get_instance_vbid()の返すものに変更する。
    (done)
  2. trianglesのget_instance_vbid()を、vbid_triangles_1_?を返すように
     変更する。距離ソートはvbid_triangles_1_?のみを対象とするため。
     (done)
  3. 以上1と2によってparallaxとraycastの両方の頂点データを持つオブジェクト
     shapeが作れるはず。
     (done)
- draw_drawstepでvsidについて端から端までループを回しているのでは。
- 子jointはvbidごとの頂点データとは独立しているので、vbidごとのデータ
  である頂点データに混ぜるのは不自然。


***************************************************** HERE HERE HERE

