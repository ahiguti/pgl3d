<%import>pre.fsh<%/>

<%decl_fragcolor/>
<%frag_in/> vec2 vary_coord;
uniform vec2 pixel_delta;
uniform sampler2D sampler_tex;
uniform sampler2D sampler_tex_depth;
uniform float option_value;

vec3 tex_read(in vec2 delta)
{
  vec3 v = <%texture2d/>(sampler_tex, vary_coord + delta * pixel_delta).xyz;
  return v;
  // return v * v;
}

const int kmax = 15;
const float weight[31] = float[31](
0.0029213834155948,
0.0043703148489516,
0.0063587705844030,
0.0089984944188647,
0.0123851939264988,
0.0165795231321248,
0.0215862659443153,
0.0273350124459989,
0.0336664475923431,
0.0403284540865239,
0.0469853125683838,
0.0532413342537254,
0.0586775544607166,
0.0628972046154989,
0.0655732860169900,
0.0664903800669055,
0.0655732860169900,
0.0628972046154989,
0.0586775544607166,
0.0532413342537254,
0.0469853125683838,
0.0403284540865239,
0.0336664475923431,
0.0273350124459989,
0.0215862659443153,
0.0165795231321248,
0.0123851939264988,
0.0089984944188647,
0.0063587705844030,
0.0043703148489516,
0.0029213834155948
);

/*
const int kmax = 10;
const float weight[21] = float[21](
0.0043820751233921,
0.0079349129589169,
0.0134977416282970,
0.0215693297066279,
0.0323793989164729,
0.0456622713472555,
0.0604926811297858,
0.0752843580387011,
0.0880163316910749,
0.0966670292007123,
0.0997355701003582,
0.0966670292007123,
0.0880163316910749,
0.0752843580387011,
0.0604926811297858,
0.0456622713472555,
0.0323793989164729,
0.0215693297066279,
0.0134977416282970,
0.0079349129589169,
0.0043820751233921
);
*/

void main(void)
{
  if (option_value != 0.0) {
    vec4 v = <%texture2d/>(sampler_tex, vary_coord);
    <%fragcolor/> = vec4(v.rgb, 1.0);
  } else {
    vec3 v = vec3(0.0);
    for (int k = -kmax; k <= kmax; ++k) {
      <%if><%blur_direction_v/>
      v = v + weight[k + kmax] * tex_read(vec2(0.0, float(k)));
      <%else/>
      v = v + weight[k + kmax] * tex_read(vec2(float(k), 0.0));
      <%/>
    }
    // <%fragcolor/> = vec4(sqrt(v), 1.0);
    <%fragcolor/> = vec4(v, 1.0);
  }
}

