public namespace app::app_scene;
public import common -;
public import exception -;
public import numeric::fpmath -;
public import pointer::raw -;
public import text::positional -;
public import io::time -;
public import fundamental::mainloop -;
public import io::environ;
public import pgl3d::ext::debug_helper -;
public import pgl3d::exports -;
public import pgl3d::texture::atlas -;
public import meta m;
public import glm;
public import app::app_data -;
public import app::app_raycast_object -;
public import app::app_collision_shape -;
public import app::texture::triangles_texture -;

public multithreaded struct app_scene_shared(io const& sys0)
  <pgl3d_scene_shared>
{
  public position_angle posang;
  public glm::vec3 pos_delta;
  public int scene_next;
  public int raycast_layer;
  public bool engine_status = true;
  public float light_on;
  public glm::vec2 light;
  public float exposure = 1.0f;
  public int option_value = 0;
  public int option_value2 = -1;
  public texture_info default_font_texture_info;
  public string_map app_commands;
  public string app_status_message;
  public io::io sys = sys0;
  public raycast_drawers_info rdi;
  public option{tptr{tiled_voxel_texture}} tvt;
  public option{tptr{texture_updates}} tup;
  public collision_shape_data_array shapes;
  public projection_info pj_drawing_frame;
    // motion stepで書き込み、motion swapでこれをdrawerに渡す
  function ptr{pgl3d_scene} make_scene(node_factory const& nodefac) {
    return make_ptr{app_scene}(nodefac, shapes, tvt.some, tup.some, sys);
  }
}

public function void build_vertices(app_data mutable& app,
  make_vertices_i mutable& pgs)
{
  debug_log("build_vertices");
  const& voxtmap = app.tvt->tmap_edit->data[0][0];
  const voxtmap_size = map{glm::vec3, static_cast{float, uint}}(
    voxtmap.get_size_uvec3());
  const voxtmap_size_max = fold_list{max}(0.0f, voxtmap_size);
  const voxtmap_whd = voxtmap_size / voxtmap_size_max;
  debug_log("voxtmap_whd", voxtmap_whd);

  // import
  const objs = make_farray{string}(
      "parts",
      "tuto2"
      // "al",
      // "cessna",
      // "skyscraper",
      // "airboat"
      );
  const tr0_0 = make_varray{string}("vbid_triangles_0_0");
      // ポリゴンをparallax mappingで描画 (stype==0, ssubtype==0)
  const tr1_0 = make_varray{string}("vbid_triangles_1_0");
      // 直方体をraycastingで描画 (stype==1, ssubtype==0)
  // const tr1_0 = make_varray{string}(
  //   "vbid_triangles_1_0",
  //   "vbid_triangles_2_0");
  //     // 直方体をvoxel raycastingで描画 (stype==1, ssubtypeはあとで増やす)
  //     // stype==2は現在使っていない?
  // const tr1_1 = make_varray{string}(
  //   "vbid_triangles_1_1");
  // const tr1_2 = make_varray{string}(
  //   "vbid_triangles_1_2");
  const parti = make_varray{string}("vbid_particle");
  const parti_bb = make_varray{string}("vbid_particle_bb");
  for (const i, const name: objs) {
    string fn = "res/" + name + ".obj";
    string fcontent;
    sdl_load_file(fn, fcontent);
    sdl_log("load", fn, fcontent.size());
    const wfobjp = wfobject_read(fcontent);
    for (const j, mutable& v: wfobjp->v) {
      // v *= 10.0f;
    }
    for (const k, const g: wfobjp->groups) {
      pgs.make_vertex_set(tr0_0, name,
	import_wfobj(*wfobjp, *g, ctx_fill(0)));
    }
  }
  sdl_log("load prebuild");
  mutable rnd = make_rand_generator(1U);
  pgs.make_vertex_set(tr1_0, "empty-scene", hole());
  pgs.make_vertex_set(tr0_0, "tuto2-multi2s8",
    rand_sphere(200.0, 9000, false, true, rnd,
      ctx_point_joint("tuto2")));
  mutable m = mat4_identity();
  mutable m0 = m;
  mutable m1 = m;
  float box_size = 32.0f;
  debug_log("init m,m0,m1", m.to_farray(), m0.to_farray(), m1.to_farray());
  // float box_size = 1.0f;
  m = mat4_identity()
    .translate(glm::make_vec3(0.0, 0.0, box_size * 2.0f));
  m0 = mat4_identity()
    .rotate(to_radians(45.0), glm::make_vec3(0.0, 0.0, 1.0));
  m1 = mat4_identity()
    .translate(glm::make_vec3(0.0, 0.0, box_size * (-1.0f)))
    .rotate(to_radians(45.0), glm::make_vec3(0.0, 0.0, 1.0));
  debug_log("m,m0,m1", m.to_farray(), m0.to_farray(), m1.to_farray());
  const mi = glm::make_vec3(0.0, 0.0, 0.0);
  const mx = voxtmap_whd;
    // mi, mxはテクスチャ全体を貼り付けるときに指定する
  const mi_atl = mi;
  const mx_atl = mx / 4.0f;
    // mi_atl, mx_atlはテクスチャをatlasで割り当てるときに指定する。
    // テクスチャ全体の1/64の大きさ。
  float small_box_size = 1.0f;
  glm::mat4 small_m1 = mat4_identity()
    .translate(glm::make_vec3(0.0, 0.0, small_box_size * (-1.0f)))
    .rotate(to_radians(45.0), glm::make_vec3(0.0, 0.0, 1.0));
  debug_log("make box");
  option{ptr{atlas}} noatl;
  option{ptr{atlas}} atl;
  atl.some = app.atl;
  atl.some->reset(voxtmap.get_size_uvec3());
    // atlasの大きさをセットして初期化
  float tex_height = 0.05f;
  // 立方体の各面にtex3d貼り付け
  pgs.make_vertex_set(tr1_0, "boxsurf-tex3d",
    regular_polygon(1.4142f * box_size, 4,
      apply(m1,
	bump_apply(m, true,
          ctx_tex3d(1, 0, mi, mx, noatl, tex_height),
          ctx_tex3d(1, 0, mi, mx, noatl, tex_height))),
      apply(m1,
	ctx_tex3d(1, 0, mi, mx, noatl, tex_height))));
  // pgs.make_vertex_set(tr1_0, "box", cuboid_tex3d(mi, mx, glm::vec3(),
  //   32.0f));
  // debug_log("box", box_size, mi, mx, m0);
  // debug_log("main reg box begin", box_size);
  // pgs.make_vertex_set(tr0_0, "box",
  //   regular_polygon(1.4142f * box_size, 4,
  //     apply(m0, hole()),
  //     apply(m0,
  //       ctx_fill(0))));
  pgs.make_vertex_set(tr1_0, "box",
    regular_polygon(1.4142f * box_size, 4,
      apply(m0, hole()),
      apply(m0,
	ctx_tex3d(0, 0, mi, mx, noatl, tex_height))));
          // テクスチャ全体をmapする
  // debug_log("main reg box end");
  // debug_log("make box_opt1");
  pgs.make_vertex_set(tr1_0, "box_opt1",
    regular_polygon(1.4142f * box_size, 4,
      apply(m0, hole()),
      apply(m0,
	ctx_tex3d(0, 0, mi, mx, noatl, tex_height))));
  // (80, 0, 35), (16, 21, 2) 全体は(2048x2048x64)
  // const tmi = glm::make_vec3(80.0f, 0.0f, 35.0f);
  // const tsz = glm::make_vec3(16.0f, 21.0f, 2.0f);
  // (59,20,49) - (59,0,63), min(59,0,49), sz(1, 21, 15)
  const tmi = glm::make_vec3(59.0f, 0.0f, 49.0f);
  const tsz = glm::make_vec3(1.0f, 21.0f, 15.0f);
  const smallmi = tmi / voxtmap_size_max;
    // map{glm::vec3, operator::div}(tmi, voxtmap_size);
  const smallmx = (tmi + tsz) / voxtmap_size_max;
    // map{glm::vec3, operator::div}(tmi + tsz, voxtmap_size);
  debug_log("make smallbox");
  pgs.make_vertex_set(tr1_0, "smallbox", cuboid_tex3d(smallmi, smallmx,
    glm::vec3(), 1.0f));
  // pgs.make_vertex_set(tr1_0, "smallbox",
  //   regular_polygon(1.4142f * small_box_size, 4,
  //     apply(small_m1,
  //       ctx_tex3d(0, 0, smallmi, smallmx, noatl, tex_height)),
  //     hole()));
  pgs.make_vertex_set(tr1_0, "mstex3d",
    regular_polygon(300.0f, 100,
      apply(m1,
	bump_rec(1.0, 1.0, 16,
	  lid(
	    ctx_tex3d(1, 0, mi, mx, noatl, tex_height),
	    bump_rec(0.01, 1.0, 1,
	      hole(),
	      hole()
	    )
	  ),
	  hole()
	)
      ),
      hole()
    )
  );
  if (false) {
    pgs.make_vertex_set(tr1_0, "mstex3d",
      regular_polygon(300.0f, 100,
        apply(m1,
          bump_rec(1.0, 1.0, 16,
            lid(
              ctx_tex3d(1, 0, mi, mx, noatl, tex_height),
              bump_rec(0.01, 1.0, 1,
                ctx_fill(0),
                ctx_tex3d(1, 0, mi, mx, noatl, tex_height)
              )
            ),
            hole()
          )
        ),
        hole()
      )
    );
  }
  m = mat4_identity()
    .translate(glm::make_vec3(0.0, 0.0, 64.0));
  m1 = mat4_identity()
    .translate(glm::make_vec3(0.0, 0.0, -32.0))
    .rotate(to_radians(45.0), glm::make_vec3(0.0, 0.0, 1.0));
  pgs.make_vertex_set(tr0_0, "box50",
    regular_polygon(1.4142f * 50.0f, 4,
      apply(m1,
	bump_apply(m, true, ctx_fill(0), ctx_fill(0))),
      apply(m1,
	ctx_fill(0))));
  if (false) {
    pgs.make_vertex_set(tr1_0, "saucer",
      regular_polygon(150.0, 40,
        bump_rec(1.8, 0.5, 1, ctx_tex3d(1, 0, mi, mx, noatl, tex_height),
          ctx_tex3d(1, 0, mi, mx, noatl, tex_height)),
        bump_rec(0.05, 0.9, 5,
          ctx_tex3d(1, 0, mi, mx, noatl, tex_height),
          sphere(10, ctx_tex3d(1, 0, mi, mx, noatl, tex_height)))));
  }
  pgs.make_vertex_set(tr0_0, "saucer",
    regular_polygon(15.0, 40,
      bump_rec(10.8, 0.5, 1, ctx_fill(0), ctx_fill(0)),
      bump_rec(0.05, 0.9, 5,
        ctx_fill(0),
	sphere(10, ctx_fill_smooth(0)))));
  pgs.make_vertex_set(tr0_0, "saucer-multi",
    regular_polygon(1.0, 3,
      bump_rec(1.0, 1.0, 1, ctx_poly_joint("saucer"), hole()),
      hole()));
  pgs.make_vertex_set(tr0_0, "block-multi",
    regular_polygon(600.0, 4,
      rectangle_split(9, 8, ctx_poly_joint("block")),
      hole()));
  {
    const m1 = mat4_identity().rotate(to_radians(90.0),
	glm::make_vec3(1.0, 0.0, 0.0));
    const m2 = mat4_identity().rotate(to_radians(-90.0),
	glm::make_vec3(1.0, 0.0, 0.0));
    pgs.make_vertex_set(tr0_0, "block-smtest",
      regular_polygon(3.0, 4,
	ctx_poly_joint("box"),
	apply(m1, bump_rec(1.0, 1.0, 1, hole(), ctx_poly_joint("block")))));
  }
  {
    const m1 = mat4_identity().rotate(to_radians(90.0),
	glm::make_vec3(1.0, 0.0, 0.0));
    const m2 = mat4_identity().rotate(to_radians(-90.0),
	glm::make_vec3(1.0, 0.0, 0.0));
    pgs.make_vertex_set(tr0_0, "box-depth",
      regular_polygon(3.0, 4,
	ctx_poly_joint("box"),
	apply(m1, bump_rec(1.0, 1.0, 1, hole(), ctx_poly_joint("box_opt1")))));
  }
  rnd = make_rand_generator(1U);
  pgs.make_vertex_set(tr0_0, "block",
    regular_polygon(30.0, 4,
      rotate_local(glm::make_quat_angle_axis(to_radians(45.0),
	0.0, 0.0, 1.0),
	rectangle_split(30, 30,
	// rectangle_split(1, 1,
	// rectangle_split(4, 4,
	  rand_bump(1, 0.8, 0.4, 0.4, 0.4, 0.4, 2.0, 2.0, rnd,
	    ctx_fill(0), ctx_fill(0), ctx_fill(0)))),
      rotate_local(glm::make_quat_angle_axis(to_radians(-45.0),
	0.0, 0.0, 1.0),
	bump_rec(0.5, 1.0, 1, ctx_fill(0), ctx_fill(0)))));
  rnd = make_rand_generator(1U);
  pgs.make_vertex_set(tr0_0, "nest",
    regular_polygon(50.0, 4,
      rotate_local(glm::make_quat_angle_axis(to_radians(45.0), 0.0, 0.0, 1.0),
	bump_rec(0.03, 1.0, 1, ctx_fill(0),
	  rand_bump2(100, 0.5, 0.2, 0.8, 0.05, 0.05, 0.5, 0.5, rnd,
	    ctx_fill(0),
	    rand_bump2(30, 10.0, 0.1, 0.2, 0.1, 0.2, 0.2, 0.5, rnd,
	      ctx_fill(0), ctx_fill(0), ctx_fill(0)),
	    ctx_fill(0)))),
      rotate_local(glm::make_quat_angle_axis(to_radians(45.0), 0.0, 0.0, 1.0),
	bump_rec(0.03, 1.0, 1, ctx_fill(0),
	  rand_bump2(100, 0.5, 0.2, 0.8, 0.05, 0.05, 0.5, 0.5, rnd,
	    ctx_fill(0),
	    rand_bump2(30, 10.0, 0.1, 0.2, 0.1, 0.2, 0.2, 0.5, rnd,
	      ctx_fill(0), ctx_fill(0), ctx_fill(0)),
	    ctx_fill(0))))));
  m = mat4_identity()
    .translate(glm::make_vec3(100.0, 100.0, 100.0))
    .rotate(to_radians(30.0), glm::make_vec3(0.0, 0.0, 1.0));
  pgs.make_vertex_set(tr0_0, "nest-multi",
    regular_polygon(600.0, 4,
      bump_apply(m, true, hole(),
	bump_rec_seq(0.2, 1.0, 5, hole(),
	  rectangle_split(10, 10, ctx_poly_joint("nest")))),
      hole()));
  m = mat4_identity()
    .translate(glm::make_vec3(0.0, 0.0, 1.0))
    .rotate(to_radians(10.0), glm::make_vec3(0.0, 0.0, 1.0));
  if (false) {
    pgs.make_vertex_set(tr1_0, "bullet",
      regular_polygon(1.0, 6,
        bump_apply(m, true,
          ctx_tex3d(1, 0, mi, mx, noatl, tex_height),
          ctx_tex3d(1, 0, mi, mx, noatl, tex_height)),
        bump_apply(m, true,
          ctx_tex3d(1, 0, mi, mx, noatl, tex_height),
          ctx_tex3d(1, 0, mi, mx, noatl, tex_height))));
  }
  pgs.make_vertex_set(tr0_0, "bullet",
    regular_polygon(1.0, 6,
      bump_apply(m, true, ctx_fill(0), ctx_fill(0)),
      bump_apply(m, true, ctx_fill(0), ctx_fill(0))));
  // 60fps, macosx/linux mbp gt750m
  pgs.make_vertex_set(tr0_0, "bullet-multi",
    regular_polygon(600.0, 4,
      rectangle_split(170, 170, ctx_poly_joint("bullet")),
      hole()));
  m = mat4_identity()
    .translate(glm::make_vec3(0.0, 0.0, 1.0))
    .rotate(10.0, glm::make_vec3(0.0, 0.0, 1.0)); // FIXME: to_radians?
  pgs.make_vertex_set(tr1_0, "bullet2",
    regular_polygon(1.0, 5,
      bump_rec(2.3, 0.8, 1,
        ctx_tex3d(1, 0, mi_atl, mx_atl, atl, tex_height),
        ctx_tex3d(1, 0, mi_atl, mx_atl, atl, tex_height)),
      bump_rec(3.1, 0.8, 1,
        ctx_tex3d(1, 0, mi_atl, mx_atl, atl, tex_height),
        ctx_tex3d(1, 0, mi_atl, mx_atl, atl, tex_height))));
  if (false) {
    pgs.make_vertex_set(tr0_0, "bullet2",
      regular_polygon(1.0, 5,
        bump_rec(2.3, 0.8, 1, ctx_fill(0), ctx_fill(0)),
        bump_rec(3.1, 0.8, 1, ctx_fill(0), ctx_fill(0))));
  }
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr0_0, "bullet2-multi",
    rand_sphere(200.0, 37000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr0_0, "block-multi2",
    rand_sphere(500.0, 300, false, true, rnd,
      ctx_point_joint("block")));
  pgs.make_vertex_set(tr0_0, "box-multi",
    rand_sphere(300.0, 500, false, true, rnd,
      ctx_point_joint("box")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr0_0, "bullet2-multi2",
    rand_sphere(200.0, 20000, false, true, rnd,
      ctx_point_joint("bullet2")));
  {
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr0_0, "bullet2-multi2s1",
    rand_sphere(200.0, 2000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr0_0, "bullet2-multi2s2",
    rand_sphere(200.0, 3000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr0_0, "bullet2-multi2s3",
    rand_sphere(200.0, 4000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr0_0, "bullet2-multi2s4",
    rand_sphere(200.0, 5000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr0_0, "bullet2-multi2s5",
    rand_sphere(200.0, 6000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr0_0, "bullet2-multi2s6",
    rand_sphere(200.0, 7000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr0_0, "bullet2-multi2s7",
    rand_sphere(200.0, 8000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr0_0, "bullet2-multi2s8",
    rand_sphere(200.0, 9000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr0_0, "bullet2-multi2s9",
    rand_sphere(200.0, 10000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr0_0, "bullet2-multi2s10",
    rand_sphere(200.0, 11000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr0_0, "bullet2-multi2s11",
    rand_sphere(200.0, 12000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr0_0, "bullet2-multi2s12",
    rand_sphere(200.0, 13000, false, true, rnd,
      ctx_point_joint("bullet2")));
  }
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr0_0, "bullet2-multi3",
    rand_sphere(50.0, 1000, false, true, rnd,
      ctx_point_joint("bullet2")));
  pgs.make_vertex_set(tr0_0, "bullet-multi-2",
    regular_polygon(600.0, 4,
      rectangle_split(80, 80, ctx_poly_joint("bullet")),
      hole()));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr0_0, "saucer-multi3",
    rand_sphere(200.0, 200, false, true, rnd,
      ctx_point_joint("saucer")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr0_0, "ab-multi3",
    rand_sphere(100.0, 100, false, true, rnd,
      ctx_point_joint("airboat")));
  rnd = make_rand_generator(1U);
  pgs.make_vertex_set(parti, "particle",
    rand_sphere(1.0, 100, true, true, rnd, ctx_fill(0)));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(parti, "particle-multi",
    rand_sphere(60.0, 10000, true, true, rnd,
      ctx_point_joint("particle")));
  rnd = make_rand_generator(1U);
  pgs.make_vertex_set(parti, "particle-bb",
    rand_sphere(1.0, 100, true, true, rnd, ctx_fill(0)));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(parti_bb, "particle-bb-multi",
    rand_sphere(60.0, 10000, true, true, rnd,
      ctx_point_joint("particle-bb")));
  pgs.make_vertex_set(parti_bb, "mixed",
    regular_polygon(1.0, 5,
      bump_rec(1.0, 10.0, 1, hole(), ctx_poly_joint("saucer")),
      ctx_poly_joint("particle-bb")));
  //// for prepass test
  pgs.make_vertex_set(tr0_0, "plane-multi-1",
    regular_polygon(100.0, 4,
      bump_rec_seq(0.1, 1.0, 10, hole(), ctx_poly_joint("box")),
      hole()));
  pgs.make_vertex_set(tr0_0, "plane-multi-2",
    regular_polygon(100.0, 4,
      bump_rec_seq(0.1, 1.0, 10, hole(), backside(ctx_poly_joint("box"))),
      hole()));
  //// for dynamics test
  pgs.make_vertex_set(tr0_0, "rigidbody-multi",
    regular_polygon(100.0, 4,
      rectangle_split(10, 10, ctx_poly_joint("box")),
      hole()));

  //// save default font metrics
  downcast_mutable{app_scene_shared}(*app.scene_shared)
    .default_font_texture_info = pgs.get_texture_info("font");

  //// save edit_mode transform
  {
    // editmodeのときにカーソル移動とカメラ移動を連動させるために
    // 座標変換行列を保存しておく
    const vp = pgs.get_nonempty_vertices("box");
    const& vattrs = vp->vertex_attrs;
    const& vattr = vattrs[0];
    debug_log("edit_mode transform", vattr);
    const& tan = vattr.tan;
    const& nor = vattr.nor;
    const bnr = glm::cross(nor, tan);
    const& pos = vattr.pos;
    const glm::mat4 tan_to_obj = glm::make_mat4(
      tan.x, tan.y, tan.z, 0.0f,
      bnr.x, bnr.y, bnr.z, 0.0f,
      nor.x, nor.y, nor.z, 0.0f,
      pos.x, pos.y, pos.z, 1.0f);
      // 接線空間からオブジェクト座標系への変換
    app.edit_mode_trans = tan_to_obj;
    app.edit_mode_vattr = vattr;
  }

  //// save shapes for physics engine
  function void shapes_add(cstrref const& name, float mass,
    collision_shape_e shape)
  {
    const vp = pgs.get_nonempty_vertices(name);
    const& p = vp->positions;
    const& va = vp->vertex_attrs;
    const& elems = vp->elements;
    downcast_mutable{app_scene_shared}(*app.scene_shared).shapes.push_back(
      make_tptr{collision_shape_data}(name, pgs.get_joint_id(name), mass,
        shape, p, va, elems, app.tvt));
  }
  function void shapes_add_convex(cstrref const& name, float mass)
  {
    shapes_add(name, mass, collision_shape_e_convex_hull);
  }
  function void shapes_add_sphere(cstrref const& name, float mass)
  {
    shapes_add(name, mass, collision_shape_e_sphere);
  }
  function void shapes_add_concave(cstrref const& name, float mass)
  {
    shapes_add(name, mass, collision_shape_e_concave);
  }
  function void shapes_add_voxel(cstrref const& name, float mass)
  {
    shapes_add(name, mass, collision_shape_e_voxel);
  }
  shapes_add_voxel("box", -32768.0f);
  shapes_add_voxel("boxsurf-tex3d", -32768.0f);
  shapes_add_sphere("box_opt1", 32768.0f);
  shapes_add_sphere("smallbox", 1.0f);
  shapes_add_sphere("tuto2", 1.0f);
  shapes_add_sphere("nest", 1000.0f);
  shapes_add_sphere("box50", 50.0f);
  shapes_add_sphere("bullet2", 2.0f);
  // shapes_add_sphere("bullet2", 1.0f);
  shapes_add_sphere("bullet", 2.0f);
  shapes_add_sphere("saucer", 10.0f);
  // shapes_add_concave("block", 0.0f);
  shapes_add_convex("block", 100.0f);
  // shapes_add_convex("knight", 10.0f);
  shapes_add_sphere("particle", 1.0f);
  shapes_add_sphere("particle-bb", 1.0f);
}

public function void prepare_vbids(raycast_drawers_info mutable& rdi,
  make_vertices_i mutable& pgs, int raycast_layer)
{
  rdi.subdrawer_vbids.clear();
  rdi.subdrawer_vbid_min = 0;
  rdi.subdrawer_vbid_max = 0;
  uint const num_subdrawers = static_cast{uint}(raycast_layer);
  for (uint i : 0 .. num_subdrawers) {
    string s = "vbid_triangles_1_" + to_string(i);
    const vbid = pgs.get_vbid(s);
    if (vbid == vbid_invalid()) {
      break;
    }
    // debug_log("prepare_vbids: found", s, vbid);
    rdi.subdrawer_vbids.push_back(vbid);
    if (i == 0u) {
      rdi.subdrawer_vbid_min = vbid;
      rdi.subdrawer_vbid_max = vbid;
    } else {
      rdi.subdrawer_vbid_min = min(rdi.subdrawer_vbid_min, vbid);
      rdi.subdrawer_vbid_max = max(rdi.subdrawer_vbid_max, vbid);
    }
    // debug_log("subdrawer vbid_min_max", rdi.subdrawer_vbid_min,
    //   rdi.subdrawer_vbid_max);
  }
  if (static_cast{size_t}(rdi.subdrawer_vbid_max
    - rdi.subdrawer_vbid_min + 1) != rdi.subdrawer_vbids.size()) {
    // 連続したvbidでなければならない。順序はどうてもいい。
    // そうなるためには、drawerの生成順を気にしなければならない。
    // 理不尽な制約なので、できれば修正する。
    debug_log("failed to get subdrawer_vbids");
    throw runtime_error_template{"subdrawer_vbids"}("1");
  }
  // debug_log("prepare_vbids: ", rdi.subdrawer_vbids.size());
  rdi.name_to_joint_id = pgs.get_name_to_joint_id();
  rdi.vs_radius.clear();
  for (const& name, const& joint_id: rdi.name_to_joint_id) {
    cptr{vertices} const vtxs = pgs.get_nonempty_vertices(name);
    if (!vtxs->vertex_attrs.empty() && vtxs->vertex_attrs[0].is_tconv) {
      // 半径を計算するために、いったんvoxel_shapeを作る。
      const voxsh = make_voxel_shape(vtxs->vertex_attrs, vtxs->elements);
      rdi.vs_radius[joint_id] = voxsh->get_radius();
    } else {
      const& p = vtxs->positions;
      float radius = 0.0f;
      for (size_t i : 0 .. p.size() / 3) {
        const oi = i * 3;
        const vec = glm::make_vec3(p[oi], p[oi+1], p[oi+2]);
        // debug_log("shape", name, joint_id, "vec", vec);
        radius = max(radius, glm::length(vec));
      }
      // debug_log("shape", name, joint_id, radius);
      rdi.vs_radius[joint_id] = radius;
    }
  }
}

threaded function double get_time(io::io const& sys)
{
  const t = sys.high_resolution_timer();
  const d = sys.high_resolution_timer_frequency();
  return static_cast{double}(t) / static_cast{double}(d);
}

threaded function float time_diff(double t0, double t1)
{
  return static_cast{float}(t1 - t0);
}

threaded struct app_scene(node_factory const& nodefac0,
  collision_shape_data_array const& shapes0,
  tptr{tiled_voxel_texture} const& tvt0, tptr{texture_updates} const& tup0,
  io::io const& sys0)
  <pgl3d_scene>
{
  public scene_control sctl = scene_control(nodefac0, shapes0, tvt0, tup0);
  public io::io sys = sys0;
  public string timings;
  public raycast_objects robjs;
  private function void update_camera_light(position_angle mutable& camera,
    position_angle mutable& light, glm::vec2 const& light_val)
  {
    light.position = camera.position + glm::make_vec3(0.0, 0.0, 0.0);
    light.angle = (
      glm::make_quat_angle_axis(-3.14f * light_val.x, 1.0, 0.0, 0.0) *
      glm::make_quat_angle_axis(-3.14f * light_val.y, 0.0, 1.0, 0.0))
      .normalize();
  }
  public function void on_motion_step(float frame_speed,
    cstrref const& status_message,
    cslice{prepare_instance_data_funcptr} const& ftable,
    whole_instances_type mutable& whole_instances,
    pgl3d_scene_shared mutable& ss)
  {
    // motion thread上でフレーム毎に呼ばれる。物理を1ステップ実行し、
    // オブジェクトの位置とカメラ位置などから表示オブジェクトのインスタンス
    // データを作る。インスタンスデータはftableのエントリ関数
    const t0 = get_time(sys);
    mutable& dss = downcast_mutable{app_scene_shared}(ss);
    // const t0 = io::debug_system().gettimeofday_double();
    projection_info mutable& pj = dss.pj_drawing_frame;
    pj.camera = dss.posang;
    update_camera_light(pj.camera, pj.light, dss.light);
    pj.view = pj.camera.to_mat4().inverse();
    pj.view_projection = pj.projection * pj.view;
    pj.exposure = dss.exposure;
    pj.option_value = static_cast{float}(dss.option_value);
    pj.option_value2 = static_cast{float}(dss.option_value2);
    // dss.pj_drawing_frame = pj; // これを介してmainスレッドのdrawersに反映
    const sm_view = pj.light.to_mat4().inverse();
    // const sm_vp = pj.sm_projection * sm_view;
    const& vp = pj.view_projection;
    node_common_data ncd;
    // ncd.shadowmapping_vp = sm_vp; // FIXME: remove: unused
    ncd.vp = vp;
    scene_control_update_buttons(sctl, sctl.node_buttons);
    size_t swarm_total = 0;
    for (const i, const& lpb: sctl.lpbullet_swarms) {
      swarm_total += lpb->size();
    }
    {
      farray{string, 2} msg;
      msg[0] = string_join{" "}("O:", sctl.sco.dworld.rigid_bodies_size(),
	swarm_total, status_message, "T:", timings);
      if (!dss.engine_status) {
	msg[0] = "RELOADING SHADER FAILED";
        msg[1] = "";
      } else {
        msg[1] = dss.app_status_message;
      }
      scene_control_set_message(sctl, sctl.node_status_message, msg,
	0, 0,
	dss.default_font_texture_info.char_w,
	dss.default_font_texture_info.char_h,
	static_cast{float}(pj.display_width),
	static_cast{float}(pj.display_height));
    }
    const t1 = get_time(sys);
    robjs.set_perspective(pj.camera_pers);
    robjs.clear_objects();
    scene_control_step(sctl, dss, robjs, pj, frame_speed, ncd, ftable,
      whole_instances);
      // 物理エンジンを使ったオブジェクトの移動とインスタンス出力。大きな
      // raycastオブジェクトはここではrobjsに入れておき、後でソートしてから
      // インスタンス出力する。
    robjs.prepare_instances(ncd, dss.rdi, ftable, whole_instances);
      // 大きなraycastシェーダの重ね合わせを決定してインスタンス出力
    const t2 = get_time(sys);
    prepare_instance_data_ft_rec(ncd, sctl.node_status_message, ftable,
      whole_instances);
      // node_status_messageのインスタンス出力
    const t3 = get_time(sys);
    prepare_instance_data_ft_rec(ncd, sctl.node_buttons, ftable,
      whole_instances);
      // node_buttonsのインスタンス出力
    const t4 = get_time(sys);
    prepare_instance_data_lp(ncd, ftable, whole_instances);
      // lpのインスタンス出力
    const t5 = get_time(sys);
    timings = string_join{" "}(
      time_diff(t0, t1),
      time_diff(t1, t2),
      time_diff(t2, t5));
    // debug_log("timings", timings);
  }
  private function size_t prepare_instance_data_ft_rec(
    node_common_data mutable& ncd,
    scene_node const& sn,
    cslice{prepare_instance_data_funcptr} const& ftable,
    whole_instances_type mutable& whole_instances)
  {
    size_t r = 0;
    const& vbid = sn.joint_id.vbid;
    const& vsid = sn.joint_id.vsid;
    if (vbid != vbid_invalid() && vsid != vsid_invalid()) {
      ++r;
      mutable& idata = whole_instances[vbid][vsid];
      // debug_log("prepare_instance_data_ft_rec instance vbid=", vbid);
      ftable[vbid](sn, ncd, idata);
    }
    for (const i, const& snp: sn.children) {
      r += prepare_instance_data_ft_rec(ncd, snp, ftable, whole_instances);
    }
    return r;
  }
  private function void prepare_instance_data_lp(
    node_common_data mutable& ncd,
    cslice{prepare_instance_data_funcptr} const& ftable,
    whole_instances_type mutable& whole_instances)
  {
    // FIXME: 
    const vbid = sctl.joint_id_lp.vbid;
    const vsid = sctl.joint_id_lp.vsid;
    mutable& idata = whole_instances[vbid][vsid];
    for (const k, const& lpbsw: sctl.lpbullet_swarms) {
      const& lparr = lpbsw->lparr;
      for (const i, const& lpb: lparr) {
	const sli = lpb.value.crange();
	idata.instance_buffer.append(sli[0 .. 9]);
      }
    }
  }
}

function varray{float} reduce_vertices(cslice{float} const& shape, float delta)
{
  varray{float} a;
  for (size_t i : 0 .. shape.size() / 3) {
    const oi = i * 3;
    const vec = glm::make_vec3(shape[oi], shape[oi+1], shape[oi+2]);
    size_t j = 0;
    const asz = a.size() / 3;
    for (j = 0; j < asz; ++j) {
      const oj = j * 3;
      const dx = a[oj    ] - vec.x;
      const dy = a[oj + 1] - vec.y;
      const dz = a[oj + 2] - vec.z;
      if (fabs(dx) + fabs(dy) + fabs(dz) < delta) {
	break;
      }
    }
    if (j == asz) {
      a.append(vec.to_cslice());
    }
  }
  return a;
}

metafunction node scene_node;

threaded function node make_node()
{
  return scene_node(joint_id_type(), mat4_identity());
}

tsvaluetype struct lpbullet_data {
  public farray{float, 9} value;
  public function glm::vec3 get_pos0() const {
    return glm::make_vec3(value[0], value[1], value[2]);
  }
  public function glm::vec3 get_pos1() const {
    return glm::make_vec3(value[3], value[4], value[5]);
  }
  public function float get_size() const {
    return value[6];
  }
  public function float get_step() const {
    return value[7];
  }
  public function float get_step_limit() const {
    return value[8];
  }
  public function void set_pos0(glm::vec3 const& v) {
    value[0] = v.x;
    value[1] = v.y;
    value[2] = v.z;
  }
  public function void set_pos1(glm::vec3 const& v) {
    value[3] = v.x;
    value[4] = v.y;
    value[5] = v.z;
  }
  public function void set_size(float v) {
    value[6] = v;
  }
  public function void set_step(float v) {
    value[7] = v;
  }
  public function void set_step_limit(float v) {
    value[8] = v;
  }
}

threaded struct
collision_shape_ptr(ptr{collision_shape_i} const& ptr0, float mass0)
{
  public ptr{collision_shape_i} shape_ptr = ptr0;
  public float mass = mass0;
}

threaded struct
scene_objects(collision_shape_data_array const& shape0, size_t num_split0,
  tptr{tiled_voxel_texture} const& tvt0, tptr{texture_updates} const& tup0)
{
  public dynamics_world dworld = dynamics_world(num_split0, tvt0->tmap_edit,
    tup0);
  public tree_map{string, collision_shape_ptr} shapes_by_name;
  public tree_map{joint_id_type, collision_shape_ptr} shapes_by_id;
  public tree_map{string, joint_id_type} name_to_joint_id;
  add_collision_shapes(shape0);
  public function void clear_objects() 
  {
    dworld.clear();
    dworld.set_gravity(0.0f, 0.0f, 0.0f);
  }
  public function void
  add_collision_shapes(collision_shape_data_array const& sa)
  {
    for (const i, const& val: sa) {
      add_collision_shape(*val);
    }
  }
  private function void
  add_collision_shape(collision_shape_data const& sh)
  {
    const& name = sh.name;
    const& joint_id = sh.joint_id;
    name_to_joint_id.insert(name, joint_id);
    const& v = sh.values;
    const& va = sh.vattrs;
    const& e = sh.elements;
    const mass = sh.mass;
    function ptr{collision_shape_i} get_shape() {
      if (sh.shape == collision_shape_e_sphere) {
	return make_sphere_shape(v, e);
      } else if (sh.shape == collision_shape_e_box) {
	return make_box_shape(v, e);
      } else if (sh.shape == collision_shape_e_convex_hull) {
	return make_convex_hull_shape(v, e);
      } else if (sh.shape == collision_shape_e_concave) {
	return make_triangle_mesh_shape(v, e);
      } else if (sh.shape == collision_shape_e_voxel) {
	return make_voxel_shape(va, e);
      } else {
	throw runtime_error_template{"get_shape"}("1");
      }
    }
    add_collision_shape_one(name, joint_id, get_shape(), mass);
  }
  private function void add_collision_shape_one(string const& name,
    joint_id_type const& id, ptr{collision_shape_i} const& sh,
    float mass)
  {
    const csp = collision_shape_ptr(sh, mass);
    shapes_by_name.insert(name, csp);
    shapes_by_id.insert(id, csp);
  }
  public function option{ptr{rigid_body_i}} add_collision_object(
    scene_node const& sn)
  {
    option{ptr{rigid_body_i}} r;
    if (sn.joint_id.vsid < 0) {
      return r;
    }
    if (const& shape: shapes_by_id[sn.joint_id]) {
      const& t = sn.trans.value.to_cslice();
      const rb = make_rigid_body(sn.joint_id, shape.shape_ptr, shape.mass, t);
      dworld.add_rigid_body(rb);
      r.some = rb;
      return r;
    }
    return r;
  }
}

multithreaded struct
lpbullet_swarm <swarm_i>
{
  public varray{lpbullet_data} lparr;
  public function size_t size() const { return lparr.size(); }
  public function uint get(size_t i, glm::vec3 mutable& pos_r,
    float mutable& radius_r) const
  {
    const& o = lparr[i];
    pos_r = (o.get_pos0() + o.get_pos1()) * 0.5f;
    radius_r = 1.5f;
    return o.get_step() > 5.0f ? 0xffffffffU : 0U;
  }
  public function void on_collide(size_t i, size_t o)
  {
    mutable& lpb = lparr[i];
    lpb.set_step(lpb.get_step_limit());
  }
  public function void on_step(float speed)
  {
    for (const i, mutable& lpb: lparr) {
      mutable vec0 = lpb.get_pos0();
      mutable vec1 = lpb.get_pos1();
      const vd = vec1 - vec0;
      vec0 += vd * speed / 4.0f;
      vec1 += vd * speed / 4.0f;
      const step = lpb.get_step() + speed;
      const slim = lpb.get_step_limit();
      const sz = min(1.0f, (slim - step) / 20.0f);
      lpb.set_pos0(vec0);
      lpb.set_pos1(vec1);
      lpb.set_size(0.25f * sz);
      lpb.set_step(step);
    }
    function bool lp_is_finished(lpbullet_data const& lpb)
    {
      return lpb.get_step() > lpb.get_step_limit();
    }
    erase_cond{lp_is_finished}(lparr);
  }
}

threaded struct
scene_control(node_factory const& nfac,
  collision_shape_data_array const& shapes0,
  tptr{tiled_voxel_texture} const& tvt0, tptr{texture_updates} const& tup0)
{
  public size_t const num_split = 3;
  public node_factory nodefac = nfac;
  public bool scene_paused = false;
  public float prev_spawn = 0.0;
  public joint_id_type joint_id_lp =
    nodefac.get_joint_id_by_name("lineparticle");
  public joint_id_type joint_id_font =
    nodefac.get_joint_id_by_name("default_font");
  public joint_id_type joint_id_rect2d =
    nodefac.get_joint_id_by_name("rect2d");
  public joint_id_type joint_id_dbgui =
    nodefac.get_joint_id_by_name_notrw("dbgui");
  public joint_id_type joint_id_dbgui2 =
    nodefac.get_joint_id_by_name_notrw("dbgui2");
  public size_t cur_scene = 0;
  public varray{tptr{lpbullet_swarm}} lpbullet_swarms;
  // public varray{lpbullet_data} lpbullet;
  public node mutable node_scene = make_node();
  public node mutable node_status_message = make_node();
  public node mutable node_buttons = make_node();
  public scene_objects sco = scene_objects(shapes0, num_split, tvt0, tup0);
  public darray{string} const scene_names = make_darray{string}(
    // "untitled", "saucer", "saucer-multi", "block-multi", "block",
    // "ab-multi", "ab-multi3", "skyscraper",
    // "al", "cessna", "skyscraper", "airboat",
    // "knight-multi",
    "empty-scene",
    //"parts",
    "tuto2-multi2s8",
    "box",
    "boxsurf-tex3d",
    "box-multi",
    "box-depth",
    "plane-multi-1",
    "plane-multi-2",
    "box_opt1",
    "mstex3d",
    "rigidbody-multi",
    "block-smtest",
    "block-multi",
    "saucer-multi",
    "bullet2-multi2s1",
    "bullet2-multi2s2",
    "bullet2-multi2s3",
    "bullet2-multi2s4",
    "bullet2-multi2s5",
    "bullet2-multi2s6",
    "bullet2-multi2s7",
    // "bullet2-multi2s8",
    // "bullet2-multi2s9",
    // "bullet2-multi2s10",
    // "bullet2-multi2s11",
    // "bullet2-multi2s12",
    "nest",
    "nest-multi",
    "saucer",
    "block-multi2",
    // "bullet2-multi",
    // "bullet-multi", "saucer-multi3",
    "particle", "particle-multi",
    "particle-bb", "particle-bb-multi"
    );
  init();
  private function void init()
  {
    for (const i: 0 .. num_split) {
      lpbullet_swarms.push_back(make_tptr{lpbullet_swarm}());
    }
    node_scene = instantiate_cur_scene();
  }
  private function node instantiate_cur_scene()
  {
    const name = scene_names[cur_scene];
    mutable r = nodefac.make_node_by_name(name, mat4_identity());
    sco.clear_objects();
    for (const i, const& lpbsw: lpbullet_swarms) {
      sco.dworld.add_swarm(lpbsw, i);
    }
    if (r.children.empty()) {
      sco.add_collision_object(r);
    } else {
      mutable rnd = make_rand_generator(1U);
      // if (cur_scene == 0) {
      //   const ch = r.children[1];
      //   const rb = sco.add_collision_object(ch).some;
      //   rb->apply_central_impulse(1.0f, 0.0f, 0.0f);
      // } else
      {
	for (const i, const& ch: r.children) {
	  const rb = sco.add_collision_object(ch).some;
	  rb->apply_torque_impulse(
	    rnd->generate_float() * 10.0f - 5.0f,
	    rnd->generate_float() * 10.0f - 5.0f,
	    rnd->generate_float() * 10.0f - 5.0f);
	  rb->apply_central_impulse(
	    rnd->generate_float() * 10.0f - 5.0f,
	    rnd->generate_float() * 10.0f - 5.0f,
	    rnd->generate_float() * 10.0f - 5.0f);
	}
      }
    }
    return r;
  }
  public function void scene_next(int v)
  {
    cur_scene = static_cast{size_t}(
      static_cast{int}(cur_scene + scene_names.size()) + v)
      % scene_names.size();
    node_scene = instantiate_cur_scene();
  }
}

threaded function void
scene_control_set_message(scene_control mutable& sctl,
  scene_node mutable& sn_text,
  cslice{string} const& msg, uint x, uint y, uint font_width, uint font_height,
  float screen_w, float screen_h)
{
  {
    const x0 = x;
    mutable& nd = sn_text;
    size_t n;
    for (const i, const& s: msg) {
      n += s.size();
    }
    while (nd.children.size() < n) {
      const p = scene_node(sctl.joint_id_font, mat4_identity());
      nd.children.push_back(p);
    }
    if (nd.children.size() > n) {
      nd.children.erase(n, nd.children.size());
    }
    size_t mi;
    size_t mj;
    for (const k, mutable& p: nd.children) {
      const& sli = p.trans.value.to_slice();
      while (mj >= msg[mi].size() && mi < msg.size()) {
	y += font_height;
	++mi;
	mj = 0;
	x = x0;
      }
      if (mi >= msg.size()) {
	break;
      }
      sli[0] = static_cast{float}((msg[mi][mj] & 0x7f) - 0x20);
      sli[1] = msg[mi][mj] >= 0x80 ? 1.0f : 0.0f; // 反転フラグ
      sli[2] = (static_cast{float}(x) / screen_w) * 2.0f - 1.0f;
      sli[3] = (static_cast{float}(y) / screen_h) * 2.0f - 1.0f;
      x += font_width;
      ++mj;
    }
  }
}

threaded function void
scene_control_update_buttons(scene_control mutable& sctl,
  scene_node mutable& sn_buttons)
{
  //// box
  mutable& nd = sn_buttons;
  if (sctl.joint_id_dbgui.vbid != vbid_invalid()) { // dbgui is enabled
    if (nd.children.size() < 2) {
      mutable p = scene_node(sctl.joint_id_dbgui, mat4_identity());
      // dbgui 左下
      const& sli = p.trans.value.to_slice();
      sli[0] = -0.9f;
      sli[1] = -0.9f;
      sli[2] = 0.9f;
      sli[3] = 0.9f;
      nd.children.push_back(p);
    }
    if (nd.children.size() < 3) {
      mutable p = scene_node(sctl.joint_id_dbgui2, mat4_identity());
      // dbgui2 全面に描画
      const& sli = p.trans.value.to_slice();
      sli[0] = -1.0f;
      sli[1] = -1.0f;
      sli[2] = 2.0f;
      sli[3] = 2.0f;
      nd.children.push_back(p);
    }
  }
}

threaded function void
scene_control_step(scene_control mutable& sctl,
  app_scene_shared const& ss, raycast_objects mutable& robjs,
  projection_info const& pjinfo,
  float frame_speed, node_common_data mutable& ncd,
  cslice{prepare_instance_data_funcptr} const& ftable,
  whole_instances_type mutable& whole_instances)
{
  if (ss.scene_next != 0) {
    sctl.scene_next(ss.scene_next);
  }
  const speed = frame_speed;
  // mutable& snode = *sctl.snode;
  function void step_lp()
  {
    for (const i, const& lpbsw: sctl.lpbullet_swarms) {
      lpbsw->on_step(speed);
    }
  }
  function void spawn_lp_one(glm::mat4 const& m, float steplim, float length)
  {
    // size_t const lim = is_gles != 0 ? 20000U : 200000U;
    size_t const lim = static_cast{size_t}(300000U)
      / sctl.lpbullet_swarms.size();
    size_t min_n = lim;
    size_t min_lpsw = sctl.lpbullet_swarms.size();
    for (const i, const& lpbsw: sctl.lpbullet_swarms) {
      if (lpbsw->size() < min_n) {
	min_lpsw = i;
	min_n = lpbsw->size();
      }
    }
    if (min_n >= lim) {
      return;
    }
    {
      lpbullet_data lpb;
      const& s = m.to_cslice();
      const pos = glm::make_vec3(s[12], s[13], s[14]);
      const rot = m.to_3();
      const dir = rot * glm::make_vec3(0.0f, 0.0f, -1.5f);
      const p0 = pos + dir * 2.0f;
      const p1 = pos + dir * (2.0f + length);
      lpb.set_pos0(p0);
      lpb.set_pos1(p1);
      lpb.set_size(0.25f);
      lpb.set_step(0.0f);
      lpb.set_step_limit(steplim);
      sctl.lpbullet_swarms[min_lpsw]->lparr.push_back(lpb);
    }
    return;
  }
  scene_node sn_work = make_node();
  function void prepare_one(scene_node const& sn)
  {
    const vbid = sn.joint_id.vbid;
    const vsid = sn.joint_id.vsid;
    if (vbid != vbid_invalid() && vsid != vsid_invalid()) {
      if (ss.raycast_layer != 0 && vbid >= ss.rdi.subdrawer_vbid_min &&
	vbid <= ss.rdi.subdrawer_vbid_max) {
	// debug_log("scene_control_step push robj vbid=", vbid);
	if (robjs.push_object(ss.rdi, pjinfo, sn)) {
	  // robjsにpushされた。あとでソートしてからインスタンス生成する。
	  return;
	}
      }
      mutable& idata = whole_instances[vbid][vsid];
      // debug_log("scene_control_step prepare_one vbid,vsid=", vbid, vsid);
      ftable[vbid](sn, ncd, idata);
    }
  }
  function void step_snobj_dynamics(bool spawn_obj, bool spawn_lp_flag)
  {
    const physics_fps = 60;
    const timestep = 1.0f / static_cast{float}(physics_fps);
    const timestep_inv = static_cast{float}(physics_fps);
    if (!sctl.scene_paused) {
      if (spawn_obj) {
	const a = ss.posang.angle * glm::make_vec3(0.0f, 0.0f, -1.0f);
	mutable posang = ss.posang;
	posang.position += a * 0.1f;
	scene_node cnode = scene_node(
	  sctl.sco.name_to_joint_id["smallbox"], posang.to_mat4());
	const& pos_delta = ss.pos_delta;
	const rb = sctl.sco.add_collision_object(cnode).some;
	// debug_log("pos_delta", pos_delta);
	rb->set_linear_velocity(
	  pos_delta.x * timestep_inv,
	  pos_delta.y * timestep_inv,
	  pos_delta.z * timestep_inv);
	  // playerの速度を初速にする
	rb->apply_central_impulse(a.x, a.y, a.z);
	  // 向いている方向にさらにimpulseを加える
	// debug_log("spawn_obj", sctl.sco.dworld.objects_size());
      }
    }
    sctl.sco.dworld.step_simulation(sctl.scene_paused, speed * timestep, 1,
      speed * timestep);
    {
      // 大オブジェクトに小オブジェクトが衝突した。とりあえず小オブジェクト
      // を消すようにしておく。後で修正。 TODO
      varray{ptr{rigid_body_i}} rb_to_remove;
      function void remove_if(size_t i, ptr{rigid_body_i} const& obj)
      {
	if (obj->get_collide()) {
	  rb_to_remove.push_back(obj);
	}
      }
      sctl.sco.dworld.rigid_bodies_foreach{remove_if}();
      for (const i, const& rb: rb_to_remove) {
	sctl.sco.dworld.remove_rigid_body(rb);
      }
    }
    scene_node cursn = scene_node(joint_id_type(), mat4_identity());
    function void step_obj(size_t i, ptr{rigid_body_i} const& obj)
    {
      cursn.joint_id = obj->get_joint_id();
      obj->get_world_transform_mat4(cursn.trans.value);
      prepare_one(cursn);
      if (!sctl.scene_paused && spawn_lp_flag) {
	spawn_lp_one(cursn.trans.value, 200.0f, 1.0f);
      }
    }
    sctl.sco.dworld.rigid_bodies_foreach{step_obj}();
    if (sctl.scene_paused && spawn_lp_flag) {
      mutable posang = ss.posang;
      posang.position += posang.angle * glm::make_vec3(0.0f, 5.0f, -5.0f);
      posang.angle *= glm::make_quat_angle_axis(to_radians(-90.0f),
	1.0f, 0.0f, 0.0f);
      const m = posang.to_mat4();
      spawn_lp_one(m, 10000.0f, 0.1f);
    }
  }
  step_lp(); //// lineparticle
  bool spawn_lp_flag = false;
  {
    sctl.prev_spawn += speed;
    if (sctl.prev_spawn > 3.0) {
      spawn_lp_flag = ss.light_on != 0.0f;
      sctl.prev_spawn -= 3.0;
    }
  }
  if (const& v: ss.app_commands["scene_pause"]) {
    sctl.scene_paused = !sctl.scene_paused;
    debug_log("scene_paused=", sctl.scene_paused);
  }
  {
    bool spawn_obj_flag = false;
    if (const& v: ss.app_commands["throw"]) {
      spawn_obj_flag = true;
    }
    step_snobj_dynamics(spawn_obj_flag, spawn_lp_flag);
  }
}

