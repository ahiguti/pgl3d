public namespace app::app_data;
public import common -;
public import exception -;
public import numeric::fpmath -;
public import pointer::raw -;
public import text::positional -;
public import io::time -;
public import fundamental::mainloop -;
public import io::environ;
public import pgl3d::ext::debug_helper -;
public import pgl3d::exports -;
public import pgl3d::texture::atlas -;
public import meta m;
public import glm;

public struct camera_state {
  public input_control_target player;
  public glm::vec2 light;
}

public struct app_data(tptr{pgl3d_scene_shared} const& scene_shared0)
{
  public tptr{pgl3d_scene_shared} const scene_shared = scene_shared0;
  // public tptr{app_scene_shared} const scene_shared
  //   = make_tptr{app_scene_shared}(io::system);
  public option{ptr{shader_config}} sconf;
  public ptr{projection_info} proj_df = make_ptr{projection_info}();
    // drawing frame
  public ptr{projection_info} proj_pm = make_ptr{projection_info}();
    // pre-motion frame
  public ptr{drawer_fxaa_params} dp_fxaa = make_ptr{drawer_fxaa_params}();
  public ptr{drawer_ssao_params} dp_ssao = make_ptr{drawer_ssao_params}(
    proj_df);
  public ptr{drawer_blur_params} dp_blur = make_ptr{drawer_blur_params}();
  public ptr{drawer_blur_h_params} dp_blur_h =
    make_ptr{drawer_blur_h_params}();
  public ptr{bool} cond_blur = make_ptr{bool}(false);
  public ptr{bool} cond_noblur = make_ptr{bool}(true);
  public ptr{uint} white_count_ptr = make_ptr{uint}(0u);
  public ptr{glm::uvec2} pviewport_main = make_ptr{glm::uvec2}();
  public ptr{glm::uvec2} pviewport_disp = make_ptr{glm::uvec2}();
  public ptr{glm::uvec2} pviewport_sm = make_ptr{glm::uvec2}();
  public input_control_target player;
  public joystick_state player_joystick;
  public input_control ictl = input_control(io::system);
  public int scene_next;
  public float light_on = 0.0f;
  public glm::vec2 light = glm::make_vec2(0.1f, 0.2f);
  public float exposure = 1.414f;
  public int option_value = 0;
  public int option_value2 = -1;
  public string_map app_commands;
  public string app_status_message;
  // public varray{bool} prev_joy_buttons;
  public option{ptr{edit_control_i}} edit_mode;
  public bool raycast_cull_front = false;
  public int raycast_layer = 0;
  public bool enable_dbgui = false;
  public textures_ptr const txs = make_textures_ptr();
  public tptr{tiled_voxel_texture} const tvt
    = make_tptr{tiled_voxel_texture}();
  public tptr{texture_updates} const tup = make_tptr{texture_updates}();
  public tptr{texture_updates} const tup_swap = make_tptr{texture_updates}();
  public pgl3d::engine::util::rand_generator rand_gen
    = pgl3d::engine::util::rand_generator(1u);
  public uint modmask; // shift, meta
  public glm::mat4 edit_mode_trans = mat4_identity();
  public vertex_attr edit_mode_vattr;
  public ptr{varray{uchar}} capt_data = make_ptr{varray{uchar}}();
  public ftd3_aximaster axim;
  public option{ptr{motion_controller_serial}} mctrl;
  public float virt_scale = 1.0;
  public ptr{atlas} const atl = make_ptr{atlas}();
  init();
  private function void init() {
    string s;
    if (sdl_load_file("/build/camera_state.raw", s)) {
      camera_state st = from_string{camera_state}(s);
      player = st.player;
      light = st.light;
      debug_log("camera_state loaded");
    } else {
      debug_log("camera_state init");
      // player.position = glm::make_vec3(0.0, 0.0, -40.0);
      // player.angle = glm::make_quat_wxyz(0.70711, 0.70711, 0.0, 0.0);
      player.position = glm::make_vec3(0.0, 0.0, 40.0);
      player.angle = glm::make_quat_wxyz(1.0, 0.0, 0.0, 0.0);
    }
    if (axim.is_valid()) {
      debug_log("d3axim is available");
    } else {
      debug_log("d3axim is not available");
    }
  }
}

