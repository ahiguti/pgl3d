public namespace app::app_raycast_object;
public import core::common -;
public import core::exception -;
public import core::numeric::fpmath -;
public import core::text::positional -;
public import core::io::time -;
public import core::fundamental::mainloop -;
public import core::io::environ;
public import pgl3d::exports pgl;
public import pgl3d::ext::debug_helper pgl;
public import core::meta m;
public import glm;
public import app::app_data -;
public import app::texture::triangles_texture -;

private metafunction debug_instance no_operation;

public pure multithreaded struct raycast_object()
{
  public pgl::joint_id_type joint_id;
  public float radius = 1.0f; // 物体の外接球の半径
  public glm::mat4 model_matrix = pgl::mat4_identity();
  public glm::vec3 relative_pos; // カメラからみたオブジェクト中心の座標
  public bool near_flag;
}

public pure multithreaded struct raycast_drawers_info()
{
  public varray{pgl::vbid_t} subdrawer_vbids;
  public varray{int} subdrawer_vbid_to_layer;
  public tree_map{string, pgl::joint_id_type} name_to_joint_id;
  public tree_map{pgl::vsid_t, float} vs_radius;
  public function int get_subdrawer_layer(pgl::vbid_t vbid) const {
    const i = static_cast{size_t}(vbid);
    if (i >= subdrawer_vbid_to_layer.size()) {
      return -1;
    }
    return subdrawer_vbid_to_layer[i];
  }
}

public pure multithreaded struct raycast_objects()
{
  // raycastシェーダのために必要なフレーム毎の処理をするための構造体。
  // オブジェクトを近いものから順に描画するために、近い順にソートする。
  // また、カメラに映らないオブジェクトは描画しない。
  public float haov_tan = 0.0f; // カメラの半画角のtangent
  public glm::vec2 dv_xz;
  public glm::vec2 du_xz;
  public varray{raycast_object} objects;
    // raycastシェーダで描画するオブジェクト
  public tree_multimap{float, uint} nearest_objects;
    // 先に描画するオブジェクトの、距離とobjects中オフセット
  public function void set_perspective(pgl::perspective const& pers)
  {
    const w = pers.width;
    const h = pers.height;
    haov_tan = sqrt(w * w + h * h) / fabs(pers.near);
      // 半画角のtangent
    dv_xz = glm::make_vec2(haov_tan, 1.0f).normalize();
      // 円錐がy=0に接する半直線(x,zともに正のがわ)の単位ベクトル
    du_xz = glm::make_vec2(dv_xz.y, -dv_xz.x);
      // dvから時計回りに90度。右下方向。
  }
  public function void clear_objects()
    // 描画対象オブジェクトをクリアする。フレーム描画の前に呼ばれる。
  {
    objects.clear();
    nearest_objects.clear();
  }
  public function bool push_object(raycast_drawers_info const& rdi,
    pgl::projection_info const& cam, pgl::scene_node const& sn)
    // この関数は描画対象オブジェクトをobjestsフィールドに積む。カメラから
    // 近いオブジェクトはnearest_objestsに登録される。
  {
    debug_instance("raycast_objects: push_object", sn.joint_id);
    raycast_object obj;
    obj.joint_id = sn.joint_id;
    if (const& rad: rdi.vs_radius[sn.joint_id.vsid]) {
      obj.radius = rad;
    } else {
      debug_log("warning: raycast_objects: push_object: unknown join_id",
        sn.joint_id);
    }
    const& trns = sn.trans.value;
    obj.model_matrix = trns;
    if (obj.radius < 10.0f) {
      // 小さいオブジェクトはnearestには入れない
      objects.push_back(obj);
      return true;
    }
    const& s = trns.to_cslice();
    // debug_log("trans", s);
    const pos = glm::make_vec4(s[12], s[13], s[14], 1.0f);
    const relpos = cam.view * pos;
    obj.relative_pos = glm::make_vec3(relpos.x, relpos.y, -relpos.z);
    // 視錐台に接するかどうかを大雑把に判定する。視錘台に外接する円錐と
    // 物体に外接する球が接するのであれば視錘台と物体が接する可能性がある。
    // 相対位置relposをxy平面上で回転させてy=0, x>=0に下ろした点Bのxz座標を
    // 計算。zを反転させ、手前を負値にする。
    const relpos_xz = glm::make_vec2(relpos.x, relpos.y);
    const posb_xz = glm::make_vec2(glm::length(relpos_xz), -relpos.z);
      // 点Bのxz座標
    // dvは円錐の端(右上向き)の単位ベクトル。duはそれに垂直な右下向きの
    // 単位ベクトル。点Bの座標のそれら方向の成分を計算。
    const b_dv = glm::dot(posb_xz, dv_xz); // 右上
    const b_du = glm::dot(posb_xz, du_xz); // 右下
    // dv方向の半直線と点Bの距離を計算
    float dist_b = 0.0f;
    if (b_dv >= 0.0f) {
      // 右上方向成分が正
      if (b_du >= 0.0f) {
        // 右下成分も正。円錐とBの距離は右下成分の大きさ。
        dist_b = b_du;
      } else {
        // 右下成分が負。Bは円錐の内側なので距離は0。
        dist_b = 0.0f;
      }
    } else {
      // 右下成分が負
      dist_b = glm::length(posb_xz);
    }
    // debug_log("rel", obj.relative_pos, "dist_b", dist_b, "rad",
    //   obj.radius, "posb_xz", posb_xz, "dv_xz", dv_xz, "jid", sn.joint_id);
    if (dist_b > obj.radius) {
      // 物体に外接する球が視野の円錐に接しないので表示不要
      return false;
    }
    // debug_log("show rel", obj.relative_pos, "dist", dist_b, "rad",
    //   obj.radius, sn.joint_id);
    // このオブジェクトは先に描画する可能性がある。objectsに入れ、
    // nearest_objectsに距離とオフセットを登録する。
    uint i = static_cast{uint}(objects.size());
    objects.push_back(obj);
    nearest_objects.insert(posb_xz.y, i);
    return true;
  }
  public function void prepare_instances(pgl::node_common_data mutable& ncd,
    raycast_drawers_info const& rdi,
    cslice{pgl::prepare_instance_data_funcptr} const& ftable,
    pgl::instances_all_format mutable& insts_allfmt)
    // この関数はobjestsフィールドに積まれたオブジェクトをinsts_allfmtへ
    // 積む。nearest_objestsにセットされたものは先に描画するsubdrawer向け
    // に積まれる。
    // ftableはvbidから関数オブジェクトを返すテーブルで、各要素は
    // インスタンスデータをscene_nodeから変換する関数。
    // insts_allfmtはvbidごとのインスタンスデータで、ここにインスタンス
    // データが積まれる。
  {
    pgl::scene_node mutable sn = pgl::scene_node(pgl::joint_id_type(),
      pgl::mat4_identity());
    function void extend_insts_allfmt(pgl::vbid_t vbid, pgl::vsid_t vsid)
    {
      // insts_allfmtの大きさを必要に応じてリサイズする
      if (insts_allfmt.size() <= static_cast{size_t}(vbid)) {
        insts_allfmt.resize(static_cast{size_t}(vbid) + 1,
          pgl::instances_per_format());
      }
      mutable& boi = insts_allfmt[vbid];
      if (boi.size() <= static_cast{size_t}(vsid)) {
        boi.resize(static_cast{size_t}(vsid) + 1, pgl::instance_data());
      }
    }
    // 近くて大きいオブジェクトを、先に描画するsubdrawer向けインスタンス
    // リストに入れる。近くて大きいsubdrawer-1個のオブジェクトはそれぞれ
    // 固有のsubdrawerで順に描画される。残りのオブジェクトは同じsubdrawer
    // でまとめて描画される。
    size_t cur = rdi.subdrawer_vbids.size() - 1;
    for (float z, const& idx: nearest_objects) {
      mutable& obj = objects[idx];
      obj.near_flag = true;
      const pgl::vbid_t vbid = rdi.subdrawer_vbids[cur];
      const pgl::vsid_t vsid = obj.joint_id.vsid;
      sn.joint_id.vbid = vbid;
      sn.joint_id.vsid = vsid;
      sn.trans.value = obj.model_matrix;
      if (vbid != pgl::vbid_invalid() && vsid != pgl::vsid_invalid()) {
        // debug_log("prepare_instance_data_ft_rec near instance vbid=", vbid,
        //   "vsid=", vsid, "cur=", cur, "z=", z);
        extend_insts_allfmt(vbid, vsid);
        mutable& idata = insts_allfmt[vbid][vsid];
        ftable[vbid](sn, ncd, idata);
        debug_instance("inserted idata near vbid,vsid=", vbid, vsid,
          "ibsz=", idata.instance_buffer.size());
      }
      // ssubtype=1は小さいオブジェクト用。
      // ssubtype>1は大きいオブジェクト用で、large_shadow=0のとき影は差さない。
      if (cur > 2) {
        --cur;
      }
    }
    // 小さいオブジェクトはssubtype=1のdrawerで描く。影を差す。
    if (cur > 1) {
      cur = 1;
    }
    for (const i, const& obj: objects) {
      if (obj.near_flag) {
        continue;
      }
      const pgl::vbid_t vbid = rdi.subdrawer_vbids[cur];
      const pgl::vsid_t vsid = obj.joint_id.vsid;
      sn.joint_id.vbid = vbid;
      sn.joint_id.vsid = vsid;
      sn.trans.value = obj.model_matrix;
      if (vbid != pgl::vbid_invalid() && vsid != pgl::vsid_invalid()) {
        // debug_log("prepare_instance_data_ft_rec far instance vbid=", vbid,
        //   "vsid=", vsid, "cur=", cur);
        extend_insts_allfmt(vbid, vsid);
        mutable& idata = insts_allfmt[vbid][vsid];
        ftable[vbid](sn, ncd, idata);
        debug_instance("inserted idata small", vbid, vsid,
          idata.instance_buffer.size());
      }
    }
  }
}

