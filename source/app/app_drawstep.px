public namespace app::app_drawstep;
public import core::common -;
public import core::exception -;
public import core::numeric::fpmath -;
public import core::text::positional -;
public import core::io::time -;
public import core::fundamental::mainloop -;
public import core::io::environ;
public import pgl3d::exports pgl;
public import pgl3d::ext::debug_helper pgl;
public import core::meta m;
public import glm;
public import app::app_data -;
public import app::app_scene -;
public import app::texture::triangles_texture -;

private threaded struct background_thread_make_sample_texture(
  string const& datadir, texture_config const& conf, bool save_file,
  tptr{pgl::tiled_voxel_texture} const& vox)
<background_thread>
{
  public function bool finished() {
    return p->finished();
  }
  private ptr{thread{make_sample_raycasting_texture_data}} const p
    = make_ptr{thread{make_sample_raycasting_texture_data}}(datadir, conf,
      save_file, vox);
}

public function varray{pgl::drawer_cond} init_drawsteps(
  app_data mutable& app, pgl::shader_config const& sconf,
  pgl::drawer_shared const& ds)
{
  const vpdisp = *app.pviewport_disp;
  const vpmain = *app.pviewport_main;
  debug_log("init_drawsteps", vpdisp, vpmain);
  app.raycast_cull_front = sconf.conf.get("raycast_cull_front", 0, 0, 1) != 0;
  app.raycast_layer = sconf.conf.get("raycast_layer", 15, 1, 63);
    // 3以上のとき大きなオブジェクトを近い順にソートして描画する
    // 2のときソートしないが小さなオブジェクトが影を差す
    // 1のときソートせず小さなオブジェクトも影を差さない
  app.enable_dbgui = sconf.conf.get("enable_dbgui", 0, 0, 1) != 0;
  downcast_mutable{app_scene_shared}(*app.scene_shared).raycast_layer
    = app.raycast_layer;

  const p = load_triangles_texture_data(sconf.conf, app.datadir,
    app.txs, app.tiledvox);
  app.tex_conf = p.first;
  if (!p.second) {
    // 非同期生成
    app.make_texture_async_vox.some = make_tptr(pgl::tiled_voxel_texture());
    app.make_texture_async.some =
      make_ptr{background_thread_make_sample_texture}(app.datadir,
        app.tex_conf, true, app.make_texture_async_vox.some);
  }
  *ds.textures = *app.txs;
  *ds.tiledvox = *app.tiledvox;

  // レンダリングパスを組み立てる
  const ctrue = make_ptr{bool}(true);
  const cblur = app.cond_blur;
  const cnoblur = app.cond_noblur;
  varray{pgl::drawer_cond} dr_r;
  varray{pgl::drawer_cond} dr_solid;
  varray{varray{pgl::drawer_cond}} dr_shadow;
  varray{pgl::drawer_cond} dr_zpre;
  const shadowmap_name = "sm";
  {
    const num_shadowmaps = sconf.num_shadowmaps;
    pgl::make_drawstep_triangles_parallax(ctrue, sconf, app.datadir, ds,
      app.proj_df, shadowmap_name, num_shadowmaps, app.atl, app.raycast_layer,
      dr_solid, dr_shadow, dr_zpre);
    pgl::make_drawstep_triangles_raycast(ctrue, sconf, app.datadir, ds,
      app.proj_df, shadowmap_name, num_shadowmaps, app.atl, app.raycast_layer,
      dr_solid, dr_shadow, dr_zpre);
    for (int i: 0 .. num_shadowmaps) {
      dr_r.push_back(pgl::make_drawstep_setfb(ctrue, sconf, ds,
        app.pviewport_sm, app.pviewport_sm, shadowmap_name + to_string(i),
        true, make_varray{string}(),
        "GL_DEPTH_COMPONENT", false));
        // set shadowmap framebuffer i
      dr_r.append(dr_shadow[static_cast{size_t}(i)]);
    }
  }
  dr_r.push_back(pgl::make_drawstep_setfb(ctrue, sconf, ds, app.pviewport_main,
    app.pviewport_main,
    "col1", true, make_varray{string}("GL_RGBA"), "GL_DEPTH_COMPONENT",
    false));
    // set color+depth framebuffer
  dr_r.push_back(pgl::make_drawstep_chgmode(ctrue, sconf, ds, "zprepass"));
  dr_r.append(dr_zpre); // draw solid z-prepass
  dr_r.push_back(pgl::make_drawstep_chgmode(ctrue, sconf, ds, "solid"));
  dr_r.append(dr_solid); // draw solid color
  dr_r.push_back(pgl::make_drawstep_lineparticle(ctrue, sconf, ds,
    app.proj_df));
    // draw solid
  dr_r.push_back(pgl::make_drawstep_skybox(ctrue, sconf, ds, app.proj_df));
    // draw solid
  dr_r.push_back(pgl::make_drawstep_chgmode(ctrue, sconf, ds, "blend"));
  dr_r.push_back(pgl::make_drawstep_particle(ctrue, sconf, ds,
    app.pviewport_main));
  dr_r.push_back(pgl::make_drawstep_particle_bb(ctrue, sconf, ds,
    app.proj_df));
  dr_r.push_back(pgl::make_drawstep_setfb(ctrue, sconf, ds, app.pviewport_main,
    app.pviewport_main,
    "col0", true, make_varray{string}("GL_RGBA"), "GL_DEPTH_COMPONENT",
    false));
    // set color+depth framebuffer
  dr_r.push_back(pgl::make_drawstep_ssao(ctrue, sconf, ds, app.dp_ssao,
    "col1"));
    // col1からcol0へssaoフィルタ実行
  dr_r.push_back(pgl::make_drawstep_setfb(ctrue, sconf, ds, app.pviewport_main,
    app.pviewport_main,
    "col1", false, make_varray{string}("GL_RGBA"), "GL_DEPTH_COMPONENT",
    false));
    // col1再利用
  dr_r.push_back(pgl::make_drawstep_fxaa(ctrue, sconf, ds, app.dp_fxaa,
    "col0"));
    // col0からcol1へfxaaフィルタ実行
  if (sconf.conf.get("glsl_comp_test", 0, 0, 1) != 0) {
    // compute shaderのテスト: col1の色を変化させる
    pgl::glslcomp_image cim;
    cim.fbname = "col1";
    cim.access = pgl::GL_READ_WRITE;
    cim.format = pgl::GL_RGBA8;
    dr_r.push_back(pgl::make_drawstep_glslcomp(ctrue, sconf, "comptest.csh",
      app.pviewport_main3, ds, make_farray{pgl::glslcomp_image}(cim), true));
  }
  if (sconf.conf.get("capture_filter", 0, 0, 1) != 0) {
    // TODO: blur_h反映
    debug_log("enable capture filter");
    dr_r.push_back(pgl::make_drawstep_setfb(ctrue, sconf, ds,
      app.pviewport_main, app.pviewport_main,
      "col0", false, make_varray{string}("GL_RGBA"), "GL_DEPTH_COMPONENT",
      false));
      // col0再利用
    dr_r.push_back(pgl::make_drawstep_blur(ctrue, sconf, ds, app.dp_blur,
      "col1"));
      // col1からcol0へblurフィルタ実行
    dr_r.push_back(pgl::make_drawstep_chgmode(ctrue, sconf, ds, "blend"));
    dr_r.push_back(pgl::make_drawstep_rect2d(ctrue, sconf, ds));
    dr_r.push_back(pgl::make_drawstep_font2(ctrue, sconf, ds,
      app.pviewport_main));
    dr_r.push_back(pgl::make_drawstep_setfb(ctrue, sconf, ds,
      app.pviewport_main, app.pviewport_main,
      "col1", false, make_varray{string}("GL_RGBA"), "GL_DEPTH_COMPONENT",
      false));
      // col1再利用
    dr_r.push_back(pgl::make_drawstep_chgmode(ctrue, sconf, ds, "solid"));
    dr_r.push_back(pgl::make_drawstep_capture(ctrue, sconf, ds,
      app.pviewport_main, app.capt_data, "col0"));
      // col0からcol1へcaptureフィルタ実行
    dr_r.push_back(pgl::make_drawstep_setfb(ctrue, sconf, ds,
      app.pviewport_disp, app.pviewport_disp,
      "", false, make_varray{string}(), "", false));
      // set toplevel framebuffer
    dr_r.push_back(pgl::make_drawstep_passthrough(ctrue, sconf, ds, "col0"));
      // col0からtoplevelへpassthroughフィルタ実行
  } else {
    debug_log("blur_h draw");
    {
      dr_r.push_back(pgl::make_drawstep_setfb(cblur, sconf, ds,
        app.pviewport_main, app.pviewport_main,
        "col2", true, make_varray{string}("GL_RGBA"), "", true));
        // (blur_h有りのとき) col2, bilinear
      dr_r.push_back(pgl::make_drawstep_blur(cblur, sconf, ds, app.dp_blur,
        "col1"));
        // (blur_h有りのとき) col1からcol2へblurフィルタ実行
      dr_r.push_back(pgl::make_drawstep_setfb(cblur, sconf, ds,
        app.pviewport_main, app.pviewport_main,
        "col3", true, make_varray{string}("GL_RGBA"), "",
        true /* app.virt_scale != 1.0 */));
        // (blur_h有りのとき) col3, virt_scale==1.0ならnearest
        //   性能変わらないように見えるので常にtrueにしておく
      dr_r.push_back(pgl::make_drawstep_blur_h(cblur, sconf, ds, app.dp_blur_h,
        app.white_count_ptr, false, "col2", ""));
        // (blur_h有りのとき) blur_h (direction_h) col2 -> col3
      dr_r.push_back(pgl::make_drawstep_setfb(cblur, sconf, ds,
        app.pviewport_disp, app.pviewport_disp,
        "", true, make_varray{string}(), "", false));
        // (blur_h有りのとき) set toplevel framebuffer
      dr_r.push_back(pgl::make_drawstep_blur_h(cblur, sconf, ds, app.dp_blur_h,
        app.white_count_ptr, true, "col3", "col2"));
        // (blur_h有りのとき) blur_h (direction_v) col3, col2 -> toplevel
    }
    {
      dr_r.push_back(pgl::make_drawstep_setfb(cnoblur, sconf, ds,
        app.pviewport_disp, app.pviewport_disp,
        "", true, make_varray{string}(), "", false));
        // (blur_h無しのとき) set toplevel framebuffer
      dr_r.push_back(pgl::make_drawstep_blur(cnoblur, sconf, ds, app.dp_blur,
        "col1"));
        // (blur_h無しのとき) col1からcol0へblurフィルタ実行
    }
    dr_r.push_back(pgl::make_drawstep_chgmode(ctrue, sconf, ds, "blend"));
      // blendに設定
    if (app.enable_dbgui) {
      /*
      dr_r.push_back(make_drawstep_dbgui(ctrue, sconf, ds, shadowmap_name));
        // dbguiでshadowmapを可視化
      */
      dr_r.push_back(pgl::make_drawstep_dbgui2(ctrue, sconf, ds,
        shadowmap_name));
        // FIXME: まだ動かない
    }
    dr_r.push_back(pgl::make_drawstep_rect2d(ctrue, sconf, ds));
      // rect2dをtoplevelにblendで書き込み
      // TODO: 表示されていない？
    dr_r.push_back(pgl::make_drawstep_font2(ctrue, sconf, ds,
      app.pviewport_disp));
      // font2をtoplevelにblendで書き込み
  }
  for (const i, const& dr_e: dr_r) {
    if (const em: dr_e.step->get_edit_mode().some) {
      app.edit_mode.some = em;
    }
  }

  return dr_r;
}

