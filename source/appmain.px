public namespace appmain;
public import common -;
public import exception -;
public import numeric::fpmath -;
public import pointer::raw -;
public import text::positional -;
public import io::time -;
public import fundamental::mainloop -;
public import io::environ;
public import pgl3d::ext::debug_helper -;
public import pgl3d::exports -;
public import meta m;
public import glm;
public import app::app_scene -;
public import app::app_data -;
public import app::app_drawstep -;
public import app::app_event -;

load_filesystem_async{app_main}("/persist"); // emscripten

public function void app_main()
{
  set_debug_log_file("var/app.log");
  set_debug_timestamp(true);
  // debug_helper::dump_modules();
  // debug_helper::dump_backtrace();
  string config_fn = "res/pgl3d.cnf";
  for (size_t i: 1 .. io::environ::argv.size()) {
    const s = io::environ::argv[i];
    if (find_mapped(s, static_cast{size_t}(0u), '=') >= s.size()) {
      config_fn = s;
    }
  }
  debug_log("config_fn", config_fn);
  pgl3d::engine::mainloop::mainloop{app_application}(config_fn);
}

public struct app_application()
  <pgl3d_application>
{	
  public app_data app = app_data(make_tptr{app_scene_shared}(io::system));
  public function varray{drawer_cond} on_init_drawstep(
    shader_config const& conf, drawer_shared const& ds)
  {
    debug_log("init_drawstep");
    mutable datadir = conf.conf.get("datadir", string(), string(), string());
    if (datadir.empty()) {
      datadir = "./datadir";
    }
    app.set_datadir(datadir);
    app.sconf.some = make_ptr{shader_config}(conf);
    app.virt_scale = conf.conf.get("virt_scale", 1.0f, 0.125f, 16.0f);
    const r = init_drawsteps(app, conf, ds);
    app.option_value2 = conf.conf.get("option_value2", -1, -1, 9);
      // edit modeでは0にしないとカーソルが見えないので注意(miplevel)
    debug_log("init_drawstep done");
    const ser_name = conf.conf.get("motion_serial", string(), string(),
      string());
    if (!ser_name.empty()) {
      varray{device_info} devs;
      enumerate_device(devs);
      for (const i, const e: devs) {
        if (e.port_name[0u .. 3u] == "COM") {
          debug_log("device", e);
          if (e.name == ser_name) {
            debug_log("found serial");
            const port_str = e.port_name[3u .. e.port_name.size()];
            const port_num = from_string{uint}(port_str);
            app.mctrl.some = make_ptr{motion_controller_serial}(port_num);
            break;
          }
        }
      }
    }
    return r;
  }
  public function void on_build_vertices(make_vertices_i mutable& mvx)
  {
    debug_log("build_vertices");
    build_vertices(app, mvx);
    debug_log("build_vertices done");
    mutable& ss = downcast_mutable{app_scene_shared}(*app.scene_shared);
    prepare_vbids(ss.rdi, mvx, app.raycast_layer);
    ss.tvt.some = app.tvt;
    ss.tup.some = app.tup;
  }
  public function void on_event(SDL_Event const& ev, app_ctrl_i mutable& actrl,
    float speed)
  {
    handle_event(app, actrl, ev, speed);
  }
  public function void on_joystick_changed(cslice{joystick_info} const& ji)
  {
    app.player_joystick.axes.resize(6, 0);
    app.player_joystick.buttons.resize(15, false);
    app.player_joystick.hats.resize(0, 0);
  }
  public function void on_scankeys(cslice{uchar} const& keys,
    cslice{joystick_state} const& joysticks, float speed)
  {
    app.modmask = 0;
    if (keys[static_cast{uint}(SDL_SCANCODE_LSHIFT)] != 0) {
      app.modmask |= 1;
    }
    if (keys[static_cast{uint}(SDL_SCANCODE_RSHIFT)] != 0) {
      app.modmask |= 2;
    }
    if (keys[static_cast{uint}(SDL_SCANCODE_LCTRL)] != 0) {
      app.modmask |= 4;
    }
    if (keys[static_cast{uint}(SDL_SCANCODE_RCTRL)] != 0) {
      app.modmask |= 8;
    }
    if (keys[static_cast{uint}(SDL_SCANCODE_LALT)] != 0) {
      app.modmask |= 16;
    }
    if (keys[static_cast{uint}(SDL_SCANCODE_RALT)] != 0) {
      app.modmask |= 32;
    }
    handle_keys(app, keys, joysticks, speed);
    // debug_log("joy", joy_axes, "btn", joy_buttons);
  }
  public function tptr{pgl3d_scene_shared} get_scene_shared()
  {
    return app.scene_shared;
  }
  public function void on_frame()
  {
    // debug_log("app on_frame");
    mutable& tup = *app.tup;
    // debug_log("app on_frame 1");
    for (const i, const& e: tup) {
      // debug_log("tup", e.pos, e.value);
      if (case app.edit_mode.some) {
	app.edit_mode.some->modify_tmap(e.pos, e.value);
      }
    }
    // debug_log("app on_frame 2");
    tup.clear();
    // debug_log("app on_frame 3");
    if (case app.edit_mode.some) {
      // const t0 = sdl_get_ticks();
      app.edit_mode.some->on_frame(*app.proj_pm);
      // const t1 = sdl_get_ticks();
      // if (t0 != t1) {
      //   debug_log("(no)edit_mode on frame", t1 - t0);
      // }
    }
    // debug_log("app on_frame done");
  }
  public function void on_motion_pre()
  {
    // motion threadからmain threadへ情報を移動する際に呼ばれる。
    // ssはロックされた状態で呼ばれるのでアクセスしても待たされない。
    // projection_infoをproj_pmからmotion threadへコピーする
    mutable& pj = downcast_mutable{app_scene_shared}(*app.scene_shared)
      .pj_drawing_frame;
    pj = *app.proj_pm;
  }
  public function void on_motion_post()
  {
    // motion threadからmain threadへ情報を移動する際に呼ばれる。
    // ssはロックされた状態で呼ばれるのでアクセスしても待たされない。
    // proj_dfをmotion threadのpj_drawing_frameからコピーする
    const& pj = downcast_const{app_scene_shared}(*app.scene_shared)
      .pj_drawing_frame;
    *app.proj_df = pj;
    app.dp_fxaa->option_value = 0.0;
      // static_cast{float}(static_cast{int}(pj.option_value) & 1);
    app.dp_blur->option_value = 0.0;
      // static_cast{float}( static_cast{int}(pj.option_value) & 1);
    app.dp_blur_h->option_value = 0.0;
    app.dp_ssao->option_value = 1.0; // pj.option_value;
    *app.cond_blur = (static_cast{int}(pj.option_value) & 1) == 0;
    *app.cond_noblur = !*app.cond_blur;
    // debug_log("blur", *app.cond_blur);
  }
  private uint axi_addr;
  public function void on_draw_finished()
  {
    if (!app.capt_data->empty()) {
      if (app.axim.is_valid()) {
        {
          mutable& d = *app.capt_data;
          for (uint y: 719 .. 720) {
            for (uint x: 0 .. 1280) {
              const addr = y * 1280 + x;
              d[addr * 2] = 255;
              d[addr * 2 + 1] = 255;
            }
          }
        }
        // debug_log("axi read pre");
        varray{uchar} buf;
        app.axim.axi_read(0x44a00000, 4u, buf);
          // vsyncを待ちバッファのアドレスを得る
        // debug_log("axi read post", buf.size());
        if (buf.size() != 4) {
          axi_addr = 0x18000000;
        } else {
          uint addr =
            (buf[3] << 24u) | (buf[2] << 16u) | (buf[1] << 8u) | buf[0];
          axi_addr = addr;
        }
        // debug_log("addr", axi_addr);
        if (axi_addr != 0) {
          app.axim.axi_write(axi_addr, *app.capt_data);
        }
      }
    }
  }
}

