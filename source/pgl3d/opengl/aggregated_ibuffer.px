private threaded namespace pgl3d::opengl::aggregated_ibuffer "export-unsafe";
public import core::common -;
public import core::pointer::raw -;
public import core::pointer::raw_unsafe -;
public import core::numeric::fpmath -;
public import glm;
public import opengl::compat -;
public import core::io::time -;
public import core::meta m;
public import core::exception -;
public import pgl3d::opengl::glshader -;
public import pgl3d::opengl::glresource -;
public import pgl3d::opengl::glvertex -;
public import pgl3d::opengl::glbuffer -;
public import pgl3d::engine::scene_node -;
public import pgl3d::engine::pglbase -;

private metafunction debug_vsid no_operation;

public threaded struct aggregated_ibuffer(bool enable_instanced0,
  bool enable_uniform_instancing0)
{
  // 全インスタンスデータを一つのバイト列にまとめ、一度にGPUへ転送する機能
  // を持つ。
  public bool const enable_instanced = enable_instanced0;
  public bool const enable_uniform_instancing = enable_uniform_instancing0;
  private varray{ptr{async_buffer}} buffers;
  private size_t buffer_current; // 現在書き込み中のVBO。0以上3未満。
  public size_t glbuffer_size_max; // 参考のために計測
  public size_t instance_buffer_size_max; // 参考のために計測
  public function ptr{async_buffer} get_current() const {
    return buffers[buffer_current];
  }
  public function void switch_buffer() {
    ++buffer_current;
    if (buffer_current >= buffers.size()) {
      buffer_current = 0;
    }
  }
  init();
  private function void init() {
    metafunction num_async_buffers 1;
    for (const i: 0 .. num_async_buffers) {
      buffers.push_back(make_ptr{async_buffer}());
    }
  }
}

public function void
aggregated_ibuffer_frame_begin(aggregated_ibuffer mutable& aibuf,
  instances_all_format mutable& insts_allfmt)
{
  // 1フレーム描画の前に呼ばれる。全インスタンスデータを一つのVBOに転送する。
  if (aibuf.enable_instanced && !aibuf.enable_uniform_instancing) {
    //debug_log("ibuffer_frame_begin begin");
    size_t offset_float = 0;
    // 各fmt,vsidのインスタンスデータが連結されたバッファのどのオフセットに
    // 位置するのかをglbuffer_offset_floatに記録しておく。後でdrawcall発行
    // する際にそのオフセットを指定してdrawする。
    for (const fmt, mutable& instfmt: insts_allfmt) {
      for (const vsid, mutable& inst: instfmt) {
        mutable& arr = inst.instance_buffer;
        inst.glbuffer_offset_float = offset_float;
        offset_float += arr.size();
      }
    }
    //debug_log("ibuffer_frame_begin begin1");
    if (offset_float != 0) {
      //debug_log("ibuffer_frame_begin begin2");
      mutable& cur_buf = *aibuf.get_current();
      const size_t total_size_float = offset_float;
      offset_float = 0;
      //debug_log("ibuffer_frame_begin begin3");
      cur_buf.client_wait_sync(1000000000 * 10);
      //debug_log("ibuffer_frame_begin begin4");
      cur_buf.map_buffer(total_size_float * 4U);
      //debug_log("ibuffer_frame_begin begin5");
      const rawptr{float} mapped_ptr = cur_buf.mapped_ptr;
      //debug_log("mapped_ptr", mapped_ptr, total_size_float * 4U);
      // 全インスタンスデータ(insts_allfmt)を連結して一つのVBOにコピーする。
      for (const fmt, mutable& instfmt: insts_allfmt) {
        for (const vsid, mutable& inst: instfmt) {
          const& arr = inst.instance_buffer;
          const size_t sz = arr.size();
          mutable sli = rawptr_to_slice{float}(mapped_ptr + offset_float, sz);
          for (const j: 0 .. sz) {
            sli[j] = arr[j];
          }
          offset_float += sz;
        }
      }
      //debug_log("ibuffer_frame_begin begin6");
      cur_buf.unmap_buffer();
      if (aibuf.glbuffer_size_max < offset_float * 4) {
        aibuf.glbuffer_size_max = offset_float * 4;
        debug_log("glbuffer_size (bytes)", aibuf.glbuffer_size_max);
      }
      if (aibuf.instance_buffer_size_max < cur_buf.size_bytes) {
        aibuf.instance_buffer_size_max = cur_buf.size_bytes;
        debug_log("instance_buffer_size (bytes)",
          aibuf.instance_buffer_size_max);
      }
    }
    //debug_log("ibuffer_frame_begin end");
  }
}

public function void
aggregated_ibuffer_frame_end(aggregated_ibuffer mutable& aibuf)
{
  // 1フレーム描画が終わったら呼ばれる。
  if (aibuf.enable_instanced && !aibuf.enable_uniform_instancing) {
    aibuf.get_current()->fence_sync();
    aibuf.switch_buffer();
  }
}

public function size_t
aggregated_ibuffer_draw_all_vs_all_inst(aggregated_ibuffer const& aibuf,
  glshader_i mutable& sdr, vertex_buffer const& vb,
  instances_per_format const& instfmt)
{
  size_t r = 0;
  vb.draw_pre(sdr);
  if (aibuf.enable_instanced && !aibuf.enable_uniform_instancing) {
    sdr.enable_instance_attrib_array(true);
    glBindBuffer(GL_ARRAY_BUFFER, aibuf.get_current()->vbo.get());
  }
  // 各オブジェクト頂点データの種類(vertex set)についてループ。
  // 無駄に全vsid値にわたるループを回さないようにするため、vb.vsidsには
  // vertex_setが登録されているようなvsid値のみが入っている。
  debug_vsid("all_vs_all_inst vsids.size=", vb.vsids.size());
  for (const _, const vsid: vb.vsids) {
    if (instfmt.size() <= static_cast{size_t}(vsid)) {
      break;
    }
    const& instance = instfmt[vsid];
    const& arr = instance.instance_buffer;
    if (arr.empty()) {
      // このオブジェクト種類については描画するインスタンスは無い
      continue;
    }
    if (aibuf.enable_instanced && !aibuf.enable_uniform_instancing) {
      if (m::ne{is_gl3_or_gles3, 0}) {
        sdr.instance_attrib_pointer(instance.glbuffer_offset_float);
        const num = arr.size() / sdr.instance_attrib_num_float();
        vb.draw_elems_instanced(vsid, num);
        r += num;
      }
    } else if (aibuf.enable_uniform_instancing) {
      size_t const iattr_num_float = sdr.instance_attrib_num_float();
      size_t j;
      size_t const jmax = arr.size() / iattr_num_float;
      for (j = 0; j < jmax; j += uniform_instancing_mul) {
        size_t k = min((jmax - j), uniform_instancing_mul);
        sdr.instance_attrib_set_uniform(arr, j * iattr_num_float, k);
        vb.draw_elems_instanced(vsid, k);
      }
      r += jmax;
    } else { /* no instancing (copying is not supported anymore) */
      size_t const iattr_num_float = sdr.instance_attrib_num_float();
      size_t j;
      if (const bep: vb.get_vs_by_id(vsid).some) {
        const& be = *bep;
        size_t const jmax = arr.size() / iattr_num_float;
        size_t inst_mul = 1; // this value was > 1 when copying is supported
        for (j = 0; j < jmax; j += inst_mul) {
          size_t k = min((jmax - j), inst_mul);
          sdr.instance_attrib_set_uniform(arr, j * iattr_num_float, k);
          vb.draw_elems(vsid, k);
          // debug_log("TextureBarrier");
          // glTextureBarrier(); // FIXME
        }
        r += jmax;
      } else {
        throw runtime_error_template{"aggregated_ibuffer_draw_vs_draw_info"}(
          "");
      }
    }
  }
  if (aibuf.enable_instanced && !aibuf.enable_uniform_instancing) {
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    sdr.enable_instance_attrib_array(false);
  }
  vb.draw_post(sdr);
  return r;
}

