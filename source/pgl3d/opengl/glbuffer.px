private threaded namespace pgl3d::opengl::glbuffer "export-unsafe";
public import core::common -;
public import core::pointer::raw -;
public import core::pointer::raw_unsafe -;
public import core::numeric::fpmath -;
public import glm;
public import opengl::compat -;
public import core::io::time -;
public import core::meta m;
public import core::exception -;
public import pgl3d::opengl::glshader -;
public import pgl3d::opengl::glresource -;
public import pgl3d::opengl::glvertex -;
public import pgl3d::engine::scene_node -;
public import pgl3d::sdl::sdlutil -;

private metafunction use_draw_range 0;
private metafunction use_map_unsynchronized 0;
  // どちらでも性能かわらない

public pure struct vertex_set(size_t num_float_per_vertex0)
{
  public vsid_t vsid;
  public string vs_name;
  public ptr{vertices} vtxs = make_ptr{vertices}(num_float_per_vertex0);
  public size_t vertex_values_offset;
    // 頂点データを一つのバッファ(vbo)にまとめたときの、この頂点セットがどの
    // オフセットからの位置に存在するかを保持する。
  public size_t elements_offset;
    // 要素データを一つのバッファ(vbo)にまとめたときの、この頂点セットがどの
    // オフセットからの位置に存在するかを保持する。
}

public metafunction glsync_compat
  m::cond{m::and{is_gl3_or_gles3, use_map_unsynchronized}, GLsync, unit};

public threaded struct async_buffer() {
  public auto_buffer vbo; /* noncopyable */
  public rawptr{float} mapped_ptr;
  public glsync_compat fence;
  public size_t size_bytes;
  init();
  public function void map_buffer(size_t sz_bytes) {
    if (m::is_true{is_gl3_or_gles3}) {
      glBindBuffer(GL_ARRAY_BUFFER, vbo.get());
      // sdl_log("glbindbuffer", vbo.get());
      if (rawptr_to_size_t(mapped_ptr) != 0U) {
        // sdl_log("glunmapbuffer");
        glUnmapBuffer(GL_ARRAY_BUFFER);
        mapped_ptr = size_t_to_rawptr{float}(0U);
      }
      if (sz_bytes > size_bytes) {
        sdl_log("glbufferdata resize:", size_bytes, sz_bytes);
        while (sz_bytes > size_bytes) {
          if (size_bytes < 10) {
            size_bytes = sz_bytes;
          } else {
            size_bytes = size_bytes * 3 / 2;
          }
        }
        glBufferData(GL_ARRAY_BUFFER, static_cast{GLsizeiptr}(size_bytes),
          size_t_to_crawptr{void}(0), GL_STREAM_DRAW);
      }
      mutable mask = static_cast{GLbitfield}(GL_MAP_WRITE_BIT);
      if (m::is_true{use_map_unsynchronized}) {
        // debug_log("map_unsynchronized");
        mask |= static_cast{GLbitfield}(GL_MAP_UNSYNCHRONIZED_BIT);
      }
      // sdl_log("mapbufferrange", size_bytes, mask);
      rawptr{void} p = glMapBufferRange(GL_ARRAY_BUFFER,
        static_cast{GLintptr}(0), static_cast{GLsizeiptr}(size_bytes),
        mask);
      // sdl_log("mapbufferrange", "ptr", rawptr_to_size_t(p));
      mapped_ptr = size_t_to_rawptr{float}(rawptr_to_size_t(p));
      if (rawptr_to_size_t(p) == 0) {
        sdl_log("mapbufferrange returns null");
        gl_check_error("mapbufferrange");
        // sdl_log("mapbufferrange err:", static_cast{int}(glGetError()));
      }
      glBindBuffer(GL_ARRAY_BUFFER, 0);
    }
  }
  public function void unmap_buffer() {
    if (m::is_true{is_gl3_or_gles3}) {
      if (rawptr_to_size_t(mapped_ptr) != 0U) {
        //sdl_log("glunmapbuffer", vbo.get());
        glBindBuffer(GL_ARRAY_BUFFER, vbo.get());
        glUnmapBuffer(GL_ARRAY_BUFFER);
        glBindBuffer(GL_ARRAY_BUFFER, 0);
        mapped_ptr = size_t_to_rawptr{float}(0U);
      }
    }
  }
  public function GLenum client_wait_sync(long timeout) {
    if (m::and{is_gl3_or_gles3, use_map_unsynchronized}) {
      // debug_log("client_wait_sync");
      const r = glClientWaitSync(fence, 0, static_cast{GLint64}(timeout));
      delete_sync();
      return r;
    } else {
      return GLenum();
    }
  }
  private function void init() {
    vbo.generate();
    fence_sync();
  }
  public function void fence_sync() {
    //sdl_log("fence_sync", vbo.get());
    delete_sync();
    if (m::and{is_gl3_or_gles3, use_map_unsynchronized}) {
      // debug_log("fence_sync");
      fence = glFenceSync(GL_SYNC_GPU_COMMANDS_COMPLETE, 0);
      if (fence == GLsync()) {
        throw runtime_error_template{"vertex_buffer.fence_sync"}("");
      }
    }
  }
  private function void delete_sync() {
    if (m::and{is_gl3_or_gles3, use_map_unsynchronized}) {
      // debug_log("delete_sync");
      // if (glIsSync(fence) != 0) {
      if (fence != GLsync()) {
        glDeleteSync(fence);
        fence = GLsync();
      }
    }
  }
  private function ~ {
    unmap_buffer();
    delete_sync();
  }
}

public threaded struct
vertex_buffer(size_t num_float_per_vertex0, bool draw_mode_points0,
  vbid_t instances_vbid0, bool is_sub_drawer0)
{
  public bool const draw_mode_points = draw_mode_points0;
  public vbid_t const instances_vbid = instances_vbid0;
  public bool const is_sub_drawer = is_sub_drawer0;
  public size_t const num_float_per_vertex = num_float_per_vertex0;
  public auto_buffer vbo_values;
  public auto_buffer vbo_elems;
  public size_t num_vertex_values;
  public size_t num_elements;
  public varray{option{ptr{vertex_set}}} vsid_to_vs;
    // vsidからvertex_setを返す
  public tree_map{string, vsid_t} vs_names;
    // vertex_setが登録されている名前とvsid
  public varray{vsid_t} vsids;
    // vertex_setが登録されているvsidの値
  public function ptr{vertex_set} make_vs(vsid_t vsid,
    cstrref const& shape_name)
  {
    size_t mutable vsid_sz = static_cast{size_t}(vsid);
    if (vsid_sz >= vsid_to_vs.size()) {
      vsid_to_vs.resize(vsid_sz + 1, option{ptr{vertex_set}}());
    }
    const p = make_ptr{vertex_set}(num_float_per_vertex);
    p->vsid = vsid;
    p->vs_name = shape_name;
    vsid_to_vs[vsid_sz].some = p;
    vs_names[shape_name] = vsid;
    vsids.push_back(vsid);
    return p;
  }
  public function option{cptr{vertices}} get_vertices(vsid_t vsid) const
  {
    option{cptr{vertices}} r;
    if (const vsp: get_vs_by_id(vsid).some) {
      r.some = vsp->vtxs;
    }
    return r;
  }
  public function option{ptr{vertex_set}} get_vs_by_id(vsid_t vsid) const
  {
    if (vsid < static_cast{vsid_t}(vsid_to_vs.size())) {
      return vsid_to_vs[vsid];
    } else {
      return option{ptr{vertex_set}}();
    }
  }
  public function bool has_vertices(vsid_t vsid) const
  {
    if (const vsp: get_vs_by_id(vsid).some) {
      return true;
    } else {
      return false;
    }
  }
  public function bool exists(string const& name) const
  {
    return vs_names.exists(name);
  }
  public function bool has_name(string const& name) const
  {
    return vs_names.exists(name);
  }
  public function vsid_t get_id_by_name(string const& name) const
  {
    if (const id: vs_names[name]) {
      return id;
    } else {
      throw runtime_error_template{"vertex_buffer.get_id_by_name"}("");
    }
  }
  public function bool create_vbo()
  {
    // 全ての頂点データ(vsid)のvaluesとelementsをopenglの一つのバッファに
    // 格納する。各vertex setはvertex buffer中のオフセット位置を記録
    // しておく。
    if (vbo_values.get() != 0 || vbo_elems.get() != 0) {
      return false;
    }
    for (const i, const& be: vsid_to_vs) {
      if (const vsp: be.some) {
        vsp->vtxs->prepare();
      }
    }
    varray{float} vertex_values;
    varray{uint} elements;
    size_t num_v = 0;
    size_t num_e = 0;
    for (const i, const& be: vsid_to_vs) {
      if (const vsp: be.some) {
        num_v += vsp->vtxs->vertex_values.size();
        num_e += vsp->vtxs->elements.size();
      }
    }
    vertex_values.resize(num_v, 0.0f);
    elements.resize(num_e, uint());
    num_vertex_values = num_v;
    num_elements = num_e;
    num_v = 0;
    num_e = 0;
    for (const i, mutable& be: vsid_to_vs) {
      if (const vsp: be.some) {
        for (const j, const& v: vsp->vtxs->vertex_values) {
          vertex_values[num_v + j] = v;
        }
        for (const j, const& e: vsp->vtxs->elements) {
          if (e == 0xffffffffU) {
            elements[num_e + j] = e;
          } else {
            elements[num_e + j] = e +
              static_cast{uint}(num_v / num_float_per_vertex);
          }
        }
        vsp->vertex_values_offset = num_v;
        vsp->elements_offset = num_e;
        num_v += vsp->vtxs->vertex_values.size();
        num_e += vsp->vtxs->elements.size();
      }
    }
    {
      vbo_values.generate();
      vbo_elems.generate();
      if (vbo_values.get() == 0 || vbo_elems.get() == 0) {
        return false;
      }
      glBindBuffer(GL_ARRAY_BUFFER, vbo_values.get());
      if (vertex_values.size() != 0) {
        glBufferData(GL_ARRAY_BUFFER,
          static_cast{GLsizeiptr}(vertex_values.size()) * 4,
          vertex_values.to_crawptr().to_cvoidptr(), GL_STATIC_DRAW);
      }
      glBindBuffer(GL_ARRAY_BUFFER, 0);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, vbo_elems.get());
      if (elements.size() != 0) {
        glBufferData(GL_ELEMENT_ARRAY_BUFFER,
          static_cast{GLsizeiptr}(elements.size()) * 4,
          elements.to_crawptr().to_cvoidptr(), GL_STATIC_DRAW);
      }
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
    }
    return true;
  }
}

public function void
vertex_buffer_draw_single_instance(vertex_buffer const& bo, vsid_t vsid,
  glshader_i mutable& sdr)
{
  if (vsid == vsid_invalid()) {
    throw runtime_error_template{"vertex_buffer_draw_single_instance"}("");
  }
  vertex_buffer_draw_pre(bo, sdr);
  vertex_buffer_draw_elems(bo, vsid, 1);
  vertex_buffer_draw_post(bo, sdr);
}

public function void
vertex_buffer_draw_pre(vertex_buffer const& bo, glshader_i mutable& sdr)
{
  glBindBuffer(GL_ARRAY_BUFFER, bo.vbo_values.get());
  sdr.enable_vertex_attrib_array(bo.num_float_per_vertex);
  glBindBuffer(GL_ARRAY_BUFFER, 0);
  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, bo.vbo_elems.get());
  if (m::ne{use_primitive_restart, 0}) {
    glEnable(GL_PRIMITIVE_RESTART);
    glPrimitiveRestartIndex(0xffffffff);
  }
}

public function void
vertex_buffer_draw_post(vertex_buffer const& bo, glshader_i mutable& sdr)
{
  sdr.disable_vertex_attrib_array();
  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
  if (m::ne{use_primitive_restart, 0}) {
    glDisable(GL_PRIMITIVE_RESTART);
  }
}

public function void
vertex_buffer_draw_elems(vertex_buffer const& bo, vsid_t vsid,
  size_t num_instance)
{
  if (const bep: bo.get_vs_by_id(vsid).some) {
    const& be = *bep;
    const elem_offset = be.elements_offset;
    const elem_num = be.vtxs->elements_size_per_copy * num_instance;
    GLenum mode = bo.draw_mode_points ? GL_POINTS :
      use_primitive_restart ? GL_TRIANGLE_FAN : GL_TRIANGLES;
    if (m::ne{use_draw_range, 0}) {
      const arr_offset = be.vertex_values_offset / bo.num_float_per_vertex;
      const arr_num = be.vtxs->vertex_values_size_per_copy * num_instance
        / bo.num_float_per_vertex;
      glDrawRangeElements(mode,
        static_cast{GLuint}(arr_offset),
        static_cast{GLuint}(arr_offset + arr_num - 1),
        static_cast{GLsizei}(elem_num), GL_UNSIGNED_INT,
        offset_to_void_cp(elem_offset * 4));
    } else {
      glDrawElements(mode, static_cast{GLsizei}(elem_num), GL_UNSIGNED_INT,
        offset_to_void_cp(elem_offset * 4));
    }
  } else {
    debug_log("WARNING: vs notfound", vsid);
  }
}

public function void
vertex_buffer_draw_elems_instanced(vertex_buffer const& bo, vsid_t vsid,
  size_t num_instance)
{
  if (m::ne{is_gl3_or_gles3, 0}) {
    size_t elem_offset;
    size_t elem_num;
    if (const bep: bo.get_vs_by_id(vsid).some) {
      const& be = *bep;
      elem_offset = be.elements_offset;
      elem_num = be.vtxs->elements_size_per_copy;
    }
    if (elem_num != 0) {
      GLenum mode = bo.draw_mode_points ? GL_POINTS :
        use_primitive_restart ? GL_TRIANGLE_FAN : GL_TRIANGLES;
      glDrawElementsInstanced(mode, static_cast{GLsizei}(elem_num),
        GL_UNSIGNED_INT, offset_to_void_cp(elem_offset * 4),
        static_cast{GLsizei}(num_instance));
    } else {
      throw runtime_error_template{"vertex_buffer_draw_elems_instanced"}(
        "empty");
    }
  } else {
    throw runtime_error_template{"vertex_buffer_draw_elems_instanced"}("");
  }
}

