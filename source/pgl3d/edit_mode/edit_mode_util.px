private threaded namespace pgl3d::edit_mode::edit_mode_util "use-unsafe";
private import common -;
private import meta m;
private import pgl3d::texture::texture -;
private import pgl3d::texture::voxel -;
private import pgl3d::texture::subtexture -;
private import pgl3d::texture::editable_voxel -;
private import pgl3d::edit_mode::tiled_texture_edit_view -;
private import pgl3d::edit_mode::common -;
private import pgl3d::edit_mode::vecutil -;
private import pgl3d::edit_mode::procedural -;

/*
public metafunction absmax_tile_scale_log2 6;
  // max_tile_scale_log2に指定できる値の最大値。シェーダの計算精度の
  // 限界から6程度。6なら64x64x64タイルが最大となる。
*/

private metafunction dbg_conv{f} no_operation;

public valuetype struct tpat_data {
  public uint scale;
  public uvec3 coord;
  public farray{texture_data, 2} data;
}

public valuetype struct pattern_save_data {
  public subtexture copy_data;
  public varray{tpat_data} patterns;
}

/*
public function void
dump_value(tiled_texture_edit_view mutable& ttev, uvec3 const& pos)
{
  const v = ttev.tmap_edit_get(pos, 0, 0);
  if (is_node_reference(v)) {
    const nrp = decode_noderef_param(v);
    debug_log("dump: noderef", nrp);
  }
}
*/

public function uvec3
get_assignable_range(uvec3 const& tpat_size, uint max_tile_scale_log2)
{
  // 標準レイアウトで割り当て可能なタイル番号の範囲を返す。
  // 最大タイルを割り当てたときの番号の範囲を計算すればよい。
  // 番号の範囲の前半1/8は、そのサイズのタイルよりも一つ小さいタイルの
  // 割り当て用に使うので、そこへは割り当てしないようにする。
  const mxtsz = 1u << max_tile_scale_log2; // 最大タイルの大きさ
  const tpsz = tpat_size / mxtsz;
  return tpsz;
}

public function uint
get_num_assignable_tile(uvec3 const& tpat_size, uint max_tile_scale_log2)
{
  // 標準レイアウトで割り当て可能なタイル数を返す。
  // const mxtsz = 1u << max_tile_scale_log2; // 最大タイルの大きさ
  // const tpsz = tpat_size / mxtsz;
  const tpsz = get_assignable_range(tpat_size, max_tile_scale_log2);
  const v = tpsz.x * tpsz.y * tpsz.z;
  return v * 7 / 8; // 前半1/8の領域は一つ小さいタイル用に使うので7/8倍する
}

public function {t} texel_value
find_empty_tpat(t mutable& ttev, uvec3 const& tpat_range,
  uvec3 mutable& find_empty_cur, uint cur_tile_scale_log2,
  uint max_tile_scale_log2, uvec3 blksz)
{
  // tpatから空きパターンを探し、そのnoderef値を返す。find_empty_curは
  // 探す始点のヒント。cur_tile_scale_log2はタイル拡大率。blkszに指定された
  // 大きさの空白パターン連続領域を探す。ttevはtiled_texture_edit_viewか
  // texture_dataのいずれか。tpat_rangeは通常はttev.tpat_sizeに等しいが、
  // 割り当て範囲を制限するときは小さい値が指定されることがある。
  if (cur_tile_scale_log2 > max_tile_scale_log2) {
    throw runtime_error_template{"find_empty_tpat"}("find_empty_tpat");
  }
  const tsz = 1u << cur_tile_scale_log2; // タイルの大きさ
  const mxtsz = 1u << max_tile_scale_log2; // 最大タイルの大きさ
  uvec3 tpsz = tpat_range / mxtsz;
    // tpatはタイル番号の範囲。標準レイアウトで割り当て可能な範囲。
  /*
  if (m::eq{t, tiled_texture_edit_view}) {
    tpsz = ttev.tpat_size / mxtsz;
  } else {
    tpsz = ttev.get_size_uvec3() / mxtsz; // 単なるテクスチャのとき
  }
  */
    // tpszはタイル番号の範囲。ttev.tpat_sizeはタイルテクスチャの大きさ。
    // 最大サイズのタイルを保持できる範囲のタイル番号が、最大サイズ以外の
    // タイルについてもタイル番号の範囲になる。各サイズのタイル番号のうち
    // xyz全てが前半のものについては割り当てを避け、その範囲のテクスチャは
    // そのサイズよりも小さいタイルパターンを格納できるようにする。
  function uvec3 skip_lower_half(uvec3 p) {
    // xyz全てが前半であるような範囲にいればその次の位置へ移動
    if (p.x < tpsz.x / 2 && p.y < tpsz.y / 2 && p.z < tpsz.z / 2) {
      p.x = tpsz.x / 2;
    }
    return p;
  }
  const p0 = skip_lower_half(find_empty_cur);
  mutable p = p0;
  while (true) {
    if (++p.x + blksz.x > tpsz.x) {
      p.x = 0;
      if (++p.y + blksz.y > tpsz.y) {
	p.y = 0;
	if (++p.z + blksz.z > tpsz.z) {
	  p.z = 0;
	}
      }
    }
    p = skip_lower_half(p);
    if (p == p0) {
      // 全位置を探したが見つからなかった
      break;
    }
    /*
    if (!le_all_uvec3(p + blksz, tpsz)) {
      continue;
    }
    */
    function bool is_space_pat(uvec3 p) {
      const pbase = p * tsz;
      bool r = true;
      for (const z: 0 .. tsz) {
	for (const y: 0 .. tsz) {
	  for (const x: 0 .. tsz) {
	    const cp = make_uvec3(pbase.x + x, pbase.y + y, pbase.z + z);
            texel_value cv;
            if (m::eq{t, tiled_texture_edit_view}) {
              cv = ttev.tpat_edit_get(cp, 0, 0u);
            } else {
              cv = ttev.get(cp.x, cp.y, cp.z);
            }
	    r &= is_space_voxel(cv);
	  }
	}
      }
      return r;
    }
    bool is_space = true;
    range_foreach(blksz) void (uint x, uint y, uint z) {
      is_space &= is_space_pat(p + make_uvec3(x, y, z));
    }
    dbg_conv() {
      debug_log("find_empty_tpat", p, is_space);
    }
    if (is_space) {
      // 見つけた
      find_empty_cur = p;
      noderef_param np;
      np.coord = p;
      np.scale = cur_tile_scale_log2 - 1u;
      return encode_noderef_param(np);
    }
  }
  return make_space_voxel();
}

public function string
erase_unused_tpat(tiled_texture_edit_view mutable& ttev)
{
  string msg = "scale:used";
  for (uint sl2: 1u .. ttev.get_max_tile_scale_log2() + 1u) {
    msg = msg + " " + erase_unused_tpat_scale(ttev, sl2);
  }
  return msg;
}

private function string
erase_unused_tpat_scale(tiled_texture_edit_view mutable& ttev,
  uint const scale_log2)
{
  string msg;
  // uint const scale_log2 = 4u;
  uvec3 const tpat_size = ttev.tpat_size;
  uint const tile_size = 1u << scale_log2;
  uvec3 const tile_size3 = make_uvec3(1u, 1u, 1u) * tile_size;
  // uvec3 const coord_range = tpat_size / tile_size;
  const coord_range = get_assignable_range(tpat_size,
    ttev.get_max_tile_scale_log2());
    // 割り当て可能なタイル番号の範囲
  texture_data em;
  texture_data um;
  uvec3 const tsl2 = map{uvec3, integral_log2{uint}}(tpat_size);
  em.set_size_l2(tsl2.x - scale_log2, tsl2.y - scale_log2,
    tsl2.z - scale_log2);
  um.set_size_l2(tsl2.x - scale_log2, tsl2.y - scale_log2,
    tsl2.z - scale_log2);
  // tpatのうち空白パターンに印をつける
  range_foreach(coord_range) void (uint x, uint y, uint z) {
    if (
      x < coord_range.x / 2 &&
      y < coord_range.y / 2 &&
      z < coord_range.z / 2) {
      // 前半1/8の範囲は割り当て対象ではない
      return;
    }
    const c = make_uvec3(x, y, z);
    const pos = c * tile_size;
    farray{texture_data, multiword_num_words} tex;
    for (const i, mutable& texw: tex) {
      texw.set_size_l2(scale_log2, scale_log2, scale_log2);
    }
    ttev.tpat_edit_copy_range(pos, tile_size3, tex, uvec3());
    bool is_space = true;
    tex[0].foreach() void (uint x, uint y, uint z, uint v) {
      if (!is_space_voxel(v)) {
        is_space = false;
      }
    }
    if (is_space) {
      em.set(x, y, z, 1u);
    }
  }
  // tmapを見て使用しているパターンに印をつける
  range_foreach(ttev.tmap_size) void (uint x, uint y, uint z) {
    const v = ttev.tmap_edit_get(make_uvec3(x, y, z),
      0, 0);
    if (!is_node_reference(v)) {
      return;
    }
    mutable nrp = decode_noderef_param(v);
    uvec3 p = nrp.coord;
    const s = nrp.scale + 1u;
    if (s <= scale_log2) {
      // scaleが基準サイズ以下のとき。
      const sv = scale_log2 - s;
      p.x >>= sv;
      p.y >>= sv;
      p.z >>= sv;
      if (em.get(p.x, p.y, p.z) != 0u) {
        // 空パターンを指している。tmapのエントリを空白に置き換える。
        debug_log("noderef refs empty pat", scale_log2, x, y, z);
        for (texture_value_index i: 0 .. multiword_num_words) {
          ttev.tmap_edit_set(make_uvec3(x, y, z), i, 0u);
        }
      } else {
        // 使用中の印をつける
        um.set(p.x, p.y, p.z, 1u);
      }
    } else {
      // scaleが基準サイズより大きいとき。
      const sv = s - scale_log2;
      p.x <<= sv;
      p.y <<= sv;
      p.z <<= sv;
      uint sz = 1u << sv;
      for (uint z: 0 .. sz) {
        for (uint y: 0 .. sz) {
          for (uint x: 0 .. sz) {
            // 使用中の印をつける
            um.set(p.x + x, p.y + y, p.z + z, 1u);
          }
        }
      }
    }
  }
  // 使用していないパターンを空白にする。
  {
    farray{texture_data, multiword_num_words} tex;
    for (const i, mutable& texw: tex) {
      texw.set_size_l2(scale_log2, scale_log2, scale_log2);
    }
    uint cnt_use = 0;
    uint cnt_empty = 0;
    uint cnt_clear = 0;
    range_foreach(coord_range) void (uint x, uint y, uint z) {
      if (
        x < coord_range.x / 2 &&
        y < coord_range.y / 2 &&
        z < coord_range.z / 2) {
        // 前半1/8の範囲は割り当て対象ではない
        return;
      }
      if (um.get(x, y, z) != 0u) {
        ++cnt_use;
      } else if (em.get(x, y, z) != 0u) {
        ++cnt_empty;
      } else {
        ++cnt_clear;
        const pos = make_uvec3(x, y, z) * tile_size;
        /*
        debug_log("clear tpat scale", scale_log2, "offset",
          make_uvec3(x, y, z));
        */
        ttev.tpat_edit_paste_range(pos, tile_size3, tex, uvec3(),
          0xffu, merge_mode_opaque());
      }
    }
    debug_log("erase_unused_tpat scale_l2=", scale_log2, " use=", cnt_use,
      "empty=", cnt_empty, "clear=", cnt_clear);
    msg = to_string(scale_log2) + ":" + to_string(cnt_use);
  }
  return msg;
}

public function string
dedup_normalize_tpat(tiled_texture_edit_view mutable& ttev,
  uint max_tile_scale_log2, bool force_flag, uvec3 const& tpat_range_l2)
{
  // 重複するタイルパターンを一つにまとめる。またscale値ごとに特定範囲の
  // オフセットにのみ割り当てられるように正規化する。max_tile_scale_log2
  // より大きいサイズのタイルパターンが見つかったら警告し、(force_flagが
  // 真なら)空白に置き換える。
  // tpat_range_l2は既定ではttev.tpat_size_l2だが、それよりも狭い範囲に
  // 寄せたいときにはより小さい値が指定される。
  uvec3 const tpat_range = map{uvec3, operator::shiftl}(
    make_uvec3(1u, 1u, 1u), tpat_range_l2);
    // 既定ではttev.tpat_sizeに一致する。
  debug_log("dedup_tpat: mts", max_tile_scale_log2, "range", tpat_range_l2,
    "assignable", get_num_assignable_tile(tpat_range, max_tile_scale_log2));
  if (max_tile_scale_log2 > absmax_tile_scale_log2) {
    debug_log("dedup_tpat: max_tile_scale_log2 too large");
    return "dedup_tpat failed";
  }
  struct value_entry() {
    public farray{texture_data, 2} tex; // テクスチャ値
    public texel_value nref_value = make_space_voxel(); // 置換後のnoderef値
    public bool tex_set; // texがセット済みかどうか
    public bool is_space; // 全て空白のパターンかどうか
  }
  struct scale_entry {
    public tree_map{varray{uint}, value_entry} values;
      // パターン値からテクスチャデータ
    public tree_map{uint, varray{uint}} tpat_coord_to_value;
      // tpatの座標からパターン値
  }
  string errmsg;
  string statmsg;
  metafunction num_words multiword_num_words;
  farray{texture_data, num_words} tptex; // tpatテクスチャの作業コピー
  farray{texture_data, num_words} tmtex; // tmapテクスチャの作業コピー
  farray{scale_entry, absmax_tile_scale_log2} scales; // 各scale値ごとのデータ
  // 各tmapエントリについて使用しているtpatのデータをscalesに入れる。
  range_foreach(ttev.tmap_size) void (uint x, uint y, uint z) {
    const v = ttev.tmap_edit_get(make_uvec3(x, y, z), 0, 0);
    if (!is_node_reference(v)) {
      return;
    }
    mutable nrp = decode_noderef_param(v);
    const s = nrp.scale;
    const scale_log2 = s + 1u;
    mutable& sc = scales[s];
    mutable& sce = sc.tpat_coord_to_value[mask_noderef_coord(v)];
      // tpat座標からパターン値
    if (sce.empty()) {
      // パターン値がまだセットされていないのでセットする
      uint const tile_size = 1u << scale_log2;
      uvec3 const tile_size3 = make_uvec3(1u, 1u, 1u) * tile_size;
      const pos = nrp.coord * tile_size;
      farray{texture_data, num_words} tex;
      for (const i, mutable& texw: tex) {
        texw.set_size_l2(scale_log2, scale_log2, scale_log2);
      }
      ttev.tpat_edit_copy_range(pos, tile_size3, tex, uvec3());
      varray{uint} mutable& k = sce;
      // primaryの値をkに追加
      bool is_space = true;
      tex[0].foreach() void (uint x, uint y, uint z, uint v) {
        if (is_space_voxel(v)) {
          v = make_space_voxel(); // 空白距離情報を持たない空白値にする
        } else {
          is_space = false;
        }
        k.push_back(v);
      }
      // secondaryの値をkに追加
      for (size_t i: 1u .. num_words) {
        tex[i].foreach() void (uint x, uint y, uint z, uint v) {
          k.push_back(v);
        }
      }
      mutable& e = sc.values[k];
      if (!e.tex_set) {
        e.tex = tex;
        e.tex_set = true;
        e.is_space = is_space;
      }
    }
  }
  {
    debug_log("dedup_tpat: clear patterns");
    uvec3 const tpszl2 = ttev.tpat_size_l2;
    debug_log("tpszl2", tpszl2);
    for (size_t i: 0 .. num_words) {
      tptex[i].set_size_l2(tpszl2.x, tpszl2.y, tpszl2.z);
    }
    // tpat全体をテクスチャにコピー
    ttev.tpat_edit_copy_range(uvec3(), ttev.tpat_size, tptex, uvec3());
    // tpatテクスチャをクリアする
    range_foreach(ttev.tpat_size) void (uint x, uint y, uint z) {
      tptex[0].set(x, y, z, make_space_voxel());
      for (size_t i: 1 .. num_words) {
        tptex[i].set(x, y, z, 0u);
      }
    }
    debug_log("dedup_tpat: update tpat");
    // tpatに値を書き込む
    farray{uvec3, absmax_tile_scale_log2} find_empty_cur_a;
    for (uint s: 0u .. absmax_tile_scale_log2) {
      uint const scale_log2 = s + 1u;
      uint const tile_size = 1u << scale_log2;
      uvec3 const tile_size3 = make_uvec3(1u, 1u, 1u) * tile_size;
      uvec3 const coord_range = tpat_range / tile_size;
      mutable& sc = scales[s];
      debug_log("dedup_tpat: update tpat scale=", s + 1u, "num=",
        sc.values.size());
      if (sc.values.size() != 0u) {
        statmsg += " " + to_string(s + 1u) + ":"
          + to_string(sc.values.size());
      }
      for (const& k, mutable& e: sc.values) {
        const& tex = e.tex;
        mutable nv = make_space_voxel();
        if (e.is_space) {
          // 空白タイルパターン
        } else if (s < max_tile_scale_log2) {
          nv = find_empty_tpat(tptex[0], tpat_range, find_empty_cur_a[s],
            scale_log2, max_tile_scale_log2, make_uvec3(1u, 1u, 1u));
          if (!is_node_reference(nv)) {
            debug_log("dedup_tpat: WARNING: failed to assign tile pattern");
            if (errmsg.empty()) {
              errmsg = "dedup_tpat: failed to assign tile pattern";
            }
          }
        } else {
          // 現在のmax_tile_scale_log2では保持できないタイルパターン参照
          debug_log("dedup_tpat: WARNING: scale value too large");
          errmsg = "dedup_tpat: scale value too large";
        }
        e.nref_value = nv;
        if (is_node_reference(nv)) {
          noderef_param nref = decode_noderef_param(nv);
          dbg_conv() { debug_log("nref coord", nref.coord); }
          const dpos = nref.coord * tile_size;
          range_foreach(tile_size3) void (uint x, uint y, uint z) {
            for (size_t i: 0 .. num_words) {
              tptex[i].set(dpos.x + x, dpos.y + y, dpos.z + z,
                tex[i].get(x, y, z));
            }
          }
        }
      }
    }
  }
  if (!force_flag && !errmsg.empty()) {
    debug_log("dedup_tpat: ERROR: " + errmsg);
    return errmsg;
  }
  debug_log("dedup_tpat: update tmap");
  // tmapのnoderef値を書き換える
  {
    const tmszl2 = ttev.tmap_size_l2;
    for (const i, mutable& tmtexw: tmtex) {
      tmtexw.set_size_l2(tmszl2.x, tmszl2.y, tmszl2.z);
    }
    ttev.tmap_edit_copy_range(uvec3(), ttev.tmap_size, tmtex, uvec3());
    range_foreach(ttev.tmap_size) void (uint x, uint y, uint z) {
      mutable v = tmtex[0].get(x, y, z);
      if (!is_node_reference(v)) {
        return;
      }
      mutable nrp = decode_noderef_param(v);
      mutable& sc = scales[nrp.scale];
      const& k = sc.tpat_coord_to_value[mask_noderef_coord(v)];
      const nv = sc.values[k].nref_value;
      if (is_node_reference(nv)) {
        const nrp_assigned = decode_noderef_param(nv);
        nrp.coord = nrp_assigned.coord; // coordだけを書き換える
        v = encode_noderef_param(nrp);
      } else {
        // 空白パターンであるか、割り当てできなかったパターン
        v = make_space_voxel();
      }
      tmtex[0].set(x, y, z, v);
    }
  }
  {
    debug_log("dedup_tpat: write back tpat");
    // tpatに書き戻す
    ttev.tpat_edit_paste_range(uvec3(), ttev.tpat_size, tptex,
      uvec3(), 0xffu, merge_mode_opaque());
    debug_log("dedup_tpat: write back tpat done");
    debug_log("dedup_tpat: write back tmap");
    // tmapに書き戻す
    ttev.tmap_edit_paste_range(uvec3(), ttev.tmap_size, tmtex,
      uvec3(), 0xffu, merge_mode_opaque());
    debug_log("dedup_tpat: write back tmap done");
  }
  debug_log("dedup_tpat done");
  return "dedup_tpat:" + statmsg;
}

public function bool
convert_from_pattern_save_data(pattern_save_data const& psd,
  subtexture mutable& cd, uint max_tile_scale_log2,
  tiled_texture_edit_view mutable& ttev)
{
  function {t} uint pat_to_uint(t const& nd) {
    const& c = nd.coord;
    uint r = (nd.scale << 24u) | (c.z << 16u) | (c.y << 8u) | (c.x << 0u);
    return r;
  }
  function {t} t uint_to_pat(uint v) {
    t nd;
    nd.scale = (v >> 24u) & 0xffu;
    nd.coord.z = (v >> 16u) & 0xffu;
    nd.coord.y = (v >>  8u) & 0xffu;
    nd.coord.x = (v >>  0u) & 0xffu;
    return nd;
  }
  bool err = false;
  cd = psd.copy_data;
  uvec3 fecur;
  uint cur_tile_scale_log2;
  tree_map{uint, uint} patconv;
  for (const i, const& pat: psd.patterns) {
    if (cur_tile_scale_log2 != pat.scale + 1u) {
      cur_tile_scale_log2 = pat.scale + 1u;
      fecur = uvec3();
    }
    const tv = find_empty_tpat(ttev, ttev.tpat_size, fecur,
      cur_tile_scale_log2, max_tile_scale_log2, make_uvec3(1u, 1u, 1u));
    if (!is_node_reference(tv)) {
      err = true;
      break;
    }
    const nrp = decode_noderef_param(tv);
    patconv[pat_to_uint(pat)] = pat_to_uint(nrp);
    const pos = nrp.coord * (1u << (pat.scale + 1u));
    const sz = make_uvec3(1u, 1u, 1u) * (1u << (pat.scale + 1u));
    ttev.tpat_edit_paste_range(pos, sz, pat.data, uvec3(),
      0xffu, merge_mode_opaque());
  }
  if (err) {
    cd = subtexture();
    return false;
  }
  mutable& tex_pri = cd.tex[0];
  range_foreach(cd.copy_size) void (uint x, uint y, uint z) {
    const v = tex_pri.get(x, y, z);
    if (!is_node_reference(v)) {
      return;
    }
    mutable nr = decode_noderef_param(v);
    if (const p: patconv[pat_to_uint(nr)]) {
      const cnr = uint_to_pat{noderef_param}(p);
      nr.coord = cnr.coord;
      tex_pri.set(x, y, z, encode_noderef_param(nr));
    } else {
      debug_log("failed to convert noderef (internal error)");
      err = true;
    }
  }
  return !err;
}

public function bool
convert_to_pattern_save_data(pattern_save_data mutable& psd,
  subtexture const& cd, tiled_texture_edit_view mutable& ttev)
{
  psd = pattern_save_data();
  psd.copy_data = cd;
  if (!get_tpat_refs(psd.patterns, cd, ttev)) {
    return false;
  }
  return true;
}

private function bool
get_tpat_refs(varray{tpat_data} mutable& tpd, subtexture const& cd,
  tiled_texture_edit_view mutable& ttev)
{
  /* 現状16倍以外はサポートしていない。それ以外のscaleでのsave/loadは
   * いったん16倍でおこなうこと。*/
  const scale_val = 4u - 1u;
  bool err = false;
  tree_set{uvec3} refs;
  const sz = cd.copy_size;
  for (const z: 0 .. sz.z) {
    for (const y: 0 .. sz.y) {
      for (const x: 0 .. sz.x) {
        const v = cd.tex[0].get(x, y, z);
        if (!is_node_reference(v)) {
          continue;
        }
        const nrp = decode_noderef_param(v);
        if (nrp.scale != scale_val) {
          err = true;
          debug_log("not supported", nrp);
          continue;
        }
        refs[nrp.coord] = unit();
      }
    }
  }
  for (const c, const u: refs) {
    const scale_val_p1 = scale_val + 1u;
    const scale = 1u << scale_val_p1;
    const pos = c * scale;
    const sz = make_uvec3(scale, scale, scale);
    debug_log("coord", c, "scale", scale, "sz", sz);
    tpat_data v;
    v.scale = scale_val;
    v.coord = c;
    for (const i, mutable& dataw: v.data) {
      dataw.set_size_l2(scale_val_p1, scale_val_p1, scale_val_p1);
    }
    ttev.tpat_edit_copy_range(pos, sz, v.data, uvec3());
    tpd.push_back_move(v);
  }
  return !err;
}

public function void
subtexture_copy_range(subtexture mutable& dst,
  uvec3 const& dstpos, subtexture const& src, uvec3 const& srcpos,
  uvec3 const& sz)
{
  const dsz = dst.copy_size;
  const ssz = src.copy_size;
  const c_dstpos = map{uvec3, min}(dstpos, dsz);
  const c_srcpos = map{uvec3, min}(srcpos, ssz);
  const c_dstsz = dsz - c_dstpos;
  const c_srcsz = ssz - c_srcpos;
  const c_sz_min = map{uvec3, min}(c_dstsz, c_srcsz);
  const copy_sz = map{uvec3, min}(c_sz_min, sz);
  // debug_log("copy_range", copy_sz, "dsz", dsz, "ssz", ssz, "sz", sz, "dp",
  //   dstpos, "sp", srcpos);
  for (uint i: 0 .. m::symbol{subtexture, "num_tex"}) {
    mutable& dtex = dst.tex[i];
    const& stex = src.tex[i];
    range_foreach(copy_sz) void (uint x, uint y, uint z) {
      const v = stex.get(srcpos.x + x, srcpos.y + y, srcpos.z + z);
      dtex.set(dstpos.x + x, dstpos.y + y, dstpos.z + z, v);
    }
  }
}

