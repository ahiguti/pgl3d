private threaded namespace pgl3d::edit_mode::noedit_control "use-unsafe";
private import core::common -;
private import core::meta m;
private import pgl3d::edit_mode::common -;
private import pgl3d::edit_mode::edit_mode_texture -;
private import pgl3d::edit_mode::sync_gl -;
private import pgl3d::edit_mode::tiled_voxel_texture -;
private import pgl3d::texture::atlas -;

public struct noedit_control(string const& datadir0,
  ptr{edit_mode_texture} const& emt0, ptr{atlas} const& atl0)
<edit_control_i>
{
  // edit_modeが無効のときのedit_control_i実装。view無しでeditを直接glの
  // テクスチャに反映させる。
  private ptr{edit_mode_texture} emt = emt0;
    // emt->voxがtiled_voxel_texture
    // emt->vox.tmap_editとemt->vox.tpat_editがtptr{texture_edit}
    // emt->glt_voxtmapなどがptr{gl_texture}
  private tptr{texture_edit} tmap_edit = emt->vox.tmap_edit;
  private tptr{texture_edit} tpat_edit = emt->vox.tpat_edit;
  private metafunction num_words multiword_num_words;
  private varray{ptr{gl_texture}} glt_tmap;
  private varray{ptr{gl_texture}} glt_tpat;
  init();
  private function void init()
  {
    glt_tmap.push_back(emt->glt_voxtmap0);
    glt_tmap.push_back(emt->glt_voxtmap1);
    glt_tpat.push_back(emt->glt_voxtpat0);
    glt_tpat.push_back(emt->glt_voxtpat1);
  }
  public function void on_textinput(string const& s, string mutable& msg_r)
  {
  }
  public function bool is_textinput_mode() const
  {
    return false;
  }
  public function void update_tiled_voxel_texture(
    tiled_voxel_texture const& vox)
  {
    emt->vox = vox;
    sync_gl_all(*emt);
  }
  public function void on_key_pressed(int scancode, uint modmask,
    glm::vec3 mutable& cursor_move_r, string mutable& msg_r)
  {
  }
  public function void set_camera_angle(glm::quat const& angle)
  {
  }
  public function void on_frame(projection_info const& prj)
  {
    // debug_log("noedit on_frame");
    sync_gl();
    // debug_log("noedit on_frame done");
  }
  public function void on_draw_finished()
  {

  }
  public function void modify_tmap(glm::uvec3 const& pos, uint value)
  {
    // TODO: 範囲を一括して更新する手段を用意
    tmap_edit->set(pos, 0, value);
    // debug_log("noedit modify_tmap");
  }
  private function void sync_gl()
  {
    mutable& tme = *tmap_edit;
    mutable& tpe = *tpat_edit;
    /* tmap変更箇所のglへの反映。個々の範囲ごとにコピーする */
    const tmmodarr = tme.get_modified_array(true);
    for (size_t i, const& pos: tmmodarr) {
      const sz = pos.second - pos.first + make_ivec3(1, 1, 1);
      const s = sz.x * sz.y * sz.z;
      // debug_log("noedit sync pos", pos, s);
      for (const i: 0 .. tme.data.size()) { // 各ワード
        texture_data_mip_sync_gl(tme.data[i][0], tme.data[i],
          to_uvec3(pos.first), to_uvec3(sz), glt_tmap[i]);
      }
    }
    /* tpat変更箇所のglへの反映。変更領域をマージしてまとめてコピーする */
    pair{uvec3, uvec3} tpmod = tpe.get_modified_merged(true);
    if (tpmod.second.x != 0u) {
      // debug_log("noedit sync tpmod", tpmod);
      for (const i: 0 .. tpe.data.size()) { // 各ワード
        texture_data_mip_sync_gl(tpe.data[i][0], tpe.data[i],
          tpmod.first, tpmod.second, glt_tpat[i]);
      }
    }
  }
}

