private threaded namespace pgl3d::edit_mode::pattern_save_data "use-unsafe";
private import core::common -;
private import core::meta m;
private import pgl3d::texture::subtexture -;
private import pgl3d::texture::filling -;
private import pgl3d::edit_mode::tiled_texture_edit_view -;
private import pgl3d::edit_mode::common -;
private import pgl3d::edit_mode::edit_mode_util -;

private metafunction dbg_conv{f} no_operation;

public pure valuetype struct tpat_data {
  public uint scale;
  public uvec3 coord;
  public farray{texture_data, multiword_num_words} data;
}

public pure valuetype struct pattern_save_data {
  // コピーバッファの内容と、そのnoderef参照先となるtpatのデータを
  // まとめてファイルに保存するためのデータ型。
  public subtexture copy_data;
  public varray{tpat_data} patterns;
}

public function bool
convert_from_pattern_save_data(pattern_save_data const& psd,
  subtexture mutable& cd, uint max_tile_scale_log2,
  tiled_texture_edit_view mutable& ttev)
{
  // コピーバッファの内容とそのnoderef参照先のtpatデータをまとめて保存
  // されたデータ(pattern_save_data)を現在のテクスチャ(ttev)へロードする。
  // pattern_save_dataにはセーブ元のtpat座標が記録されているが、現在の
  // テクスチャへロードするために、tpatの空きを探してその座標に書き換え
  // る処理を行う。空きがみつからなかったらfalseを返すが、そのときでも
  // ttevの内容は書き換わるので注意。
  function {t} uint pat_to_uint(t const& nd) {
    const& c = nd.coord;
    uint r = (nd.scale << 24u) | (c.z << 16u) | (c.y << 8u) | (c.x << 0u);
    return r;
  }
  function {t} t uint_to_pat(uint v) {
    t nd;
    nd.scale = (v >> 24u) & 0xffu;
    nd.coord.z = (v >> 16u) & 0xffu;
    nd.coord.y = (v >>  8u) & 0xffu;
    nd.coord.x = (v >>  0u) & 0xffu;
    return nd;
  }
  bool err = false;
  cd = psd.copy_data;
  tree_map{uint, uint} patconv;
    // tpatの空きを探して見つかった場所へtpat座標を変換するmap。
  uvec3 fecur; // 空きを探すのに使うイテレート位置
  uint cur_tile_scale_log2; // 空きを探しているscale値
  for (const i, const& pat: psd.patterns) {
    if (cur_tile_scale_log2 != pat.scale + 1u) {
      // scale値が変わったのでfecurをリセットする
      cur_tile_scale_log2 = pat.scale + 1u;
      fecur = uvec3();
    }
    const tv = find_empty_tpat(ttev, ttev.tpat_size, fecur,
      cur_tile_scale_log2, max_tile_scale_log2, make_uvec3(1u, 1u, 1u));
      // 空きを探す
    if (!is_node_reference(tv)) {
      // 空きが見つからなかった
      err = true;
      break;
    }
    const nrp = decode_noderef_param(tv);
    patconv[pat_to_uint(pat)] = pat_to_uint(nrp);
    const pos = nrp.coord * (1u << (pat.scale + 1u));
    const sz = make_uvec3(1u, 1u, 1u) * (1u << (pat.scale + 1u));
    ttev.tpat_edit_paste_range(pos, sz, pat.data, uvec3(),
      0xffu, merge_mode_opaque());
  }
  if (err) {
    cd = subtexture();
    return false;
  }
  mutable& tex_pri = cd.tex[0];
  range_foreach(cd.copy_size) void (uint x, uint y, uint z) {
    const v = tex_pri.get(x, y, z);
    if (!is_node_reference(v)) {
      return;
    }
    mutable nr = decode_noderef_param(v);
    if (const p: patconv[pat_to_uint(nr)]) {
      // noderefだったらpatconvを見てtpat座標を書き換える
      const cnr = uint_to_pat{noderef_param}(p);
      nr.coord = cnr.coord;
      tex_pri.set(x, y, z, encode_noderef_param(nr));
    } else {
      debug_log("failed to convert noderef (internal error)");
      err = true;
    }
  }
  return !err;
}

public function void
convert_to_pattern_save_data(pattern_save_data mutable& psd,
  subtexture const& cd, tiled_texture_edit_view mutable& ttev)
{
  // コピーバッファの内容をpattern_save_dataにコピーする。noderefに
  // ついては参照先のtpatの内容をコピーする。
  psd = pattern_save_data();
  psd.copy_data = cd;
  get_tpat_refs(psd.patterns, cd, ttev);
}

private function void
get_tpat_refs(varray{tpat_data} mutable& tpd, subtexture const& cd,
  tiled_texture_edit_view mutable& ttev)
{
  // コピーバッファの中のすべてのnoderefについて、pattern_save_dataの
  // patternsに書き込む。
  // TODO: 16倍以外をテスト
  tree_set{pair{uint,uvec3}} refs;
  const sz = cd.copy_size;
  for (const z: 0 .. sz.z) {
    for (const y: 0 .. sz.y) {
      for (const x: 0 .. sz.x) {
        const v = cd.tex[0].get(x, y, z);
        if (!is_node_reference(v)) {
          continue;
        }
        const nrp = decode_noderef_param(v);
        refs[pair(nrp.scale, nrp.coord)] = unit();
      }
    }
  }
  for (const c, const u: refs) {
    const& coord = c.second;
    const scale_val = c.first;
    const scale_val_p1 = scale_val + 1u;
    const scale = 1u << scale_val_p1;
    const pos = c.second * scale;
    const sz = make_uvec3(scale, scale, scale);
    debug_log("coord", coord, "scale", scale, "sz", sz);
    tpat_data v;
    v.scale = scale_val;
    v.coord = coord;
    for (const i, mutable& dataw: v.data) {
      dataw.set_size_l2(scale_val_p1, scale_val_p1, scale_val_p1);
    }
    ttev.tpat_edit_copy_range(pos, sz, v.data, uvec3());
    tpd.push_back_move(v);
  }
}

public pure valuetype struct subtexture_with_filling {
  public subtexture subtex;
  public filling fdata;
}

public pure struct multi_pattern_save_data {
  public varray{subtexture_with_filling} subtexs;
  public varray{tpat_data} patterns;
}

public function bool
fillings_from_multi_pattern_save_data(multi_pattern_save_data const& mpsd,
  tiled_texture_edit_view mutable& ttev, uvec3 const& sppos, uvec3 const& spsz)
{
  // multi_pattern_save_dataが保持している内容をttevへ適用する。
  // tpat, tmap, fillingsがttevに書き込まれる。
  // ttevのtmapオフセットspposからspszの範囲に書き込まれる。
  function {t} uint pat_to_uint(t const& nd) {
    const& c = nd.coord;
    uint r = (nd.scale << 24u) | (c.z << 16u) | (c.y << 8u) | (c.x << 0u);
    return r;
  }
  function {t} t uint_to_pat(uint v) {
    t nd;
    nd.scale = (v >> 24u) & 0xffu;
    nd.coord.z = (v >> 16u) & 0xffu;
    nd.coord.y = (v >>  8u) & 0xffu;
    nd.coord.x = (v >>  0u) & 0xffu;
    return nd;
  }
  bool err = false;
  tree_map{uint, uint} patconv;
    // tpatの空きを探して見つかった場所へtpat座標を変換するmap。
  uvec3 fecur; // 空きを探すのに使うイテレート位置
  uint cur_tile_scale_log2; // 空きを探しているscale値
  const max_tile_scale_log2 = ttev.get_max_tile_scale_log2();
  for (const i, const& pat: mpsd.patterns) {
    if (cur_tile_scale_log2 != pat.scale + 1u) {
      // scale値が変わったのでfecurをリセットする
      cur_tile_scale_log2 = pat.scale + 1u;
      fecur = uvec3();
    }
    const tv = find_empty_tpat(ttev, ttev.tpat_size, fecur,
      cur_tile_scale_log2, max_tile_scale_log2, make_uvec3(1u, 1u, 1u));
      // 空きを探す
    if (!is_node_reference(tv)) {
      // 空きが見つからなかった
      err = true;
      break;
    }
    const nrp = decode_noderef_param(tv);
    patconv[pat_to_uint(pat)] = pat_to_uint(nrp);
    const pos = nrp.coord * (1u << (pat.scale + 1u));
    const sz = make_uvec3(1u, 1u, 1u) * (1u << (pat.scale + 1u));
    ttev.tpat_edit_paste_range(pos, sz, pat.data, uvec3(),
      0xffu, merge_mode_opaque());
  }
  if (err) {
    return false;
  }
  debug_log("subtexs", mpsd.subtexs.size());
  uvec3 find_empty_cur;
  for (const i, const& stex: mpsd.subtexs) {
    subtexture mutable cd = stex.subtex; // コピーを作る
    mutable& tex_pri = cd.tex[0];
    range_foreach(cd.copy_size) void (uint x, uint y, uint z) {
      const v = tex_pri.get(x, y, z);
      if (!is_node_reference(v)) {
        return;
      }
      mutable nr = decode_noderef_param(v);
      if (const p: patconv[pat_to_uint(nr)]) {
        // noderefだったらpatconvを見てtpat座標を書き換える
        const cnr = uint_to_pat{noderef_param}(p);
        nr.coord = cnr.coord;
        tex_pri.set(x, y, z, encode_noderef_param(nr));
      } else {
        debug_log("failed to convert noderef (internal error)");
        err = true;
      }
    }
    if (err) {
      break;
    }
    filling mutable fdata = stex.fdata;
    if (!find_empty_tmap(ttev, sppos, spsz, find_empty_cur, cd.copy_size)) {
      debug_log("find_empty_tmap failed");
      err = true;
      break;
    }
    debug_log("found empty tmap", find_empty_cur);
    fdata.offset = sppos + find_empty_cur;
    ttev.tmap_edit_paste_range(fdata.offset, cd.copy_size, cd.tex, uvec3(),
      0xffu, merge_mode_opaque());
    ttev.set_filling(fdata);
  }
  return !err;
}

public function void
fillings_to_fillsubs(varray{subtexture_with_filling} mutable& fillsubs,
  tiled_texture_edit_view mutable& ttev)
{
  // すべてのfillingとそれが参照しているtmap領域を取得する
  varray{filling} const fs = ttev.get_fillings();
  // 各fillingについてtmapの内容をsubtexsにコピーする。
  for (const i, const& fi: fs) {
    subtexture_with_filling subtex;
    subtex.fdata = fi;
    mutable& s = subtex.subtex;
    s.copy_size = fi.size();
    const sz_l2 = map{uvec3, integral_log2{uint}}(s.copy_size);
    for (const j, mutable& tex: s.tex) {
      tex.set_size_l2(sz_l2.x, sz_l2.y, sz_l2.z);
    }
    ttev.edit_copy_range(fi.offset, s.copy_size, s.tex, uvec3());
    fillsubs.push_back_move(subtex);
    debug_log("subtex", fi.offset, s.copy_size);
  }
}

public function void
fillings_to_multi_pattern_save_data(multi_pattern_save_data mutable& mpsd,
  tiled_texture_edit_view mutable& ttev)
{
  // fillingsが参照している内容をmulti_pattern_save_dataにコピーし、
  // 参照しているすべてのnoderefについて参照先のtpatの内容をコピーする。
  // すべてのfillingsの内容を保存するときに使う。
  debug_log("fillings_to_multi_pattern_save_data");
  mpsd = multi_pattern_save_data();
  fillings_to_fillsubs(mpsd.subtexs, ttev);
  // subtexsのすべてについて参照しているtpatを調べる。
  tree_set{pair{uint,uvec3}} refs;
  for (const i, const& stfi: mpsd.subtexs) {
    const& stex = stfi.subtex;
    const sz = stex.copy_size;
    for (const z: 0 .. sz.z) {
      for (const y: 0 .. sz.y) {
        for (const x: 0 .. sz.x) {
          const v = stex.tex[0].get(x, y, z);
          if (!is_node_reference(v)) {
            continue;
          }
          const nrp = decode_noderef_param(v);
          refs[pair(nrp.scale, nrp.coord)] = unit();
          debug_log("tpat ref scale=", nrp.scale, "coord=", nrp.coord);
        }
      }
    }
  }
  // 参照しているすべてのtpatについての内容をpatternsにコピーする。
  for (const c, const u: refs) {
    const& coord = c.second;
    const scale_val = c.first;
    const scale_val_p1 = scale_val + 1u;
    const scale = 1u << scale_val_p1;
    const pos = c.second * scale;
    const sz = make_uvec3(scale, scale, scale);
    debug_log("coord", coord, "scale", scale, "sz", sz);
    tpat_data v;
    v.scale = scale_val;
    v.coord = coord;
    for (const i, mutable& dataw: v.data) {
      dataw.set_size_l2(scale_val_p1, scale_val_p1, scale_val_p1);
    }
    ttev.tpat_edit_copy_range(pos, sz, v.data, uvec3());
    mpsd.patterns.push_back_move(v);
  }
}

