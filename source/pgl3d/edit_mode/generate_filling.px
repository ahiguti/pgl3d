private threaded namespace pgl3d::edit_mode::generate_filling;
private import common -;
private import meta m;
private import glm -;
private import pgl3d::texture::voxel -;
private import pgl3d::texture::texture -;
private import pgl3d::texture::copy_data -;
private import pgl3d::texture::editable_voxel -;
private import pgl3d::engine::util -;
private import pgl3d::edit_mode::filling -;
private import pgl3d::edit_mode::vecutil -;
private import pgl3d::edit_mode::edit_mode_util -;
private import pgl3d::edit_mode::tiled_texture_edit_view -;

private function void
copy_from_ttev_tmap(tiled_texture_edit_view mutable& ttev, uvec3 const& pos,
  uvec3 const& sz, copy_data_type mutable& cp)
{
  cp.copy_size = sz;
  const sz_l2 = map{uvec3, integral_log2{uint}}(sz);
  for (const i, mutable& tex: cp.tex) {
    tex.set_size_l2(sz_l2.x, sz_l2.y, sz_l2.z);
  }
  ttev.tmap_edit_copy_range(pos, sz, cp.tex[0], cp.tex[1], uvec3());
}

private function varray{copy_data_type}
get_fragments_from_copy_data(copy_data_type mutable& cp)
{
  const tsz = cp.tex[0].get_size_l2_uvec3();
  const sz = cp.copy_size;
  texture_data frm; // (x,y)に空白でないボクセルがあるかどうか
  frm.set_size_l2(tsz.x, tsz.y, 0);
  for (const y: 0 .. sz.y) {
    for (const x: 0 .. sz.x) {
      uint found = 0;
      for (const z: 0 .. sz.z) {
        const v = cp.tex[0].get(x, y, z);
        if (!is_space_voxel(v)) {
          found = z + 1u;
        }
      }
      frm.set(x, y, 0, found);
      // debug_log(x, y, found);
    }
  }
  texture_data fra = frm; // fraはfrmを含むaabb閉包
  {
    while (true) {
      function uint get_value(int x, int y) {
        if (x >= 0 && x < static_cast{int}(sz.x) &&
          y >= 0 && y < static_cast{int}(sz.y)) {
          return fra.get(static_cast{uint}(x), static_cast{uint}(y), 0u);
        } else {
          return 0u;
        }
      }
      bool modified = false;
      for (const y: 0 .. static_cast{int}(sz.y)) {
        for (const x: 0 .. static_cast{int}(sz.x)) {
          if (get_value(x, y) != 0u) {
            continue;
          }
          const pp = min(get_value(x + 1, y), get_value(x, y + 1));
          const pn = min(get_value(x + 1, y), get_value(x, y - 1));
          const np = min(get_value(x - 1, y), get_value(x, y + 1));
          const nn = min(get_value(x - 1, y), get_value(x, y - 1));
          const v = max(max(pp, pn), max(np, nn));
          if (v != 0u) {
            modified = true;
            fra.set(static_cast{uint}(x), static_cast{uint}(y), 0, v);
          }
        }
      }
      if (!modified) {
        break;
      }
    }
  }
  mutable frs = varray{copy_data_type}();
  // 各点(x,y)について、その点を始点とする断片を作るかどうか判定する
  for (const y: 0 .. sz.y) {
    for (const x: 0 .. sz.x) {
      if (fra.get(x, y, 0) == 0u) {
        continue;
      }
      // aabbの始点かどうか
      const is_left = (x == 0u || fra.get(x - 1u, y, 0u) == 0u);
      const is_bottom = (y == 0u || fra.get(x, y - 1u, 0u) == 0u);
      if (!is_left || !is_bottom) {
        continue;
      }
      // aabbの終点を探す
      mutable xe = x;
      for (xe = x; xe < sz.x; ++xe) {
        if (fra.get(xe, y, 0u) == 0u) {
          break;
        }
      }
      mutable ye = y;
      for (ye = y; ye < sz.y; ++ye) {
        if (fra.get(x, ye, 0u) == 0u) {
          break;
        }
      }
      const fr_w = xe - x;
      const fr_h = ye - y;
      uint vm = 0u;
      for (const yi: 0 .. fr_h) {
        for (const xi: 0 .. fr_w) {
          vm = max(vm, fra.get(x + xi, y + yi, 0u));
        }
      }
      // fragment fr;
      // fr.offset = make_uvec3(x, y, 0u);
      // fr.size = make_uvec3(fr_w, fr_h, vm);
      mutable fr = make_copy_data_type(make_uvec3(fr_w, fr_h, vm));
      copy_data_type_copy_range(fr, uvec3(), cp, make_uvec3(x, y, 0u),
        fr.copy_size);
      // copy_range(cp, make_uvec3(x, y, 0u), make_uvec3(fr_w, fr_h, vm), fr);
      // debug_log("fr", fr);
      frs.push_back_move(fr);
    }
  }
  return frs;
}

public function varray{copy_data_type}
get_fragments(tiled_texture_edit_view mutable& ttev)
{
  const cur = ttev.get_cursor_range();
  // debug_log("generate_filling", "pos", cur.first, "sz", cur.second);
  copy_data_type copy_data; // 選択領域をここにコピーする
  copy_from_ttev_tmap(ttev, cur.first, cur.second, copy_data);
  // 選択領域から断片を切り出す
  return get_fragments_from_copy_data(copy_data);
}

private function void
generate_filling_one(tiled_texture_edit_view mutable& ttev,
  ptr{rand_generator} const& rndp, varray{copy_data_type} const& frs,
  uvec3 const& coord, uvec3 const& patsz, uint scale_l2)
{
  copy_data_type cpbuf = make_copy_data_type(patsz * (1u << scale_l2));
  const num_frs = frs.size();
  uint const cntmax = 10;
  uint mutable cnt = 0;
  for (const i: 0 .. cntmax) {
    const frn = rndp->generate() % static_cast{uint}(num_frs);
    const& fr = frs[frn];
    if (!le_all_uvec3(fr.copy_size, cpbuf.copy_size)) {
      continue;
    }
    const osz = cpbuf.copy_size - fr.copy_size;
    uvec3 offset;
    offset.x = rndp->generate() % static_cast{uint}(osz.x);
    offset.y = rndp->generate() % static_cast{uint}(osz.y);
    offset.z = 0; // rndp->generate() % static_cast{uint}(osz.z);
    // TODO: frの回転
    bool is_space = true;
    range_foreach(fr.copy_size) bool (uint x, uint y, uint z) {
      const v = cpbuf.tex[0].get(offset.x + x, offset.y + y, offset.z + z);
      if (!is_space_voxel(v)) {
        is_space = false;
        return false;
      }
      return true;
    }
    if (!is_space) {
      /*
      if (++cnt > cntmax) {
        break;
      }
      */
      continue;
    }
    copy_data_type_copy_range(cpbuf, offset, fr, uvec3(), fr.copy_size);
  }
  // debug_log("genfill paste", cpbuf);
  ttev.tpat_edit_paste_range(coord * (1u << scale_l2), cpbuf.copy_size,
    cpbuf.tex[0], cpbuf.tex[1], uvec3(), 0xffu, merge_mode_opaque());
}

public function void
generate_filling(tiled_texture_edit_view mutable& ttev,
  ptr{rand_generator} const& rndp, varray{copy_data_type} const& frs,
  uint scale_l2, uvec3 const& patsz)
{
  const cur = ttev.get_cursor_range();
  const sz = cur.second;
  uvec3 find_empty_cur;
  const bsz = sz / patsz;
  range_foreach(bsz) bool (uint bx, uint by, uint bz) {
    const x = bx * patsz.x;
    const y = by * patsz.y;
    const z = bz * patsz.z;
    const pos = cur.first + make_uvec3(x, y, z);
    const nv = find_empty_tpat(ttev, ttev.tpat_size, find_empty_cur,
      scale_l2, ttev.get_max_tile_scale_log2(), patsz);
    if (!is_node_reference(nv)) {
      return false;
    }
    const rp = decode_noderef_param(nv);
    generate_filling_one(ttev, rndp, frs, rp.coord, patsz, scale_l2);
    mutable p = rp;
    range_foreach(patsz) void (uint x, uint y, uint z) {
      p.coord = rp.coord + make_uvec3(x, y, z);
      const v = encode_noderef_param(p);
      ttev.tmap_edit_set(pos, texture_value_index_primary, nv);
    }
    return true;
  }
}

