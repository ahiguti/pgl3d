private threaded namespace pgl3d::edit_mode::fill_space;
private import common -;
private import meta m;
private import glm -;
private import pgl3d::texture::voxel -;
private import pgl3d::texture::texture -;
private import pgl3d::texture::copy_data -;
private import pgl3d::texture::editable_voxel -;
private import pgl3d::texture::filling -;
private import pgl3d::engine::util -;
private import pgl3d::edit_mode::vecutil -;
private import pgl3d::edit_mode::edit_mode_util -;
private import pgl3d::edit_mode::tiled_texture_edit_view -;

public function void
fill_space_range(tiled_texture_edit_view mutable& ttev,
  copy_data_type mutable& cp, ptr{rand_generator} const& rndp)
{
  if (cp.copy_size.z < 2u) {
    return;
  }
  debug_log("fill_space_range");
  const fills = ttev.get_fillings();
  varray{filling} single_fills; // fillsのうち1x1x1のもの
  varray{filling} multi_fills; // 1x1x1以外のもの
  farray{uint, 9} sz_single;
  sz_single[1] = 1;
  sz_single[4] = 1;
  sz_single[7] = 1;
  for (size_t i, const& fi: fills) {
    if (fi.sizes == sz_single) {
      single_fills.push_back(fi);
    } else {
      multi_fills.push_back(fi);
    }
  }
  debug_log("single", single_fills.size(), "multi", multi_fills.size());
  mutable& tex = cp.tex[0];
  const sz = cp.copy_size - make_uvec3(0, 0, 1);
  range_foreach(sz) void (uint x, uint y, uint z) {
    const bv = tex.get(x, y, z);
    const v = tex.get(x, y, z + 1u);
    if (is_filled(bv) && is_space_voxel(v)) {
      const i = rndp->generate() % static_cast{uint}(single_fills.size());
      debug_log("fill", i, x, y, z);
      const& fi = single_fills[i];
      const& ofs = fi.offset; // tmapのどこにあるか
      const fival = ttev.tmap_edit_get(ofs, texture_value_index_primary, 0);
      if (is_node_reference(fival)) {
        cp.tex[0].set(x, y, z + 1u, fival);
        for (size_t i: 1u .. m::symbol{copy_data_type, "num_tex"}) {
          cp.tex[1].set(x, y, z + 1u, 0u);
        }
      } else {
        debug_log("warning: not a node reference", fi);
      }
    }
  }
  debug_log("fill_space done");
}

