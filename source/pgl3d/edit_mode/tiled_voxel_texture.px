private threaded namespace pgl3d::edit_mode::tiled_voxel_texture "use-unsafe";
private import core::common -;
private import core::meta m;
private import pgl3d::edit_mode::common -;
private import core::text::serialize::compact_pod -;
private import pgl3d::texture::voxel -;
private import pgl3d::texture::filling -;
private import pgl3d::edit_mode::vecutil -;
private import pgl3d::edit_mode::texutil -;

public pure multithreaded struct tiled_voxel_texture()
{
  public texture_data voxtile;
  public tptr{texture_edit} tmap_edit = make_tptr{texture_edit}();
  public tptr{texture_edit} tpat_edit = make_tptr{texture_edit}();
  public filling_map fillmap;
}

private metafunction texture_data_mip_v0 varray{ptr{texture_data}};

private struct tiled_voxel_texture_v0()
{
  // 古いバージョンのフォーマット
  public texture_data voxtile;
  public texture_data_mip_v0 tmap_pri;
  public texture_data_mip_v0 tmap_sec;
  public texture_data_mip_v0 tpat_pri;
  public texture_data_mip_v0 tpat_sec;
}

public function void
tiled_voxel_texture_load_file(tiled_voxel_texture mutable& vox,
  cstrref const& fname, cstrref const& fname_v0, uvec3 tmszl2, uvec3 tpszl2,
  bool enable_short_circuit)
{
  // ファイルからデシリアライズしてvoxにセットする。
  // 現在の設定のテクスチャサイズとデシリアライズした結果のテクスチャサイズ
  // が異なるときは、現在の設定に合わせてリサイズする。拡大されると空白で
  // 埋められ、縮小されると切られた範囲のデータは失われる。
  // セーブファイルの名前を変更することによって、セーブデータを別サイズの
  // 設定で読み込むことができる。ただし切られた範囲のデータは失われるため、
  // とくにtpatを縮小するときは縮小後の範囲にあらかじめ寄せておいてから
  // セーブしておく必要があることに注意。
  // また、ロード後に一度dedupして標準配置に修正しないといけない。さもないと
  // 空白パターン割り当て時に使用中パターンを拾ってしまう可能性がある。
  string buf;
  bool load_v0 = false;
    // trueなら古いバージョンのバイナリデータをデシリアライズする
  sdl_load_file(fname, buf);
  debug_log("load voxel texture", fname, buf.size());
  if (buf.empty() && !fname_v0.empty()) {
    sdl_load_file(fname, buf);
    debug_log("load voxel texture", fname, buf.size());
    load_v0 = true;
  }
  if (!buf.empty()) {
    if (load_v0) {
      // 旧バージョンのフォーマット
      const v0 = from_string_compact_pod{tiled_voxel_texture_v0}(buf);
      vox.voxtile = v0.voxtile;
      const tmsz = (*v0.tmap_pri[0]).get_size_uvec3();
      const tpsz = (*v0.tpat_pri[0]).get_size_uvec3();
      vox.tmap_edit = make_tptr{texture_edit}();
      vox.tpat_edit = make_tptr{texture_edit}();
      function void conv_one(texture_data_mip_v0 const& src,
        texture_data_mip mutable& dest)
      {
        for (const i, const& t: src) {
          texture_reshaped tr;
          tr.set_size_l2(t->get_width(), t->get_height(), t->get_depth());
          dest.push_back(tr);
        }
      }
      conv_one(v0.tmap_pri, vox.tmap_edit->data[0]);
      conv_one(v0.tmap_sec, vox.tmap_edit->data[1]);
      conv_one(v0.tpat_pri, vox.tpat_edit->data[0]);
      conv_one(v0.tpat_sec, vox.tpat_edit->data[1]);
    } else {
      // 現行バージョンのフォーマット
      vox = from_string_compact_pod{tiled_voxel_texture}(buf);
      if (vox.tmap_edit->data_pri.size() > 0) {
        // 旧形式でシリアライズされたデータを読み込んだ。現行形式に変換
        vox.tmap_edit->data[0].swap(vox.tmap_edit->data_pri);
        vox.tmap_edit->data[1].swap(vox.tmap_edit->data_sec);
        vox.tpat_edit->data[0].swap(vox.tpat_edit->data_pri);
        vox.tpat_edit->data[1].swap(vox.tpat_edit->data_sec);
      }
    }
  }
  /*
  // ロードされたどうかにかかわらず、期待される形式になるように変換する
  {
    // 必要ならテクスチャをリサイズする
    if (vox.tmap_edit->data[0][0].get_size_l2_uvec3() != tmszl2) {
      debug_log("resize tmap from",
        vox.tmap_edit->data[0][0].get_size_l2_uvec3(), "to", tmszl2);
      vox.tmap_edit->resize_texture(tmszl2, enable_short_circuit);
    }
    if (vox.tpat_edit->data[0][0].get_size_l2_uvec3() != tpszl2) {
      debug_log("resize tpat from",
        vox.tpat_edit->data[0][0].get_size_l2_uvec3(), "to", tpszl2);
      vox.tpat_edit->resize_texture(tpszl2, enable_short_circuit);
    }
    // fillmapは、tmapの各座標に定義されたfillingを保持する。fillmapのサイズは
    // tmapと同じである必要があるので、異なっていればリサイズする。
    if (vox.fillmap.get_size_l2() != tmszl2) {
      debug_log("resize filling from", vox.fillmap.get_size_l2(),
        "to", tmszl2);
      vox.fillmap.set_size_l2(tmszl2);
    }
  }
  */
  //tiled_voxel_texture_parepare(vox, tmszl2, tpszl2, enable_short_circuit);
}

public function void
tiled_voxel_texture_prepare(tiled_voxel_texture mutable& vox,
  uvec3 tmszl2, uvec3 tpszl2, bool enable_short_circuit)
{
  // tiled_voxel_textureが期待される形式になるように変換する
  // 必要ならテクスチャをリサイズする
  if (vox.tmap_edit->data[0][0].get_size_l2_uvec3() != tmszl2) {
    debug_log("resize tmap from",
      vox.tmap_edit->data[0][0].get_size_l2_uvec3(), "to", tmszl2);
    vox.tmap_edit->resize_texture(tmszl2, enable_short_circuit);
  }
  if (vox.tpat_edit->data[0][0].get_size_l2_uvec3() != tpszl2) {
    debug_log("resize tpat from",
      vox.tpat_edit->data[0][0].get_size_l2_uvec3(), "to", tpszl2);
    vox.tpat_edit->resize_texture(tpszl2, enable_short_circuit);
  }
  // fillmapは、tmapの各座標に定義されたfillingを保持する。fillmapのサイズは
  // tmapと同じである必要があるので、異なっていればリサイズする。
  if (vox.fillmap.get_size_l2() != tmszl2) {
    debug_log("resize filling from", vox.fillmap.get_size_l2(),
      "to", tmszl2);
    vox.fillmap.set_size_l2(tmszl2);
  }
}

public function void
tiled_voxel_texture_save_file(tiled_voxel_texture const& vox,
  cstrref const& fname)
{
  sdl_save_file(fname, to_string_compact_pod(vox));
}


function void update_mipmap_one(
  farray{texture_reshaped, multiword_num_words} const& stex,
  texture_data_float const& svol,
  farray{texture_reshaped, multiword_num_words} mutable& dtex,
  texture_data_float mutable& dvol)
{
  const sz = stex[0].get_size_l2_uvec3();
  debug_log("update_mipmap_one size=", sz);
  mutable sz2 = make_uvec3(
    max(sz.x, 1u) - 1u,
    max(sz.y, 1u) - 1u,
    max(sz.z, 1u) - 1u);
  /*
  if (sz.x == 0u || sz.y == 0u || sz.z == 0u) {
    // pri0がすでに短辺1のテクスチャなのでそれ以上mipmapを作れない
    debug_log("update_mipmap_one: pri0 sz", sz);
  }
  */
  // dtexは各辺がstexの半分のサイズになるようにする
  for (const i, mutable& dtexw: dtex) {
    dtexw.set_size_l2(sz2.x, sz2.y, sz2.z);
  }
  const dsz = dtex[0].get_size_uvec3();
  for (const z: 0 .. dsz.z) {
    for (const y: 0 .. dsz.y) {
      for (const x: 0 .. dsz.x) {
        ivec3 p = make_ivec3(si(x), si(y), si(z));
        farray{texel_value, multiword_num_words} dval;
        shrink_voxel_value{1}(stex, svol, dval, dvol, p);
        /*
        if (!is_space_voxel(dpri_v)) {
          dpri_v = make_filled_voxel();
        }
        */
        for (const i, mutable& dtexw: dtex) {
          dtexw.set(ui(p.x), ui(p.y), ui(p.z), dval[i]);
        }
      }
    }
  }
}

public function void
tiled_voxel_texture_update_mipmap(tiled_voxel_texture const& vox)
{
  debug_log("update_mipmap_all begin");
  const bool enable_short_circuit = true; // FIXME?
  // tpatのmipmap更新
  // vox.voxtile.get_width_l2() + 1;
    // タイルサイズが16なら16,8,4,2,1の5枚
  const pat_mip_num = 8u + 1u;
    // scale値が0から7まで、最大タイルサイズ256
  for (const i, mutable& dataw: vox.tpat_edit->data) {
    dataw.resize(pat_mip_num, texture_reshaped());
  }
  varray{texture_data_float} tpat_vol;
  varray{texture_data_float} tmap_vol;
  tpat_vol.resize(pat_mip_num, texture_data_float());
  tmap_vol.resize(pat_mip_num, texture_data_float());
  debug_log("update_mipmap_all set_distance begin");
  set_distance(enable_short_circuit, vox.tpat_edit->data[0][0]);
    // tpatのmip0の距離を計算しなおす。(最適でないかもしれないので)
  function {t} void calc_volume_tex(t const& tex,
    texture_data_float mutable& voltex_r) {
    voltex_r.set_size_l2_uvec3(tex.get_size_l2_uvec3());
    range_foreach(tex.get_size_uvec3()) void (uint x, uint y, uint z) {
      const v = tex.get(x, y, z);
      float volume = texel_volume(v);
      voltex_r.set(x, y, z, volume);
    }
  }
  // tpat_vol[0]をtpat[0]から計算
  calc_volume_tex(vox.tpat_edit->data[0][0], tpat_vol[0]);
  // tpatのmip1以降を一つ若いmipから作る
  farray{texture_reshaped, multiword_num_words} stex;
  farray{texture_reshaped, multiword_num_words} dtex;
  for (const i: 1 .. vox.tpat_edit->data[0].size()) {
    {
      for (size_t j: 0 .. multiword_num_words) {
        stex[j].swap(vox.tpat_edit->data[j][i - 1]);
        dtex[j].swap(vox.tpat_edit->data[j][i]);
      }
      {
        const sz = tpat_vol[i - 1].get_size_l2_uvec3();
        if (sz.x == 0 || sz.y == 0 || sz.z == 0) {
          debug_log("tpat size too small", i, sz);
          throw runtime_error_template{"tpat_size_too_small"}("1");
        }
      }
      tpat_vol[i].set_size_l2_uvec3(tpat_vol[i - 1].get_size_l2_uvec3()
        - make_uvec3(1u, 1u, 1u));
      update_mipmap_one(stex, tpat_vol[i - 1], dtex, tpat_vol[i]);
      for (size_t j: 0 .. multiword_num_words) {
        stex[j].swap(vox.tpat_edit->data[j][i - 1]);
        dtex[j].swap(vox.tpat_edit->data[j][i]);
      }
    }
    set_distance(enable_short_circuit, vox.tpat_edit->data[0][i]);
    debug_log("update_mipmap_all tpat", i);
  }
  // tmapのmiplevel==0の代替となるテクスチャをstexに作成する。
  // またtmap_vol[0]を生成する。
  {
    // stexにtmap[0]をコピーする
    for (size_t i: 0 .. multiword_num_words) {
      stex[i] = vox.tmap_edit->data[i][0]; // copy
    }
    // tmap_vol[0]の大きさをstexからセット
    mutable& voltex = tmap_vol[0];
    voltex.set_size_l2_uvec3(stex[0].get_size_l2_uvec3());
    // tmap_vol[0]をtmap[0]から計算
    calc_volume_tex(stex[0], voltex);
    // node_reference以外の時はtmapのmip0のまま、node_referenceのときは
    // tpatの対応するmiplevelから値を拾ってきて書き込む
    const ssz = vox.tmap_edit->data[0][0].get_size_uvec3();
    debug_log("tmap mip0 ssz=", ssz);
    for (const z: 0 .. ssz.z) {
      for (const y: 0 .. ssz.y) {
        for (const x: 0 .. ssz.x) {
          farray{texel_value, multiword_num_words} val;
          for (const i, mutable& valw: val) {
            valw = stex[i].get(x, y, z);
          }
          float mutable volume = voltex.get(x, y, z);
          if (is_node_reference(val[0])) {
            // noderefなのでtpatから値を拾ってくる
            const p = decode_noderef_param(val[0]);
            const c = p.coord;
            const sc = p.scale;
            const lv = sc + 1;
            if (lv < pat_mip_num) {
              for (const i, mutable& valw: val) {
                valw = vox.tpat_edit->data[i][lv].get(c.x, c.y, c.z);
              }
              volume = tpat_vol[lv].get(c.x, c.y, c.z);
            } else {
              for (const i, mutable& valw: val) {
                val[i] = 0;
              }
              val[0] = make_filled_voxel();
              debug_log("update_mipmap: scale oor", lv, pat_mip_num);
            }
          }
          for (const i, const& valw: val) {
            stex[i].set(x, y, z, valw);
          }
          voltex.set(x, y, z, volume);
        }
      }
    }
  }
  // tmapのmiplevel==1の更新。stexにはtmap mip0代替のテクスチャがすでに
  // セットされている。
  {
    for (size_t i: 0 .. multiword_num_words) {
      dtex[i].swap(vox.tmap_edit->data[i][1]);
    }
    tmap_vol[1].set_size_l2_uvec3(tmap_vol[0].get_size_l2_uvec3()
      - make_uvec3(1u, 1u, 1u));
    update_mipmap_one(stex, tmap_vol[0], dtex, tmap_vol[1]);
    for (size_t i: 0 .. multiword_num_words) {
      dtex[i].swap(vox.tmap_edit->data[i][1]);
    }
  }
  set_distance(enable_short_circuit, vox.tmap_edit->data[0][1]);
  debug_log("update_mipmap_all tmap", 1);
  // tmapのmiplevel==2以降の更新
  for (const i: 2 .. vox.tmap_edit->data[0].size()) {
    debug_log("update_mipmap_all tmap", i);
    for (size_t j: 0 .. multiword_num_words) {
      stex[j].swap(vox.tmap_edit->data[j][i - 1]);
      dtex[j].swap(vox.tmap_edit->data[j][i]);
    }
    tmap_vol[i].set_size_l2_uvec3(tmap_vol[i - 1].get_size_l2_uvec3()
      - make_uvec3(1u, 1u, 1u));
    update_mipmap_one(stex, tmap_vol[i - 1], dtex, tmap_vol[i]);
    for (size_t j: 0 .. multiword_num_words) {
      stex[j].swap(vox.tmap_edit->data[j][i - 1]);
      dtex[j].swap(vox.tmap_edit->data[j][i]);
    }
    set_distance(enable_short_circuit, vox.tmap_edit->data[0][i]);
  }
  debug_log("update_mipmap_all end");
}

