private threaded namespace pgl3d::edit_mode::texutil "use-unsafe";
private import core::common -;
private import core::meta m;
private import glm -;
private import pgl3d::texture::texture -;
private import pgl3d::texture::voxel -;
private import pgl3d::texture::editable_voxel -;
private import pgl3d::engine::util -;
private import pgl3d::edit_mode::vecutil -;

private metafunction dbg_rotate{f} f; // no_operation;
private metafunction dbg_scale{f} no_operation;

public function float
texel_volume(texel_value v)
{
  if (is_space_voxel(v)) {
    return 0.0f;
  }
  if (is_filled(v)) {
    return 1.0f;
  }
  return 0.5f;
}

public function {for_mipmap, tsrc} void
shrink_voxel_value(tsrc const& stex, texture_data_float const& svol,
  farray{texel_value, multiword_num_words} mutable& dtex,
  texture_data_float mutable& dvol, ivec3 const& p)
{
  // dtexに、stexの各辺二倍の大きさのstexの位置(p*2)から縮小したテクセル値を
  // 計算してセットする。for_mipmapが真のときはmipmap計算の処理から呼ばれ、
  // そうでないときはedit_modeの編集処理から呼ばれる。
  // for_mipmapが真のときはついでにdvolの位置pにボリューム値を計算して書き込む。
  uint count_ref;
  uint count_filled;
  uint count_plane;
  uint count_sphere;
  uint count_color;
  float volume;
  uint count_color_emit;
  float volume_emit;
  plane_param pp;
  sphere_param sp;
  vec3 color;
  vec3 color_emit;
  uint color_metalness;
  uint color_emission;
  uint color_roughness;
  const x0 = p.x;
  const y0 = p.y;
  const z0 = p.z;
  for (const z: 0 .. 2) {
    for (const y: 0 .. 2) {
      for (const x: 0 .. 2) {
        const offset = make_ivec3(x * 2 - 1, y * 2 - 1, z * 2 - 1);
        const v = stex[0].get(ui(x0 * 2 + x), ui(y0 * 2 + y), ui(z0 * 2 + z));
        const vs = stex[1].get(ui(x0 * 2 + x), ui(y0 * 2 + y), ui(z0 * 2 + z));
        float tvol = 1.0f;
        if (m::is_true{for_mipmap}) {
          tvol = svol.get(ui(x0 * 2 + x), ui(y0 * 2 + y), ui(z0 * 2 + z));
        }
        if (is_space_voxel(v)) {
          continue; // 色決定の分母に含めない
        } else if (is_node_reference(v)) {
          ++count_ref;
        } else if (is_filled(v)) {
          ++count_filled;
        } else if (is_plane_node(v)) {
          mutable p = decode_plane_node(v);
          // debug_log("p", p);
          p.dist += dot_int(p.nor, offset);
          p.dist /= 2;
          ++count_plane;
          // debug_log("mod p", p);
          pp = p;
        } else if (is_sphere_node(v)) {
          mutable p = decode_sphere_node(v);
          p.center += map{ivec3, core::operator::mul}(offset, p.scale) / 2;
          p.center /= 2;
          p.dist /= 2;
          ++count_sphere;
          sp = p;
        }
        ++count_color;
        volume += tvol;
        const cpc = decode_color_param(vs);
        vec3 col;
        col.x = static_cast{float}(cpc.rgb.r);
        col.y = static_cast{float}(cpc.rgb.g);
        col.z = static_cast{float}(cpc.rgb.b);
        color += col * tvol;
        color_metalness += cpc.metalness;
        color_emission += cpc.emission;
        color_roughness += cpc.roughness;
        if (cpc.emission != 0) {
          vec3 ecol;
          ecol.x = static_cast{float}(cpc.rgb.r);
          ecol.y = static_cast{float}(cpc.rgb.g);
          ecol.z = static_cast{float}(cpc.rgb.b);
          color_emit += ecol * tvol;
          volume_emit += tvol;
        } else if (is_filled(v)) {
          // filledのときはprimaryのrgbに
          const cpe = decode_color_param(v);
          vec3 ecol;
          ecol.x = static_cast{float}(cpe.rgb.r);
          ecol.y = static_cast{float}(cpe.rgb.g);
          ecol.z = static_cast{float}(cpe.rgb.b);
          color_emit += ecol * tvol;
          volume_emit += tvol;
        }
      }
    }
  }
  uint nv = make_space_voxel();
  if (count_color > 0) {
    if (m::is_true{for_mipmap}) {
      nv = make_filled_voxel();
    } else {
      if (count_plane > 0) {
        nv = make_plane_node(pp, ivec3(), 1);
      } else if (count_sphere > 0) {
        sp /= count_sphere;
        nv = make_sphere_node(sp, ivec3(), 1, 0u);
      } else {
        nv = make_filled_voxel();
      }
    }
  }
  uint nc = 0;
  if (count_color > 0) {
    color_param cp_emit;
    color_param cp_albedo;
    if (volume_emit > 0.0f) {
      const denom = volume; // volume_emit;
      uvec3 uce = map{uvec3, static_cast{uint, float}}(color_emit / denom);
      cp_emit.emission = 1;
      cp_emit.rgb.r = static_cast{uchar}(uce.x);
      cp_emit.rgb.g = static_cast{uchar}(uce.y);
      cp_emit.rgb.b = static_cast{uchar}(uce.z);
    }
    {
      const denom = volume;
      uvec3 uc = map{uvec3, static_cast{uint, float}}(color / denom);
      cp_albedo.roughness = min(color_roughness, 15u);
      cp_albedo.metalness =
        static_cast{uchar}(color_metalness >= 4u ? 1u : 0u);
      cp_albedo.rgb.r = static_cast{uchar}(uc.x);
      cp_albedo.rgb.g = static_cast{uchar}(uc.y);
      cp_albedo.rgb.b = static_cast{uchar}(uc.z);
    }
    if (is_filled(nv) && volume_emit > 0.0f) {
      nv |= (encode_color_param(cp_emit) & 0x00ffffffu);
      // debug_log("nv emit ", to_hexstring(nv));
      nc = encode_color_param(cp_albedo);
    } else {
      nc = encode_color_param(cp_albedo);
    }
  }
  for (const i, mutable& dtexe : dtex) {
    dtexe = 0;
  }
  dtex[0] = nv;
  dtex[1] = nc;
  if (m::is_true{for_mipmap}) {
    dvol.set(ui(x0), ui(y0), ui(z0), volume / 8.0f);
  }
}

public function {f, t} bool
scale_voxel_value(cslice{texel_value} v, t mutable& tex, int x0, int y0,
  int z0)
{
  for (const z: 0 .. 2) {
    for (const y: 0 .. 2) {
      for (const x: 0 .. 2) {
        varray{texel_value} cvarr = v;
        if (is_plane_node(v[0])) {
          mutable p = decode_plane_node(v[0]);
          p.dist = p.dist * 2;
          cvarr[0] = make_plane_node(p, make_ivec3(
            x * 2 - 1,
            y * 2 - 1,
            z * 2 - 1),
            1);
        } else if (is_sphere_node(v[0])) {
          mutable p = decode_sphere_node(v[0]);
          p.dist = p.dist * 2;
          p.center = p.center * 2;
          cvarr[0] = make_sphere_node(p, make_ivec3(
            x * 2 - 1,
            y * 2 - 1,
            z * 2 - 1),
            1, 0u);
        } else if (is_node_reference(v[0])) {
          mutable p = decode_noderef_param(v[0]);
          if (p.scale > 0) {
            p.scale -= 1;
            mutable c = to_ivec3(p.coord) * 2;
            mutable offset = make_ivec3(
              x * 2 - 1,
              y * 2 - 1,
              z * 2 - 1);
            offset = p.get_imat3() * offset;
            c = (c * 2 + offset + 1) / 2;
            p.coord = to_uvec3(c);
            if (lt_all_uvec3(p.coord, make_uvec3(32, 32, 32))) {
              cvarr[0] = encode_noderef_param(p);
            } else {
              // パターン番号がエンコード可能な範囲を超えている
              return false;
            }
          } else { // p.scale == 0
            const m = p.get_imat3();
            // TODO: glmのtranspose使う
            const& s = m.to_cslice();
            const m_trans = make_imat3(
              s[0], s[3], s[6],
              s[1], s[4], s[7],
              s[2], s[5], s[8]);
            mutable offset = make_ivec3(
              x * 2 - 1,
              y * 2 - 1,
              z * 2 - 1);
            offset = m * offset;
            offset = (offset + 1) / 2;
            const c = p.coord * 2u + to_uvec3(offset);
            dbg_scale() {
              debug_log("offset", offset, "c", c);
            }
            cvarr[0] = f(c, 0, 0u);
            cvarr[0] = rotate_voxel_value(m_trans, cvarr[0]);
            for (texture_value_index i: 1 .. multiword_num_words) {
              cvarr[i] = f(c, i, 0u);
            }
          }
        }
        for (const i, mutable& cve: cvarr) {
          tex[i].set(ui(x0 + x), ui(y0 + y), ui(z0 + z), cve);
        }
      }
    }
  }
  return true;
}

public function {t} void
rotate_texture_range(imat3 const& m, t const& spri, t const& ssec,
  uvec3 const& sz, t mutable& dpri, t mutable& dsec)
{
  dbg_rotate() {
    debug_log("rotate_texture_range sz", spri.get_size_uvec3(),
      dpri.get_size_uvec3());
  }
  for (const z: 0 .. sz.z) {
    for (const y: 0 .. sz.y) {
      for (const x: 0 .. sz.x) {
        const vp = rotate_voxel_value(m, spri.get(x, y, z));
        const va = ssec.get(x, y, z);
        const p = rotate_offset(m, glm::make_ivec3(si(x), si(y), si(z)), sz);
        dbg_rotate() {
          debug_log("rotate_texture_range", x, y, z, p, vp, va);
        }
        const up = to_uvec3(p);
        // if (lt_all_uvec3(up, sz)) {
          dpri.set(ui(p.x), ui(p.y), ui(p.z), vp);
          dsec.set(ui(p.x), ui(p.y), ui(p.z), va);
        // }
      }
    }
  }
}

public function ivec3
rotate_offset(imat3 const& m, ivec3 const& v, uvec3 const& sz)
{
  const ssz = to_ivec3(sz) - glm::make_ivec3(1, 1, 1);
  const dsz = map{ivec3, abs{int}}(m * ssz);
  const vs = v * 2 - ssz;
  const vm = m * vs + dsz;
  const r = map{glm::ivec3, core::operator::div}(vm, glm::make_ivec3(2, 2, 2));
  // debug_log("rotate", sz, v, r);
  return r;
}

public function uint
rotate_voxel_value(imat3 const& m, uint v)
{
  dbg_rotate() {
    debug_log("rotate_voxel_value", to_hexstring(v), is_node_reference(v));
  }
  if (is_plane_node(v)) {
    mutable pp = decode_plane_node(v);
    pp.nor = m * pp.nor;
    v = encode_plane_node(pp);
  } else if (is_sphere_node(v)) {
    mutable sp = decode_sphere_node(v);
    sp.center = m * sp.center;
    sp.scale = map{ivec3, abs}(m * sp.scale);
    v = encode_sphere_node(sp);
  } else if (is_node_reference(v)) {
    mutable rp = decode_noderef_param(v);
    dbg_rotate() {
      debug_log("apply mat:", m.to_cslice());
      debug_log("oldtr mat:", rp.get_imat3().to_cslice(), "rp:", rp);
    }
    const rm = rp.get_imat3();
      // これはシェーダがtmatの座標からtpatの座標に変換する際に適用する変換
      // なので、表示の際にはtpatデータに対してこれの逆変換が適用されたパタン
      // が表示されることになる
    const& s = m.to_cslice();
    const m_trans = make_imat3(
      s[0], s[3], s[6],
      s[1], s[4], s[7],
      s[2], s[5], s[8]);
    rp.set_imat3(rm * m_trans);
    dbg_rotate() {
      debug_log("modtr mat:", rp.get_imat3().to_cslice(), "rp:", rp);
    }
    v = encode_noderef_param(rp);
  } else if (is_space_voxel(v)) {
    v = 0u;
  }
  return v;
}

