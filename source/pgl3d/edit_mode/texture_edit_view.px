private threaded namespace pgl3d::edit_mode::texture_edit_view "use-unsafe";
public import common -;
public import meta m;
private import pgl3d::edit_mode::common -;
private import pgl3d::edit_mode::update_dist -;
private import pgl3d::edit_mode::vecutil -;

public struct texture_edit_view(tptr{texture_edit} const edit)
{
  /* texture_edit_viewはtexture_editに加えて、カーソルの表示と、
   * カーソルより大きなz位置を非表示にする機能を追加したもの
   */
  public tptr{texture_edit} current_edit = edit;
  public varray{texture_reshaped} tview = copy_miplevel0(current_edit);
    // miplevel 0 だけをtviewにコピー
  private uint cursor_color_0 = 0xffffffff;
  private uint cursor_color_1 = 0xff00ffff;
  private filling cursor_filling;
  private uvec3 cursor_0 = make_uvec3(0, 0, tview[0].get_depth() - 1);
  private uvec3 cursor_1 = make_uvec3(0, 0, tview[0].get_depth() - 1);
  private modified_range modified;
  private uvec3 const tex_sz = tview[0].get_size_uvec3();
  private function uvec3 get_cursor() const
  {
    return cursor_0;
  }
  private function uvec3 get_cursor_mi() const
  {
    return map{uvec3, min}(cursor_0, cursor_1);
  }
  private function uvec3 get_cursor_mx() const
  {
    return map{uvec3, max}(cursor_0, cursor_1);
  }
  public function uvec3 clamp(uvec3 v) const
  {
    v = map{uvec3, min}(v, tex_sz - make_uvec3(1, 1, 1));
    return v;
  }
  public function pair{uvec3, uvec3} get_view_modified(bool reset_flag) {
    return modified.get_modified_merged(reset_flag);
  }
  public function void set_cursor_color(uint c0, uint c1, filling const& fi)
  {
    if (c0 == cursor_color_0 && c1 == cursor_color_1 && fi == cursor_filling) {
      return;
    }
    const c0_rgb = c0 & 0x00ffffffu;
    const c1_rgb = c1 & 0x00ffffffu;
    if (c0 == 0) {
      c1 = 0;
      /* editから書き戻すだけ。周囲15まで広げた領域を書き戻す */
      /* mx.zだけは15まで広げない */
      {
        const mi = map{ivec3, max}(
          to_ivec3(get_cursor_mi()) - make_ivec3(15, 15, 15),
          make_ivec3(0, 0, 0));
        const mx = map{ivec3, min}(
          to_ivec3(get_cursor_mx()) + make_ivec3(15, 15, 0),
          to_ivec3(tex_sz - make_uvec3(1, 1, 1)));
        const sz = mx + make_ivec3(1, 1, 1) - mi;
        // debug_log("scc cr", mi, mi, sz);
        texture_data_copy_range(tview[0], to_uvec3(mi),
          current_edit->data[0][0], to_uvec3(mi), to_uvec3(sz));
        modified.set_modified(mi, mx);
      }
      /* auxはカーソルの領域だけを書き戻す */
      for (const i: 1 .. tview.size()) {
        const mi = map{ivec3, max}(
          to_ivec3(get_cursor_mi()),
          make_ivec3(0, 0, 0));
        const mx = map{ivec3, min}(
          to_ivec3(get_cursor_mx()),
          to_ivec3(tex_sz - make_uvec3(1, 1, 1)));
        const sz = mx + make_ivec3(1, 1, 1) - mi;
        texture_data_copy_range(tview[i], to_uvec3(mi),
          current_edit->data[i][0], to_uvec3(mi), to_uvec3(sz));
      }
    } else {
      const sz = get_cursor_mx() + make_uvec3(1, 1, 1) - get_cursor_mi();
      // debug_log("rrdq", sz);
      /* 領域にc1色をセットし周囲の距離を更新する */
      const mimx = texture_data_fill_range_recalc_distance_quick(
        tview[0], get_cursor_mi(), sz, c1);
      if (fi.size().x == 0) {
        /* secには領域にc1のrgbをセット */
        texture_data_fill_range(tview[1], get_cursor_mi(), sz,
          c1_rgb);
      } else {
        /* filling選択中 */
        const mi = get_cursor_mi();
        range_foreach(sz) void (uint x, uint y, uint z) {
          uint c = 0x00808080u;
          if (x >= fi.sizes[0] + fi.sizes[1]) {
            c ^= 0x40;
          } else if (x >= fi.sizes[0]) {
            c ^= 0x20;
          }
          if (y >= fi.sizes[3] + fi.sizes[4]) {
            c ^= 0x4000;
          } else if (y >= fi.sizes[3]) {
            c ^= 0x2000;
          }
          if (z >= fi.sizes[6] + fi.sizes[7]) {
            c ^= 0x400000;
          } else if (z >= fi.sizes[6]) {
            c ^= 0x200000;
          }
          tview[1].set(mi.x + x, mi.y + y, mi.z + z, c);
        }
      }
      /* cursor_0だけはc0色をセット */
      tview[0].set(cursor_0.x, cursor_0.y, cursor_0.z, c0);
      tview[1].set(cursor_0.x, cursor_0.y, cursor_0.z, c0_rgb);
      modified.set_modified(mimx.first, mimx.second);
    }
    cursor_color_0 = c0;
    cursor_color_1 = c1;
    cursor_filling = fi;
  }
  public function void set_cursor_pos(uvec3 c0, uvec3 c1)
  {
    // viewのカーソル位置を変更する。上部穴開けの処理をする。mipmapは
    // 更新しないので、miplevel0以外のmipmapは正常に表示されないので注意。
    const saved_cursor_color_0 = cursor_color_0;
    const saved_cursor_color_1 = cursor_color_1;
    const saved_cursor_filling = cursor_filling;
    if (cursor_color_0 != 0) {
      set_cursor_color(0, 0, filling());
    }
    c0 = clamp(c0);
    c1 = clamp(c1);
    const mx = map{uvec3, max}(c0, c1);
    const mi = map{uvec3, min}(c0, c1);
    const cursor_mx = get_cursor_mx();
    uint const prev_z = cursor_mx.z;
    uint const next_z = mx.z;
    uint const blk_size = 64u;
    const prev_blk = map{uvec3, operator::div}(get_cursor(),
      make_uvec3(blk_size, blk_size, blk_size));
    const next_blk = map{uvec3, operator::div}(c0,
      make_uvec3(blk_size, blk_size, blk_size));
    const prev_blk_base = map{uvec3, operator::mul}(prev_blk,
      make_uvec3(blk_size, blk_size, blk_size));
    const next_blk_base = map{uvec3, operator::mul}(next_blk,
      make_uvec3(blk_size, blk_size, blk_size));
    if (prev_blk != next_blk) {
      /* まず古いブロックの穴を埋め戻す */
      {
        const rx = prev_blk_base.x;
        const ry = prev_blk_base.y;
        for (const i, mutable& tvieww: tview) {
        texture_data_copy_range(tview[i],
          make_uvec3(rx, ry, prev_z + 1), current_edit->data[i][0],
          make_uvec3(rx, ry, prev_z + 1),
          make_uvec3(blk_size, blk_size, tex_sz.z - prev_z - 1));
        }
        modified.set_modified(make_ivec3(si(rx), si(ry), si(prev_z + 1)), 
          make_ivec3(si(rx + blk_size) - 1, si(ry + blk_size) - 1,
            si(tex_sz.z) - 1));
      }
      /* 新しいブロックに穴をあける*/
      {
        const rx = next_blk_base.x;
        const ry = next_blk_base.y;
        const zmi = next_z + 1;
        const zmx = tex_sz.z - 1;
        texture_data_clear_range_recalc_distance_quick(tview[0],
          make_uvec3(rx, ry, zmi),
          make_uvec3(blk_size, blk_size, zmx + 1 - zmi));
        texture_data_fill_range(tview[1],
          make_uvec3(rx, ry, zmi),
          make_uvec3(blk_size, blk_size, zmx + 1 - zmi),
          0u);
        modified.set_modified(make_ivec3(si(rx), si(ry), si(zmi)),
          make_ivec3(si(rx + blk_size) - 1, si(ry + blk_size) - 1, si(zmx)));
      }
    } else if (prev_z > next_z) {
      /* zが小さくなった。新しいzより大きい範囲をクリアする */
      const zmi = next_z + 1;
      const zmx = min(prev_z + 15, tex_sz.z - 1);
        /* prev_z + 15までの空白領域は距離を更新 */
      const rx = next_blk_base.x;
      const ry = next_blk_base.y;
      texture_data_clear_range_recalc_distance_quick(tview[0],
        make_uvec3(rx, ry, zmi), make_uvec3(blk_size, blk_size, zmx + 1 - zmi));
      texture_data_fill_range(tview[1],
        make_uvec3(rx, ry, zmi), make_uvec3(blk_size, blk_size, zmx + 1 - zmi),
        0u);
      modified.set_modified(make_ivec3(si(rx), si(ry), si(zmi)),
        make_ivec3(si(rx + blk_size) - 1, si(ry + blk_size) - 1, si(zmx)));
    } else if (prev_z < next_z) {
      /* zが大きくなった。新しいzより小さい範囲を書き戻す。 */
      // debug_log("scp cr", prev_z + 1, prev_z + 1, next_z - prev_z);
      const rx = prev_blk_base.x;
      const ry = prev_blk_base.y;
      for (const i, mutable& tvieww: tview) {
        texture_data_copy_range(tvieww,
          make_uvec3(rx, ry, prev_z + 1), current_edit->data[i][0],
          make_uvec3(rx, ry, prev_z + 1),
          make_uvec3(blk_size, blk_size, next_z - prev_z));
      }
      const zmi = next_z + 1;
      const zmx = min(next_z + 15, tex_sz.z - 1);
        /* next_z + 15までの空白領域は距離を更新 */
      texture_data_clear_range_recalc_distance_quick(tview[0],
        make_uvec3(rx, ry, zmi), make_uvec3(blk_size, blk_size, zmx + 1 - zmi));
      modified.set_modified(make_ivec3(si(rx), si(ry), si(prev_z) + 1), 
        make_ivec3(si(rx + blk_size) - 1, si(ry + blk_size) - 1, si(zmx)));
    }
    cursor_0 = c0;
    cursor_1 = c1;
    if (saved_cursor_color_0 != 0) {
      set_cursor_color(saved_cursor_color_0, saved_cursor_color_1,
        saved_cursor_filling);
    }
  }
  public function uint edit_get(uvec3 const& pos, texture_value_index idx,
    size_t miplevel)
    const
  {
    return current_edit->get_mip(pos, idx, miplevel);
  }
  public function void edit_set(uvec3 const& pos, texture_value_index idx,
    uint v)
  {
    current_edit->set(pos, idx, v);
    merge_edit_view();
  }
  public function void edit_fill_range(uvec3 const& dpos, uvec3 const& sz,
    multiword v)
  {
    current_edit->fill_range(dpos, sz, v);
    merge_edit_view();
  }
  public function {t} void edit_copy_range(uvec3 const& spos, uvec3 const& sz,
    t mutable& dest, uvec3 const& dpos) const
  {
    current_edit->copy_range(spos, sz, dest, dpos);
  }
  public function {t} void edit_paste_range(uvec3 const& dpos, uvec3 const& sz,
    t const& src, uvec3 const& spos, uint index_mask, merge_mode const& mmod)
  {
    current_edit->paste_range(dpos, sz, src, spos, index_mask, mmod);
    merge_edit_view();
  }
  private function void merge_edit_view()
  {
    /* editの更新された領域をviewに反映させる */
    mutable edit_mod = current_edit->get_modified_merged(true);
    if (edit_mod.second.x == 0) {
      return;
    }
    /* 一旦穴を塞ぐためカーソルをz最大に移動 */
    const c0 = cursor_0;
    const c1 = cursor_1;
    const c0_0 = make_uvec3(c0.x, c0.y, tex_sz.z - 1);
    set_cursor_pos(c0_0, c1);
    for (const i, mutable& tvieww: tview) {
      texture_data_copy_range_merge_distance(tvieww, edit_mod.first,
        current_edit->data[i][0], edit_mod.first, edit_mod.second);
    }
    modified.set_modified(to_ivec3(edit_mod.first),
      to_ivec3(edit_mod.first + edit_mod.second - make_uvec3(1, 1, 1)));
    /* カーソルを元の位置に戻す */
    set_cursor_pos(c0, c1);
  }
}

private function varray{texture_reshaped}
copy_miplevel0(tptr{texture_edit} const& edit)
{
  varray{texture_reshaped} r;
    // miplevel 0 だけをtviewにコピー
  for (const i, mutable& dataw: edit->data) {
    r.push_back(dataw[0]);
  }
  return r;
}
