public threaded namespace pgl3d::drawer::drawer "use-unsafe";
public import core::common -;
private import pgl3d::opengl::shader_config -;
private import pgl3d::opengl::resource_pool -;
private import pgl3d::drawer::base -;
private import pgl3d::drawer::triangles -;
private import pgl3d::drawer::lineparticle -;
private import pgl3d::drawer::particle -;
private import pgl3d::drawer::particle_bb -;
private import pgl3d::drawer::rect2d -;
private import pgl3d::drawer::dbgui -;
private import pgl3d::drawer::dbgui2 -;
private import pgl3d::drawer::font2 -;
private import pgl3d::drawer::skybox -;
private import pgl3d::drawer::fxaa -;
private import pgl3d::drawer::blur -;
private import pgl3d::drawer::blur_h -;
private import pgl3d::drawer::ssao -;
private import pgl3d::drawer::motion_blur -;
private import pgl3d::drawer::passthrough -;
private import pgl3d::drawer::aberration -;
private import pgl3d::drawer::capture -;
private import pgl3d::drawer::setfb -;
private import pgl3d::drawer::chgmode -;
private import pgl3d::drawer::glslcomp -;
private import pgl3d::texture::atlas -;
private import pgl3d::edit_mode::common -;

public metafunction prepare_instance_data_funcptr
  pgl3d::drawer::base::prepare_instance_data_funcptr;

public metafunction prepare_instance_data_noop
  pgl3d::drawer::base::prepare_instance_data_noop;

public metafunction prepinstf_table
  pgl3d::drawer::base::prepinstf_table;

public metafunction drawer_shared
  pgl3d::drawer::base::drawer_shared;

public metafunction drawer_cond
  pgl3d::drawer::base::drawer_cond;

public metafunction textures_ptr
  pgl3d::drawer::base::textures_ptr;

public metafunction make_textures_ptr
  pgl3d::drawer::base::make_textures_ptr;

public metafunction tiled_voxel_texture
  pgl3d::edit_mode::tiled_voxel_texture::tiled_voxel_texture;

public metafunction tiled_voxel_texture_init
  pgl3d::edit_mode::tiled_voxel_texture::tiled_voxel_texture_init;

public metafunction tiled_voxel_texture_load_file
  pgl3d::edit_mode::tiled_voxel_texture::tiled_voxel_texture_load_file;

public metafunction tiled_voxel_texture_prepare
  pgl3d::edit_mode::tiled_voxel_texture::tiled_voxel_texture_prepare;

public metafunction tiled_voxel_texture_save_file
  pgl3d::edit_mode::tiled_voxel_texture::tiled_voxel_texture_save_file;

public metafunction tiled_voxel_texture_update_mipmap
  pgl3d::edit_mode::tiled_voxel_texture::tiled_voxel_texture_update_mipmap;

public function void
make_drawstep_triangles_parallax(ptr{bool} const& cond,
  shader_config const& glc, string const& datadir, drawer_shared const& ds,
  ptr{projection_info} const& pj, string const& smname, int num_shadowmaps,
  ptr{atlas} const& atl, int num_ssubtypes,
  varray{drawer_cond} mutable& solid_r,
  varray{varray{drawer_cond}} mutable& shadow_r,
  varray{drawer_cond} mutable& zpre_r)
{
  make_drawer_triangles_stype(cond, glc, datadir, ds, pj, 0, num_ssubtypes,
    smname, num_shadowmaps, atl, solid_r, shadow_r, zpre_r);
}

public function void
make_drawstep_triangles_raycast(ptr{bool} const& cond,
  shader_config const& glc, string const& datadir, drawer_shared const& ds,
  ptr{projection_info} const& pj, string const& smname, int num_shadowmaps,
  ptr{atlas} const& atl, int num_ssubtypes,
  varray{drawer_cond} mutable& solid_r,
  varray{varray{drawer_cond}} mutable& shadow_r,
  varray{drawer_cond} mutable& zpre_r)
{
  make_drawer_triangles_stype(cond, glc, datadir, ds, pj, 1, num_ssubtypes,
    smname, num_shadowmaps, atl, solid_r, shadow_r, zpre_r);
}

public function drawer_cond
make_drawstep_setfb(ptr{bool} const& cond, shader_config const& glc,
  drawer_shared const& ds, ptr{glm::uvec2} const& src_size,
  ptr{glm::uvec2} const& dst_size, string const& fbname, bool owner_flag,
  cslice{string} const& col, string const& dep, bool bilinear)
{
  return drawer_cond(cond,
    make_ptr{drawer_setfb}(glc, ds, src_size, dst_size, fbname,
      owner_flag, col, dep, bilinear));
}

public function drawer_cond
make_drawstep_chgmode(ptr{bool} const& cond, shader_config const& glc,
  drawer_shared const& ds, string const& mode)
{
  return drawer_cond(cond, make_ptr{drawer_chgmode}(glc, ds, mode));
}

public function drawer_cond
make_drawstep_lineparticle(ptr{bool} const& cond, shader_config const& glc,
  drawer_shared const& ds, ptr{projection_info} const& proj)
{ return drawer_cond(cond, make_ptr{drawer_lineparticle}(glc, ds, proj)); }

public function drawer_cond
make_drawstep_particle(ptr{bool} const& cond, shader_config const& glc,
  drawer_shared const& ds, ptr{glm::uvec2} const& psize)
{ return drawer_cond(cond, make_ptr{drawer_particle}(glc, ds, psize)); }

public function drawer_cond
make_drawstep_particle_bb(ptr{bool} const& cond, shader_config const& glc,
  drawer_shared const& ds, ptr{projection_info} const& proj)
{ return drawer_cond(cond, make_ptr{drawer_particle_bb}(glc, ds, proj)); }

public function drawer_cond
make_drawstep_rect2d(ptr{bool} const& cond, shader_config const& glc,
  drawer_shared const& ds)
{ return drawer_cond(cond, make_ptr{drawer_rect2d}(glc, ds)); }

public function drawer_cond
make_drawstep_dbgui(ptr{bool} const& cond, shader_config const& glc,
  drawer_shared const& ds, string const& sm_name)
{ return drawer_cond(cond, make_ptr{drawer_dbgui}(glc, ds, sm_name)); }

public function drawer_cond
make_drawstep_dbgui2(ptr{bool} const& cond, shader_config const& glc,
  drawer_shared const& ds, string const& sm_name)
{ return drawer_cond(cond, make_ptr{drawer_dbgui2}(glc, ds, sm_name)); }

public function drawer_cond
make_drawstep_font2(ptr{bool} const& cond, shader_config const& glc,
  drawer_shared const& ds, ptr{glm::uvec2} const& psize)
{ return drawer_cond(cond, make_ptr{drawer_font2}(glc, ds, psize)); }

public function drawer_cond
make_drawstep_skybox(ptr{bool} const& cond, shader_config const& glc,
  drawer_shared const& ds, ptr{projection_info} const& pj)
{ return drawer_cond(cond, make_ptr{drawer_skybox}(glc, ds, pj)); }

public metafunction drawer_fxaa_params pgl3d::drawer::fxaa::drawer_fxaa_params;

public function drawer_cond
make_drawstep_fxaa(ptr{bool} const& cond, shader_config const& glc,
  drawer_shared const& ds, ptr{drawer_fxaa_params} const& params,
  string const& src_fbname)
{
  return drawer_cond(cond, make_ptr{drawer_fxaa}(glc, ds, params, src_fbname));
}

public metafunction drawer_blur_params pgl3d::drawer::blur::drawer_blur_params;

public function drawer_cond
make_drawstep_blur(ptr{bool} const& cond, shader_config const& glc,
  drawer_shared const& ds, ptr{drawer_blur_params} const& params,
  string const& src_fbname)
{
  return drawer_cond(cond,
    make_ptr{drawer_blur}(glc, ds, params, src_fbname));
}

public metafunction drawer_blur_h_params
  pgl3d::drawer::blur_h::drawer_blur_h_params;

public function drawer_cond
make_drawstep_blur_h(ptr{bool} const& cond, shader_config const& glc,
  drawer_shared const& ds, ptr{drawer_blur_h_params} const& params,
  ptr{uint} const& white_count_ptr, bool direction_v,
  string const& src_fbname, string const& src2_fbname)
{
  return drawer_cond(cond,
    make_ptr{drawer_blur_h}(glc, ds, params, white_count_ptr, direction_v,
      src_fbname, src2_fbname));
}

public metafunction drawer_ssao_params pgl3d::drawer::ssao::drawer_ssao_params;

public function drawer_cond
make_drawstep_ssao(ptr{bool} const& cond, shader_config const& glc,
  drawer_shared const& ds, ptr{drawer_ssao_params} const& params,
  string const& src_fbname)
{
  return drawer_cond(cond,
    make_ptr{drawer_ssao}(glc, ds, params, src_fbname));
}

public function drawer_cond
make_drawstep_motion_blur(ptr{bool} const& cond, shader_config const& glc,
  drawer_shared const& ds, string const& src_fbname)
{
  return drawer_cond(cond, make_ptr{drawer_motion_blur}(glc, ds, src_fbname));
}

public function drawer_cond
make_drawstep_passthrough(ptr{bool} const& cond, shader_config const& glc,
  drawer_shared const& ds, string const& src_fbname)
{
  return drawer_cond(cond, make_ptr{drawer_passthrough}(glc, ds, src_fbname));
}

public function drawer_cond
make_drawstep_aberration(ptr{bool} const& cond, shader_config const& glc,
  drawer_shared const& ds, string const& src_fbname)
{
  return drawer_cond(cond, make_ptr{drawer_aberration}(glc, ds, src_fbname));
}

public function drawer_cond
make_drawstep_capture(ptr{bool} const& cond, shader_config const& glc,
  drawer_shared const& ds, ptr{glm::uvec2} const& psize,
  ptr{varray{uchar}} const& capt_data0, string const& src_fbname)
{
  return drawer_cond(cond,
    make_ptr{drawer_capture}(glc, ds, psize, capt_data0, src_fbname));
}

public metafunction glslcomp_image pgl3d::drawer::glslcomp::glslcomp_image;
public metafunction GL_READ_ONLY opengl::compat::GL_READ_ONLY;
public metafunction GL_WRITE_ONLY opengl::compat::GL_WRITE_ONLY;
public metafunction GL_READ_WRITE opengl::compat::GL_READ_WRITE;
public metafunction GL_RGBA8 opengl::compat::GL_RGBA8;
public metafunction GL_RGBA8UI opengl::compat::GL_RGBA8UI;

public function drawer_cond
make_drawstep_glslcomp(ptr{bool} const& cond, shader_config const& glc,
  cstrref const& csh_fname, ptr{uvec3} const& num_groups0,
  drawer_shared const& ds, cslice{glslcomp_image} const& images0,
  bool image_memory_barrier0)
{
  return drawer_cond(cond,
    make_ptr{drawer_glslcomp}(glc, csh_fname, num_groups0, ds, images0,
      image_memory_barrier0));
}

