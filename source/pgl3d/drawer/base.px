private threaded namespace pgl3d::drawer::base "export-unsafe";
public import core::common *;
public import core::pointer::raw *;
public import core::pointer::raw_unsafe *;
public import core::numeric::fpmath *;
public import glm *;
public import glm::raw *;
public import core::io::time *;
public import core::exception *;
public import core::meta m;
public import core::pointer::tfuncptr *;
public import opengl::base *;
public import opengl::compat *;
public import pgl3d::opengl::glresource *;
public import pgl3d::opengl::glshader *;
public import pgl3d::opengl::glvertex *;
public import pgl3d::opengl::glbuffer *;
public import pgl3d::opengl::shader_config *;
public import pgl3d::opengl::aggregated_ibuffer *;
public import pgl3d::opengl::gltexture *;
public import pgl3d::opengl::resource_pool *;
public import pgl3d::opengl::framebuffer *;
public import pgl3d::geometry::funcs *;
public import pgl3d::texture::texture *;
public import pgl3d::texture::voxel *;
public import pgl3d::texture::editable_voxel *;
public import pgl3d::engine::scene_node *;
public import pgl3d::engine::platform *;
public import pgl3d::engine::pglbase *;
public import pgl3d::engine::intern_pool *;
public import pgl3d::engine::util *;
public import pgl3d::stempl::stempl *;
public import pgl3d::stempl::stempl_eval *;
public import pgl3d::sdl::sdlutil *;
public import pgl3d::edit_mode::tiled_voxel_texture *;
public import pgl3d::edit_mode::edit_mode_texture *;

public metafunction textures_ptr ptr{tree_map{string, ptr{texture_data}}};
public metafunction make_textures_ptr
  make_ptr{tree_map{string, ptr{texture_data}}};

public struct draw_data(shader_config const& glc)
{
  public instances_all_format local_insts_allfmt;
  public varray{ptr{vertex_buffer}} vertex_buffers;
  public aggregated_ibuffer agg_ibuffer
    = aggregated_ibuffer(glc.enable_instanced, glc.enable_uniform_instancing);
    // 全インスタンスデータの転送先VBO
  public uint toplevel_fb;
  public option{cptr{gl_framebuffer}} cur_target_fb;
    // 現在bindされているframebuffer。noneのときはtoplevel_fbが描画対象
  public function size_t draw_all_vs_all_inst(glshader_i mutable& sdr,
    vbid_t vert_vbid, vbid_t inst_vbid) const
  {
    // 各drawstepから呼ばれる。glUseProgramなどは実行済み。
    vertex_buffer const& vb = *vertex_buffers[vert_vbid];
    instances_per_format const& instfmt = local_insts_allfmt[inst_vbid];
    return agg_ibuffer.draw_all_vs_all_inst(sdr, vb, instfmt);
      // vert_vbidで指定されたvertex_bufferの各vertex_set vsidについて、その
      // vsidの各instance(instfmt[vsid])をglDrawElementsなどで描画する。
  }
}

// drawer間で共有するリソース
public struct drawer_shared()
{
  public textures_ptr const textures = make_textures_ptr();
    // テクスチャデータを連想配列に保持し共有する
  public resource_pool_ptr const gl_resources = make_ptr{resource_pool}();
    // GLのテクスチャとフレームバッファを連想配列に保持し共有する
  public tptr{tiled_voxel_texture} const tvt
    = make_tptr{tiled_voxel_texture}();
  public ptr{edit_mode_texture} const emt
    = make_ptr{edit_mode_texture}();
  public ptr{intern_pool{vbid_t}} const vbid_pool
    = make_ptr{intern_pool{vbid_t}}();
  public ptr{intern_pool{vsid_t}} const vsid_pool
    = make_ptr{intern_pool{vsid_t}}();
  public function {t} string id_to_string(t v) const
  {
    if (m::eq{t, vbid_t}) {
      return vbid_pool->to_string(v) + "(" + to_string(v) + ")";
    } else if (m::eq{t, vsid_t}) {
      return vsid_pool->to_string(v) + "(" + to_string(v) + ")";
    } else {
      m::error{"invalid argument"};
    }
  }
}

public enum draw_step {
  draw_step_shadowmapping = 1,
  draw_step_shadow_pp = 2,
  draw_step_zprepass = 3,
  draw_step_solid = 4,
  draw_step_blend = 5,
  draw_step_postprocess = 6,
  draw_step_hud = 7,
}

public metafunction dgf_filler
  pure_callable_ptr{void, {bool, poly_t, mesh_index}};

public metafunction drawer_ptr ptr{pgldrawer_export_i};

public interface drawstep_i <pgldrawer_export_i>
{
  public function vbid_t get_drawer_vbid() const;
    /* drawer実装固有の名前を返す。subdrawerも固有のものを返す。 */
  public function vbid_t get_instances_vbid() const;
    /* これで示されたvbid用のインスタンスデータで描画する。通常は
     * get_drawer_vbid()と一致するが、複数のdrawer実装で同じインスタンス
     * データを描きたいときには代表するdrawer実装のvbid名を返す。 */
  public function vbid_t get_vertices_vbid() const;
    /* これで示された頂点データを使って描画する。通常はget_drawer_vbid()と
     * 一致するが、複数のdrawer実装で同じ頂点データを描きたいときには代表
     * するdrawer実装のvbid名を返す。 */
  public function prepare_instance_data_funcptr
    get_prepare_instance_data_funcptr() const;
    /* scene_nodeからインスタンスデータへ変換する関数オブジェクトを返す */
  public function ptr{vertex_buffer} make_vertex_buffer() const;
    /* 頂点データを作る??? */
  public function string builtin_vertex_set_name() const;
    /* empty if no builtin vertex set */
  public function void make_builtin_vertex_sets(vsid_t vsid,
    ptr{vertices} const& vptr);
    /* called when builtin_vertex_set_name is not empty */
  public function dgf_filler make_filler(ptr{vertices} const& vptr) const;
    /* 頂点データを1ポリゴン等ぶんセットする関数オブジェクトを返す。ジオメ
     * トリ生成関数から間接的にこの関数オブジェクトが呼ばれる。 */
  public function texture_info get_texture_info(cstrref const& name) const;
    /* 名前nameのテクスチャを持っていればそのサイズなどのデータを返す。
     * 廃止してresource poolに入れるようにする予定。 */
  /*
  public function void resize_screen(shader_config const& glc, int width,
    int height);
  */
  public function void resize_screen(shader_config const& glc);
    /* 画面サイズが変更されたときに呼ばれる */
  public function bool reload_shaders(shader_config const& glc);
    /* シェーダの再読込みが要求されたときに呼ばれる。無視してもよい。 */
  public function void draw_drawstep(draw_data mutable& data);
}

public struct drawstep_cond(
  ptr{bool} const& cond0, ptr{drawstep_i} const& step0)
{
  public ptr{bool} const cond = cond0;
  public ptr{drawstep_i} const step = step0;
}

public struct drawer_cond(
  ptr{bool} const& cond0, ptr{pgldrawer_export_i} const& step0)
{
  public ptr{bool} const cond = cond0;
  public ptr{pgldrawer_export_i} const step = step0;
}

public metafunction prepare_instance_data_funcptr
  tfuncptr_matching_function{prepare_instance_data_noop};

public pure function void prepare_instance_data_noop(
  scene_node const& sn, node_common_data mutable& ncd,
  instance_data mutable& idata)
{
}

public metafunction prepinstf_table varray{prepare_instance_data_funcptr};

public function {tattr} ptr{vertex_buffer}
make_tattr_vertex_buffer(bool points_mode, vbid_t instances_vbid, bool is_sub)
{
  return make_ptr{vertex_buffer}(static_cast{size_t}(num_float_struct{tattr}),
    points_mode, instances_vbid, is_sub);
}

public pure function {tattr} void
dgf_fill_tattr_internal(ptr{vertices} const& vptr, bool flat_flag,
  bool override_uvw, poly_t const& poly, mesh_index const& mp)
{
  // override_uvwは3dボクセルデータを貼り付けるときにはfalseが指定される。
  // 視差マッピングのときtrueが指定される。
  const sz = poly.size();
  if (sz < 3) { return; }
  glm::vec3 mutable nor;
  glm::vec3 mutable tang;
  if (flat_flag) {
    nor = normal_from_poly(poly, false);
    tang = (poly[1].pos - poly[0].pos).normalize();
  }
  mutable vtxs = darrayst{tattr}(sz, tattr());
    // これがGPUに渡す頂点データ
  for (const i: 0 .. sz) {
    mutable& v = vtxs[i];
    v.position = poly[i].pos;
    if (flat_flag) {
      v.normal = nor;
      v.tangent = glm::make_vec3(tang.x, tang.y, tang.z);
    } else {
      v.normal = poly[i].nor;
      v.tangent = poly[i].tan;
    }
    // v.uvw = glm::vec3();
    v.uvw = poly[i].uvw;
    v.aabb_or_tconv = poly[i].aabb_or_tconv;
    v.aabb_min = poly[i].aabb_min;
    v.aabb_max = poly[i].aabb_max;
    expand (f, j: m::symbol{tattr, "boundary_fields"}) {
    v.f = poly[i].boundary[j]; // v.boundary0 ...
    }
    // debug_log("vattr", v);
  }
  if (sz == 4 && override_uvw) {
    float scale = 64.0f; // FIXME? この値は何？
    const p0 = poly[0].pos * scale;
    const p1 = poly[1].pos * scale;
    const p2 = poly[2].pos * scale;
    const p3 = poly[3].pos * scale;
    const v01 = p1 - p0;
    const v32 = p2 - p3;
    const v03 = p3 - p0;
    const v12 = p2 - p1;
    const cos0103 = dot(v01, v03) / (length(v01) * length(v03));
    mutable pos0 = p0;
    if (cos0103 > 0.0f) {
      pos0 += v01.normalize() * (length(v03) * cos0103);
    }
    const cos0112 = dot(v01, v12) / (length(v01) * length(v12));
    mutable posx = p1;
    if (cos0112 < 0.0f) {
      posx += v01.normalize() * (length(v12) * cos0112);
    }
    const sin0103 = sqrt(1.0f - cos0103 * cos0103);
    const sin0112 = sqrt(1.0f - cos0112 * cos0112);
    const ylen = min(length(v03) * sin0103, length(v12) * sin0112);
    const vy_t = p3 - (p0 + v01.normalize() * (length(v03) * cos0103));
    // debug_log("vy_t dot v01", dot(vy_t, v01));
    const posy = pos0 + vy_t.normalize() * ylen;
    const vx = posx - pos0;
    const lx = length(vx);
    const ex = vx / lx;
    const vy = posy - pos0;
    const ly = length(vy);
    const ey = vy / ly;
    const margin = 1.0f / 1.0f;
    const lxm = floor(lx - margin);
    const xm = (lx - lxm) / 2.0f;
    const lym = floor(ly - margin);
    const ym = (ly - lym) / 2.0f;
    pos0 += ex * xm;
    pos0 += ey * ym;
    if (lxm > 0.0f && lym > 0.0f) {
      // debug_log("ex dot ey", dot(ex, ey));
      // debug_log("p0", p0);
      // debug_log("p1", p1);
      // debug_log("p2", p2);
      // debug_log("p3", p3);
      // debug_log("lx,ly", lx, ly, lxm, lym);
      function vec3 to_uvw(vec3 const& pos) {
        const v = pos - pos0;
        return make_vec3(dot(v, ex), dot(v, ey), 1.0f);
      }
      const aabb = make_vec4(0.0f, 0.0f, lxm, lym);
      vtxs[0].uvw = to_uvw(p0);
      vtxs[1].uvw = to_uvw(p1);
      vtxs[2].uvw = to_uvw(p2);
      vtxs[3].uvw = to_uvw(p3);
      vtxs[0].aabb_or_tconv = aabb;
      vtxs[1].aabb_or_tconv = aabb;
      vtxs[2].aabb_or_tconv = aabb;
      vtxs[3].aabb_or_tconv = aabb;
      // debug_log("vtxs", vtxs);
    }
  }
  vptr->push_polygon_distinct{tattr, 1}(poly, vtxs);
}

public pure function void
dgf_noop(ptr{vertices} const& vptr, bool flat_flag, poly_t const& poly,
  mesh_index const& mp)
{
}

public pure function dgf_filler
make_dgf_noop(ptr{vertices} const& vptr)
{
  return make_pure_callable_ptr{dgf_noop, 1}(vptr);
}

public pure function {t} void
buffer_append(varray{float} mutable& arr, t const& v)
{
  if (m::eq{t, float}) {
    arr.push_back(v);
  } else if (m::or{
    m::eq{t, glm::vec2},
    m::eq{t, glm::vec3},
    m::eq{t, glm::vec4},
    m::eq{t, glm::mat2},
    m::eq{t, glm::mat3},
    m::eq{t, glm::mat4}}) {
    arr.append(v.to_cslice());
  } else {
    expand (sym: m::field_names{t})
    {
      buffer_append(arr, v.sym);
    }
  }
}

public pure function void prepare_instance_data_default(
  scene_node const& sn, node_common_data mutable& ncd,
  instance_data mutable& idata)
{
  buffer_append(idata.instance_buffer, sn.trans);
}

/*
public struct reloadable_shader(option{ptr{reloader_i}} const& reloader0)
{
  public option{ptr{glshader_i}} shader;
  private option{ptr{reloader_i}} reloader = reloader0;
  public function void reload() {
    option{ptr{glshader_i}} p = reloader->load();
    if (case p.some) {
      shader = p;
    }
  }
  reload();
}

private interface reloader_i
{
  public function option{ptr{glshader_i}} load();
}

private struct {tuni, tinst, tvert}
reloader(cptr{shader_config} const& sconf0,
  tree_map{string, string} const& bindings0, string const& fn_v0,
  string const& fn_f0, string const& attrib_to_avoid0, int debug_level0)
{
  public function option{ptr{glshader_i}} load()
  {
    option{ptr{glshader_i}} r;
    string prog_v;
    string prog_f;
    try {
      prog_v = load_shader_program(*sconf, bindings, fn_v);
      prog_f = load_shader_program(*sconf, bindings, fn_f);
      r.some = make_glshader_ptr(prog_v, prog_f, attrib_to_avoid, debug_level);
    } catch (runtime_error ex) {
      sdl_log("failed to load shader '" + fn_v + "' '" + fn_f + "': "
        + ex.message());
    }
    return r;
  }
  private cptr{shader_config} sconf = sconf0;
  private tree_map{string, string} bindings = bindings0;
  private string fn_v = fn_v0;
  private string fn_f = fn_f0;
  private string attrib_to_avoid = attrib_to_avoid0;
  private int debug_level = debug_level0;
  private string prog_v;
  private string prog_f;
}
*/

public function string
load_shader_program(shader_config const& g,
  tree_map{string, string} const& bindings, cstrref const& fname)
{
  mutable sev = stempl_evaluator();
  const p = make_ptr{shader_config}(g);
  sev.add_global_object(p);
  for (const& k, const& m: bindings) {
    sev.add_global_const(k, m);
  }
  {
    string s;
    const se = load_stempl_internal(fname, 100, s);
    try {
      s = sev.eval(se);
    } catch (stempl_exception ex) {
      const offset = ex.offset;
      const& s_c = s;
      const s0 = s_c[0 .. offset];
      const s1 = s_c[offset .. s.size()];
      debug_log("load_shader_program:", ex.message(),
        "\n" + s0 + "[ERROR]" + s1);
      throw ex;
    }
    return s;
  }
}

private function stempl_expr
load_stempl_internal(cstrref const& fname, int rec_limit, string mutable& s_r)
{
  if (rec_limit < 1) {
    throw runtime_error_template{"load_stempl"}("recursion_limit_exceeded");
  }
  string src;
  if (!sdl_load_file(to_string("res/") + fname, src)) {
    throw runtime_error_template{"load_stempl_file"}(fname);
  }
  s_r = src;
  stempl_expr se;
  try {
    se = stempl_parse(src);
    extract_import(se, rec_limit);
  } catch (runtime_error ex) {
    string s = "(while parsing '" + fname + "')\n" + ex.message();
    throw runtime_error_template{"load_stempl"}(s);
  }
  return se;
}

private function void
extract_import(stempl_expr mutable& se, int rec_limit)
{
  if (const tcons: se.cons) {
    for (const i, mutable& e: tcons->args) {
      if (!case e.cons) {
        continue;
      }
      const ccons = e.cons;
      if (ccons->symbol != "import") {
        continue;
      }
      const fn = *ccons->args[0].literal; // TODO: error message
      string s;
      const ne = load_stempl_internal(fn, rec_limit - 1, s);
      e = ne;
    }
  }
}

