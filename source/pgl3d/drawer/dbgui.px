private threaded namespace pgl3d::drawer::dbgui "export-unsafe";
public import core::common -;
public import pgl3d::drawer::base -;
public import core::meta m;

private pure tsvaluetype struct dbgui_vertex_attributes()
{
  public glm::vec2 vert;
}

private pure tsvaluetype struct dbgui_instance_attributes()
{
}

private pure tsvaluetype struct dbgui_uniforms()
{
  public int sampler_sm; // array
  public int sampler_dbg; // array
}

public struct drawer_dbgui(shader_config const& glc0,
  drawer_shared const& ds, string const& sm_name0)
<drawstep_i>
{
  shader_config const glc = glc0;
  string const sm_name = sm_name0;
  metafunction tattr dbgui_vertex_attributes;
  ptr{resource_pool} res = pointer_downcast{ptr{resource_pool}}(
    ds.gl_resources);
  varray{cptr{gl_framebuffer}} shadowmap_fbs;
  varray{cptr{gl_texture}} textures;
  option{dbgui_shader_ptr} sdr_di;
  vbid_t const vbid_dbgui = ds.vbid_pool->intern("vbid_dbgui");
  vsid_t const vsid_generic_filter =
    ds.vsid_pool->intern("vsid_generic_filter");
  init();
  private function void init()
  {
    reload_shaders(glc);
  }
  public function vbid_t get_drawer_vbid() const { return vbid_dbgui; }
  public function vbid_t get_instances_vbid() const { return vbid_dbgui; }
  public function vbid_t get_vertices_vbid() const { return vbid_dbgui; }
  public function prepare_instance_data_funcptr
  get_prepare_instance_data_funcptr() const {
    return make_tfuncptr{prepare_instance_data_default}();
  }
  public function ptr{vertex_buffer} make_vertex_buffer() const {
    return make_tattr_vertex_buffer{tattr}(false, get_instances_vbid(), false);
  }
  public function string builtin_vertex_set_name() const {
    return "vsid_dbgui"; }
  public function void make_builtin_vertex_sets(vsid_t vsid,
    ptr{vertices} const& vptr)
  {
    farray{vertex_attr, 4} dummy_vattr;
    farray{dbgui_vertex_attributes, 4} vs;
    vs[0].vert = glm::make_vec2(-1.0, -1.0);
    vs[1].vert = glm::make_vec2( 1.0, -1.0);
    vs[2].vert = glm::make_vec2( 1.0,  1.0);
    vs[3].vert = glm::make_vec2(-1.0,  1.0);
    vptr->push_polygon_distinct{dbgui_vertex_attributes, 0}(dummy_vattr, vs);
  }
  public function dgf_filler make_filler(ptr{vertices} const& vptr) const
  {
    return make_dgf_noop(vptr);
  }
  public function texture_info get_texture_info(cstrref const& name) const
  {
    return texture_info();
  }
  public function void resize_screen(shader_config const& glc0)
  {
    uint i;
    while (true) {
      const name = sm_name + to_string(i);
      if (const f: res->framebuffers[name]) {
        shadowmap_fbs.push_back(f);
        // debug_log("dbgui: shadowmap", name);
      } else {
        break;
      }
      ++i;
    }
    textures.clear();
    if (const p: res->textures["font"]) {
      textures.push_back(p);
    }
    debug_log("dbgui sm", shadowmap_fbs.size(), "tex", textures.size());
  }
  public function bool reload_shaders(shader_config const& glc0)
  {
    option{dbgui_shader_ptr} s0;
    try {
      s0.some = init_dbgui_shader(glc);
    } catch (runtime_error ex) {
      debug_log("reload failed: " + ex.message());
      return false;
    }
    // debug_log("dbgui reload_shaders done");
    sdr_di.some = s0.some;
    return true;
  }
  public function void draw_drawstep(draw_data mutable& ddata)
  {
    glDisable(GL_DEPTH_TEST);
    glDepthMask(0);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    mutable& sdr = *sdr_di.some;
    glUseProgram(sdr.program);
    darrayst{int} sampler_smarr = darrayst{int}(
      static_cast{size_t}(shadowmap_fbs.size()), 0);
    darrayst{int} sampler_dbg = darrayst{int}(
      static_cast{size_t}(textures.size()), 0);
    for (const i: 0 .. shadowmap_fbs.size()) {
      glActiveTexture(static_cast{GLenum}(
        static_cast{int}(GL_TEXTURE8) + static_cast{int}(i)));
      glBindTexture(GL_TEXTURE_2D, shadowmap_fbs[i]->texture_depth.get());
      sampler_smarr[i] = 8 + static_cast{int}(i);
    }
    for (const i: 0 .. textures.size()) {
      glActiveTexture(static_cast{GLenum}(
        static_cast{int}(GL_TEXTURE0) + static_cast{int}(i)));
      glBindTexture(GL_TEXTURE_2D, textures[i]->texture_id.get());
      sampler_dbg[i] = 0 + static_cast{int}(i);
    }
    // debug_log("dbgui draw_drawstep", shadowmap_fbs.size());
    glUniform1iv(sdr.u_sampler_sm, static_cast{int}(sampler_smarr.size()),
      caddress(sampler_smarr[0]));
    glUniform1iv(sdr.u_sampler_dbg, static_cast{int}(sampler_dbg.size()),
      caddress(sampler_dbg[0]));
    const& bo = *ddata.vertex_buffers[get_vertices_vbid()];
    bo.draw_single_instance(vsid_generic_filter, sdr);
  }
  public function option{ptr{edit_control_i}} get_edit_mode() const
  {
    return option{ptr{edit_control_i}}();
  }
}

metafunction dbgui_shader_ptr
  ptr{glshader{
    dbgui_uniforms, dbgui_instance_attributes, dbgui_vertex_attributes}};

function dbgui_shader_ptr
init_dbgui_shader(shader_config const& g)
{
  tree_map{string, string} bnd;
  bnd["smsz"] = g.num_shadowmaps_str();
  bnd["shdowmap_resolution"] = to_string(g.shadowmap_resolution);
  const v = load_shader_program(g, bnd, "dbgui.vsh");
  const f = load_shader_program(g, bnd, "dbgui.fsh");
  return make_glshader_ptr{dbgui_uniforms, dbgui_instance_attributes,
    dbgui_vertex_attributes}(v, f, "", "", g.debug_level, "dbgui");
}

