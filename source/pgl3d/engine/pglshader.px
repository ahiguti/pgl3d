private namespace pgl3d::engine::pglshader "export-unsafe";
public import core::common -;
public import core::pointer::raw -;
public import core::numeric::fpmath -;
public import glm;
public import glm::raw;
public import core::io::time -;
public import core::exception -;
public import core::meta m;
public import core::pointer::tfuncptr -;
public import opengl::compat -;
public import pgl3d::geometry::funcs -;
public import pgl3d::opengl::glresource -;
public import pgl3d::opengl::glshader -;
public import pgl3d::opengl::glbuffer -;
public import pgl3d::opengl::shader_config -;
public import pgl3d::opengl::aggregated_ibuffer -;
public import pgl3d::opengl::resource_pool -;
public import pgl3d::opengl::framebuffer -;
public import pgl3d::drawer::base -;
public import pgl3d::drawer::setfb -;
public import pgl3d::engine::pglbase -;
public import pgl3d::engine::intern_pool -;

private metafunction debug_shape no_operation;

private import pgl3d::physics::collision_shape -;
  // shapeの半径計算のために make_voxel_shape を使う

public struct
pglshader(shader_config const& sconf0, drawer_shared const& ds0,
  varray{drawer_cond} const& drawsteps0, int width0,
  int height0)
<make_vertices_i>
{
  public shader_config const glc = sconf0;
  public drawer_shared ds = ds0;
  public ptr{resource_pool} const respool =
    pointer_downcast{ptr{resource_pool}}(ds.gl_resources);
  public draw_data ddata = draw_data(glc);
    // 頂点データのコピー、インスタンスデータを保持
  public varray{drawstep_cond} drawsteps = downcast_drawsteps(drawsteps0);
  public tree_map{vbid_t, drawstep_cond} drawsteps_by_vbid =
    get_drawsteps_by_vbid(ds, drawsteps0);
    // vbidからdrawstepを返す。vbidにinvalidを返すdrawstepは含まない。
    // 同じvbidを返すdrawstepが複数あるときは最初のものだけが入る。
  public tptr{prepinstf_table} const pidft = make_tptr{prepinstf_table}();
  private auto_vertexarray vtxarr;
  // resize_screen(width0, height0, width0, height0);
  public function void set_vertex_buffer(vbid_t vbid,
    ptr{vertex_buffer} const& p) {
    if (ddata.vertex_buffers.size() <= static_cast{size_t}(vbid)) {
      ddata.vertex_buffers.resize(vbid + 1u,
        make_ptr{vertex_buffer}(0u, false, vbid_invalid(), false));
    }
    ddata.vertex_buffers[vbid] = p;
  }
  public size_t lastpass_index = 0;
  init();
  private function void init()
  {
    debug_log("pglshader init");
    /*
    {
      int val;
      glGetInternalformativ(GL_TEXTURE_2D, GL_RGBA8, GL_TEXTURE_IMAGE_FORMAT,
        1, address(val));
      debug_log("GL_TEXTURE_IMAGE_FORMAT", val, static_cast{int}(GL_RGBA),
        static_cast{int}(GL_BGRA));
    }
    */
    /*
    {
      int val;
      glGetIntegerv(GL_MAX_VERTEX_UNIFORM_VECTORS, address(val));
      debug_log("GL_MAX_VERTEX_UNIFORM_VECTORS", val);
    }
    */
    /*
    {
      int val;
      glGetIntegerv(GL_DEPTH_BITS, address(val));
      debug_log("depth bits", val);
    }
    */
    if (m::is_true{is_gl3_or_gles3}) {
      vtxarr.generate();
      glBindVertexArray(vtxarr.get());
      debug_log("glBindVertexArray", vtxarr.get());
    }
    if (m::not{is_gles}) {
      farray{float, 2} arr;
      float step;
      glGetFloatv(GL_POINT_SIZE_RANGE, arr.to_rawptr());
      glGetFloatv(GL_POINT_SIZE_GRANULARITY, address(step));
      debug_log("GL_POINT_SIZE_RANGE", arr, step);
    }
    if (m::and{is_gl3_or_gles3, m::not{is_gles}}) {
      if (glc.enable_msaa != 0) {
        glEnable(GL_MULTISAMPLE);
      }
    }
    if (m::not{is_gles}) {
      /* OpenGL 3.3で削除されたはずだが、IntelドライバでGL_POINT_SPRITEを
       * 有効にしないと動作しないので有効にしておく。 */
      const vendor = cubptr_to_string(glGetString_nocheck(GL_VENDOR));
      if (find_substr(to_lower(vendor), "intel") != vendor.size()) {
        glEnable_nocheck(GL_POINT_SPRITE);
        const e = glGetError();
        debug_log("GL_POINT_SPRITE enabled e=", static_cast{int}(e));
      }
      glEnable(GL_VERTEX_PROGRAM_POINT_SIZE);
    }
    for (const vbid, const& p: drawsteps_by_vbid) {
      mutable& pidftv = *pidft;
      size_t j = vbid;
      if (pidftv.size() <= j) {
        pidftv.resize(j + 1, make_tfuncptr{prepare_instance_data_noop}());
      }
      pidftv[j] = p.step->get_prepare_instance_data_funcptr();
      set_vertex_buffer(vbid, p.step->make_vertex_buffer());
    }
    for (const i, const& p: drawsteps) {
      if (instanceof{drawer_setfb, drawstep_i}(*p.step)) {
        debug_log("is setfb", i);
        lastpass_index = i;
      }
    }
    debug_log("pglshader init done");
  }
  public function void prepare(node_factory mutable& nfac_r)
  {
    const sz = ds.vsid_pool->size();
    debug_log("pglshader prepare", sz);
    prepare_builtin_vertex_sets();
    prepare_vertex_buffers();
    prepare_insts_allfmt();
    prepare_node_factory(nfac_r);
  }
  private function void prepare_builtin_vertex_sets()
  {
    for (const vbid, const& p: drawsteps_by_vbid) {
      const name = p.step->builtin_vertex_set_name();
      if (name.empty()) {
        continue;
      }
      const vsid_vtx = make_vertices_assign_vsid(vbid, name);
      p.step->make_builtin_vertex_sets(vsid_vtx.first, vsid_vtx.second);
      debug_log("make builtin vertex set", name, vbid, vsid_vtx.first);
    }
  }
  private function void prepare_vertex_buffers()
  {
    for (const i, const& bo: ddata.vertex_buffers) {
      bo->create_vbo();
    }
  }
  private function void prepare_insts_allfmt()
  {
    ddata.local_insts_allfmt.resize(
      ddata.vertex_buffers.size(), instances_per_format());
    for (const i, const& bo: ddata.vertex_buffers) {
      mutable& instances = ddata.local_insts_allfmt[i];
      for (const j: 0 .. bo->vsid_to_vs.size()) {
        instances.push_back(instance_data());
      }
    }
  }
  private function void prepare_node_factory(node_factory mutable& nf) const
  {
    for (const vbid, const& vbp: ddata.vertex_buffers) {
      for (const& n, const vsid: vbp->vs_names) {
        if (vbp->is_sub_drawer) {
          // sub_drawer vbid must not used for joint_id
          debug_log("is_sub_drawer skipped", n, "vbid=", vbid);
          continue;
        }
        joint_id_type jid;
        jid.vbid = vbp->instances_vbid; // drawerのget_instances_vbid()値。
        jid.vsid = vsid;
        mutable& ent = nf.name_to_joint_id[n];
        if (ent.vbid != vbid_invalid()) {
          debug_log("warning: duplicated node name", n, ent, jid);
        }
        ent = jid;
      }
      nf.binfo.push_back(node_buffer_info());
      // node_factoryは、jointの先もつながったsceneオブジェクトを生成
      // するためのファクトリ。ここではその雛形を作っている。
      node_buffer_info mutable& nbi = nf.binfo[nf.binfo.size() - 1];
      nbi.vsid_to_vs.resize(vbp->vsid_to_vs.size(), node_vs_info());
      for (const i, const& ovsp: vbp->vsid_to_vs) {
        if (const& vsp: ovsp.some) {
          node_vs_info mutable& nvi = nbi.vsid_to_vs[i];
          for (const j, const& nj: vsp->vtxs->joints) {
            node_joint_info nji;
            nji.joint_id = find_joint_id_by_name(nj.joint_name);
            nji.trans = nj.trans;
            nvi.joints.push_back(nji);
          }
        }
      }
    }
  }
  public function joint_id_type find_joint_id_by_name(cstrref const& name)
    const
  {
    joint_id_type scene_id;
    for (const _, const& vbp: ddata.vertex_buffers) {
      // sub-drawer vbid must not used for joint_id
      if (!vbp->is_sub_drawer && vbp->has_name(name)) {
        scene_id.vbid = vbp->instances_vbid;
        scene_id.vsid = vbp->get_id_by_name(name);
        break;
      }
    }
    return scene_id;
  }
  public function cptr{vertices} get_nonempty_vertices(cstrref const& name)
    const
  {
    debug_log("get_nonempty_vertices", name);
    for (const i, const& vbp: ddata.vertex_buffers) {
      // allow sub-drawer vbid
      if (vbp->has_name(name)) {
        const vbid = static_cast{vbid_t}(i);
        const vsid = vbp->get_id_by_name(name);
        option{cptr{vertices}} const ovp =
          ddata.vertex_buffers[vbid]->get_vertices(vsid);
        if (const vp: ovp.some) {
          if (!vp->vertex_values.empty()) {
            debug_log("INFO: get_nonempty_vertices", name, "nonempty", vsid);
            return vp;
          } else {
            debug_log("WARNING: get_nonempty_vertices", name, "empty", vsid);
            return vp;
          }
        }
      }
    }
    throw runtime_error_template{"pglshader::get_nonempty_vertices"}("");
  }
  public function joint_id_type get_joint_id(cstrref const& name) const {
    return find_joint_id_by_name(name);
  }
  public function tree_map{string, joint_id_type} get_name_to_joint_id() const
  {
    tree_map{string, joint_id_type} r;
    for (const vbid, const& vb: ddata.vertex_buffers) {
      for (const& vsname, const vsid: vb->vs_names) {
        joint_id_type jid;
        jid.vbid = static_cast{vbid_t}(vbid);
        jid.vsid = vsid;
        r.insert(vsname, jid);
      }
    }
    return r;
  }
  public function tree_map{vsid_t, float} get_vs_radius() const
  {
    // 各vsidについて、頂点データに外接する球の半径を計算する
    tree_map{vsid_t, float} vs_radius;
    for (const i, const& vbp: ddata.vertex_buffers) {
      const vbid = static_cast{vbid_t}(i);
      if (vbp->is_sub_drawer) {
        continue;
      }
      for (const j, const& ovsp: vbp->vsid_to_vs) {
        const vsid = static_cast{vsid_t}(j);
        if (const& vsp: ovsp.some) {
          cptr{vertices} const vtxs = vsp->vtxs;
          if (!vtxs->vertex_attrs.empty() && vtxs->vertex_attrs[0].is_tconv) {
            // is_tconvはaabb_or_tconvフィールドがtconvを表しているとき真。
            // 半径を計算するために、いったんvoxel_shapeを作る。
            const voxsh = make_voxel_shape(vtxs->vertex_attrs, vtxs->elements);
            float radius = voxsh->get_radius();
            radius = max(radius, vs_radius[vsid]);
            vs_radius[vsid] = radius;
            debug_shape("shape_0", vsid, "radius", radius);
          } else {
            // is_tconvでないとき
            const& p = vtxs->positions;
            float radius = 0.0f;
            for (size_t i : 0 .. p.size() / 3) {
              const oi = i * 3;
              const vec = glm::make_vec3(p[oi], p[oi+1], p[oi+2]);
              debug_shape("shape_1", vsid, "vec", vec);
              radius = max(radius, glm::length(vec));
            }
            radius = max(radius, vs_radius[vsid]);
            debug_shape("shape_1", vsid, "radius", radius);
            vs_radius[vsid] = radius;
          }
        }
      }
    }
    return vs_radius;
  }
  public function pair{vsid_t, ptr{vertices}} make_vertices_assign_vsid(
    vbid_t vbid, cstrref const& shape_name)
  {
    vsid_t const vsid = ds.vsid_pool->intern(shape_name);
    debug_log("pglshader::make_vertices_assign_vsid", shape_name, vbid, vsid);
    return pair(vsid,
      ddata.vertex_buffers[vbid]->make_vs(vsid, shape_name)->vtxs);
  }
  public function void make_vertex_set(cslice{string} const& dr_names,
    cstrref const& shape_name, gf_poly const& expr)
  {
    // make_vertex_setはshape_nameで指定された名前のオブジェクトの頂点
    // データを登録する。exprには関数オブジェクトを指定し、その末端で
    // build_context_i::fill_or_joint()呼び出すことによってメッシュ又は
    // jointが登録される。dr_namesはメッシュを描画するdrawerのvbid名の
    // リスト。
    //
    // TODO: dr_names[0]はsubdrawerであってはならず、残りはsubdrawer
    // でなければならない。さもないと頂点セットの名前からvsidを引くとき
    // の一意性がなくなる。
    // TODO: shape_nameは未使用のものでなくてはならない。
    varray{ptr{vertices}} vptrs;
    varray{dgf_filler} fillers;
    for (const i, const& dr_name: dr_names) {
      const vbid = ds.vbid_pool->to_id(dr_name);
      debug_log("make_vertex_set", dr_name, shape_name);
      const dp = *drawsteps_by_vbid.equal_range(vbid);
      ptr{vertices} vptr = make_vertices_assign_vsid(vbid, shape_name).second;
      dgf_filler filler = dp.step->make_filler(vptr);
      vptrs.push_back(vptr);
      fillers.push_back(filler);
    }
    // debug_log("make_vertex_set", shape_name);
    ptr{build_context_i} ctx = make_ptr{build_context_impl}(vptrs, fillers);
    expr(*ctx, poly_t(), mesh_index());
  }
  public function void make_vertex_set_by_triangles(string const& dr_name,
    cstrref const& shape_name, cslice{vertex_attr} const& vattrs,
    cslice{float} const& verts, size_t nfpv, cslice{uint} const& elems)
  {
    const vbid = ds.vbid_pool->to_id(dr_name);
    ptr{vertices} vptr = make_vertices_assign_vsid(vbid, shape_name).second;
    vptr->set_triangles(vattrs, verts, nfpv, elems);
  }
  public function texture_info get_texture_info(cstrref const& name) const
  {
    texture_info r;
    for (const vbid, const& p: drawsteps_by_vbid) {
      r = p.step->get_texture_info(name);
      if (r.surface_w != 0) {
        break;
      }
    }
    return r;
  }
  public function vbid_t get_drawer_vbid(cstrref const& name) const
  {
    if (ds.vbid_pool->exists(name)) {
      return ds.vbid_pool->to_id(name);
    } else {
      return vbid_invalid();
    }
  }
  public function void resize_screen()
  {
    for (const i, const& pd: drawsteps) {
      pd.step->resize_screen(glc);
    }
  }
  public function bool reload_shaders()
  {
    bool r = true;
    for (const i, const& pd: drawsteps) {
      bool x = pd.step->reload_shaders(glc);
      r = r && x;
    }
    return r;
  }
}

public function varray{uint}
pglshader_draw_frame(pglshader mutable& pgs)
{
  return pglshader_draw_frame_internal(false, pgs);
}

public function varray{uint}
pglshader_draw_frame_lastpass(pglshader mutable& pgs)
{
  return pglshader_draw_frame_internal(true, pgs);
}

public function void
pglshader_frame_begin(pglshader mutable& pgs)
{
  pgs.ddata.agg_ibuffer.frame_begin(pgs.ddata.local_insts_allfmt);
}

public function void
pglshader_frame_end(pglshader mutable& pgs)
{
  pgs.ddata.agg_ibuffer.frame_end();
}

function varray{uint}
pglshader_draw_frame_internal(bool lastpass, pglshader mutable& pgs)
{
  const tick1 = SDL_GetTicks();
  int saved_fb = 0;
  glGetIntegerv(GL_FRAMEBUFFER_BINDING, address(saved_fb));
  pgs.ddata.toplevel_fb = static_cast{uint}(saved_fb);
  // lastpassが真なら、ディスプレイ直近のフレームバッファからの描画のみを
  // 実行する。これはdummy_flipのために使う。それ以外の描画ではlastpassは偽。
  size_t i = lastpass ? pgs.lastpass_index : 0;
  for (; i < pgs.drawsteps.size(); ++i) {
    const& ds = pgs.drawsteps[i];
    if (*ds.cond) {
      ds.step->draw_drawstep(pgs.ddata);
    }
  }
  const tick2 = SDL_GetTicks();
  return make_varray{uint}(tick1, tick2);
}

/* private */

private function tree_map{vbid_t, drawstep_cond}
get_drawsteps_by_vbid(drawer_shared const& ds,
  varray{drawer_cond} const& drawsteps)
{
  tree_map{vbid_t, drawstep_cond} r;
  for (const i: 0 .. drawsteps.size()) {
    const e = drawstep_cond(drawsteps[i].cond,
      pointer_downcast{ptr{drawstep_i}}(drawsteps[i].step));
    const vbid = e.step->get_drawer_vbid();
    if (vbid != vbid_invalid()) {
      r.insert(vbid, e); // 同じvbidがすでにあった場合はinsertされない
    }
  }
  return r;
}

private function varray{drawstep_cond}
downcast_drawsteps(varray{drawer_cond} const& drawsteps)
{
  varray{drawstep_cond} r;
  for (const i, const& e: drawsteps) {
    r.push_back(drawstep_cond(e.cond,
      pointer_downcast{ptr{drawstep_i}}(e.step)));
  }
  return r;
}

private pure struct
build_context_impl(varray{ptr{vertices}} mutable& vptrs0,
  varray{dgf_filler} mutable& fillers0)
  <build_context_i>
{
  public varray{ptr{vertices}} vptrs;
  public varray{dgf_filler} fillers;
  vptrs.swap(vptrs0);
  fillers.swap(fillers0);
  function void fill_or_joint(bool flat_flag, bool polyjoint, size_t n,
    string const& joint_name, poly_t const& poly, mesh_index const& mp) const
  {
    // ポリゴンメッシュ一枚をvptrs[n]に登録する。ポリゴン各頂点の頂点データ
    // を登録するか、jointの基準面または基準点として登録するか、のいずれか。
    if (joint_name.empty()) {
      // debug_log("fill n=", n, fillers.size());
      fillers[n](flat_flag, poly, mp);
        // fillers[n]は、polyを引数に取り、それをdrawer固有の形式の頂点データ
        // へと変換し、vptrs[n]へのpush_polygon_distinct呼び出しなどで頂点
        // データを登録する。頂点データはgpuに置かれるデータと物理エンジンが
        // 参照するためのものの両方を含む。
    } else if (polyjoint) {
      // debug_log("polyjoint n=", joint_name);
      for (const i, const& vptr: vptrs) {
        dgf_poly_joint_internal(vptr, joint_name, poly, mp);
      }
    } else {
      // debug_log("pointjoint n=", joint_name);
      for (const i, const& vptr: vptrs) {
        dgf_point_joint_internal(vptr, joint_name, poly, mp);
      }
    }
  }
  function vec2 assign_texture(cslice{vec2} const& bounary, float h)
  {
    // TODO: テクスチャの一部を割り当て
    return make_vec2(0.0, 0.0);
  }
}

private pure function void
dgf_poly_joint_internal(ptr{vertices} const& vptr, string const& joint_name,
  poly_t const& poly, mesh_index const& mp)
{
  // calculates normal/tangent from poly
  if (poly.size() < 1) { return; }
  node_joint e;
  e.trans = poly_trans(poly);
  e.joint_name = joint_name;
  vptr->push_joint(e);
}

private pure function void
dgf_point_joint_internal(ptr{vertices} const& vptr, string const& joint_name,
  poly_t const& poly, mesh_index const& mp)
{
  if (poly.size() < 1) { return; }
  const p = poly[0].pos;
  const ex = poly[0].nor.normalize();
  const ey = poly[0].tan.normalize();
  const ez = glm::cross(ex, ey);
  node_joint e;
  e.trans = glm::make_mat4(
    ex.x, ex.y, ex.z,  0.0,
    ey.x, ey.y, ey.z,  0.0,
    ez.x, ez.y, ez.z,  0.0,
     p.x,  p.y,  p.z,  1.0);
  e.joint_name = joint_name;
  vptr->push_joint(e);
}

