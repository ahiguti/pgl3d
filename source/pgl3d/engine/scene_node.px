public threaded namespace pgl3d::engine::scene_node;
public import core::common -;
public import core::numeric::fpmath -;
public import glm;
public import core::meta m;
public import core::exception -;
public import pgl3d::engine::util -;

public metafunction vsid_t distinct_uint{uint, "pgl3d::vsid"};
public metafunction vbid_t distinct_uint{uint, "pgl3d::vbid"};

public pure function vbid_t
vbid_invalid() { return static_cast{vbid_t}(-1); }
public pure function vsid_t
vsid_invalid() { return static_cast{vsid_t}(-1); }

public pure tsvaluetype struct
joint_id_type()
{
  public vbid_t vbid = vbid_invalid();
    // 描画するdrawerのget_instance_vbid()が返す値。複数のdrawer向け
    // バッファにvsidのデータが含まれていることがあるが、そのときでも
    // それらのdrawerはすべてget_instance_vbid()は同じ値を返すひつよう
    // がある。
  public vsid_t vsid = vsid_invalid();
    // 頂点データのvertex set, shapeを表す。複数のdrawer向けバッファ
    // にこのvsidのデータが含まれていることがある。
}

public pure struct
scene_node(joint_id_type const& joint_id0, glm::mat4 const& trans0)
{
  // FIXME: expects allocator always returns 16byte-aligned addresses
  public aligned_16{glm::mat4} trans = aligned_16{glm::mat4}(trans0);
  public joint_id_type joint_id = joint_id0;
  public varray{scene_node} children;
}

public pure mtvaluetype struct
node_factory
{
  public varray{node_buffer_info} binfo;
  public tree_map{string, joint_id_type} name_to_joint_id;
  public function scene_node
  make_node_by_id(joint_id_type const& joint_id, glm::mat4 const& trans) const
  {
    // debug_log("make_node_by_id", joint_id);
    mutable sn = scene_node(joint_id, trans);
    if (joint_id.vbid != vbid_invalid() &&
      joint_id.vsid != vsid_invalid())
    {
      for (const _, node_buffer_info const& nbi: binfo) {
        if (static_cast{size_t}(joint_id.vsid) < nbi.vsid_to_vs.size()) {
          const& nvi = nbi.vsid_to_vs[joint_id.vsid];
          for (const i, const& nji: nvi.joints) {
            const csn = make_node_by_id(nji.joint_id, nji.trans);
            sn.children.push_back(csn);
          }
        }
      }
    }
    return sn;
  }
  public function scene_node
  make_node_by_name(cstrref const& name, glm::mat4 const& trans) const
  {
    const rng = name_to_joint_id.equal_crange(name);
    const& id = *rng;
    debug_log("make_node_by_name", name, id);
    return make_node_by_id(id, trans);
  }
  public function joint_id_type get_joint_id_by_name(cstrref const& name) const
  {
    const rng = name_to_joint_id.equal_crange(name);
    return *rng;
  }
  public function joint_id_type get_joint_id_by_name_notrw(cstrref const& name)
    const
  {
    const rng = name_to_joint_id.equal_crange(name);
    if (!rng.empty()) {
      return *rng;
    }
    return joint_id_type();
  }
}

public pure mtvaluetype struct
node_buffer_info
{
  public varray{node_vs_info} vsid_to_vs;
}

public pure mtvaluetype struct
node_vs_info
{
  public varray{node_joint_info} joints;
}

public pure tsvaluetype struct
node_joint_info()
{
  public joint_id_type joint_id;
  public glm::mat4 trans = mat4_identity();
}

