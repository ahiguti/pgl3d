public threaded namespace pgl3d::texture::subtexture "use-unsafe";
public import common -;
public import meta m;
public import glm -;
public import sdl2::api_types -;
public import text::serialize::compact_pod -;
public import pgl3d::texture::texture -;
public import pgl3d::texture::editable_voxel -;
public import pgl3d::texture::voxel -;
public import pgl3d::texture::filling -;
public import pgl3d::engine::util -;
public import pgl3d::sdl::sdlutil -;

public valuetype struct subtexture {
  // テクスチャの一部をコピーペーストするために保持するデータ
  public metafunction num_tex multiword_num_words;
  public farray{texture_data, num_tex} tex;
  public uvec3 copy_size; // can be smaller than tex[0].
  public uvec3 cursor_offset;
    // カーソル位置がsubtextureの原点でないことがあるのでここに保持する
  public filling_texture filling_tex;
    // コピー元がfilling登録されているときにここにその情報を保持する
}

public valuetype struct subtexture_v1 {
  public texture_data tex_pri;
  public texture_data tex_sec;
  public uvec3 copy_size; // can be smaller than tex_pri.
  public uvec3 cursor_offset;
}

public function subtexture
subtexture_compat_deserialize(string const& s)
{
  subtexture r = from_string{subtexture}(s);
  if (r.tex[0].get_size_l2_uvec3() == uvec3()) {
    subtexture_v1 rv1 = from_string{subtexture_v1}(s);
    r.tex[0].swap(rv1.tex_pri);
    r.tex[1].swap(rv1.tex_sec);
  }
  r.filling_tex.set_size_l2_uvec3(r.tex[0].get_size_l2_uvec3());
  return r;
}

public function subtexture
make_subtexture(uvec3 const& sz)
{
  subtexture r;
  const sz_l2 = map{uvec3, integral_log2{uint}}(sz);
  for (uint i: 0 .. m::symbol{subtexture, "num_tex"}) {
    r.tex[i].set_size_l2_uvec3(sz_l2);
  }
  r.filling_tex.set_size_l2_uvec3(sz_l2);
  r.copy_size = sz;
  return r;
}

