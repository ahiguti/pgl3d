public threaded namespace pgl3d::texture::generator;
public import core::common -;
public import core::numeric::fpmath -;
public import pgl3d::numeric::interpolation -;
public import pgl3d::texture::texture -;
public import pgl3d::engine::util -;
public import glm -;
public import core::meta m;

metafunction enable_dbg 0;

metafunction dbg m::cond{enable_dbg, debug_log, no_operation};

metafunction ui static_cast{uint};
metafunction si static_cast{int};

// ランダムな形状を生成する。x方向については対称になる。
public pure function {t} void
generate_rand_spline(ptr{rand_generator} const& rndp,
  t mutable& tex, uvec3 const& texsz, ivec3 split, bool clear_flag,
  float thr_param)
{
  function double gen_rand_double()
  {
    // 0から1まで
    const ulonglong den = 0x100000000ul;
    return static_cast{double}(rndp->generate())
      / static_cast{double}(den);
  }
  function float gen_rand_float()
  {
    return static_cast{float}(gen_rand_double());
  }
  function ptr{cubic_b_spline} gen_spline(int sp, float center, float p,
    float co)
  {
    int rnd_rep = 2; // 大きいと正規分布に近づく
    varray{float} points;
    // points.push_back(-3.0f);
    // points.push_back(-1.0f);
    for (int i: 0 .. sp + 1) {
      float v;
      for (int j: 0 .. rnd_rep) {
        v += static_cast{float}(rndp->generate())
          / static_cast{float}(0x80000000u);
      }
      v /= static_cast{float}(rnd_rep);
      float ia = static_cast{float}(i * 2 - sp) / static_cast{float}(sp);
      ia = max(fabs(ia - center), 0.0f);
      float iv = 1.0f - pow(ia, p) * co * 0.3f;
      v *= iv;
      // v *= 1.0f - pow(ia, p) * co;
      // v = max(v, 0.0f);
      points.push_back(v);
      debug_log("i=", i, "ia=", ia, "v=", v);
    }
    // points.push_back(-1.0f);
    // points.push_back(-3.0f);
    float step = 2.0f / static_cast{float}(sp);
    dbg("gen_spline", points, "step=", step);
    return make_ptr{cubic_b_spline}(points, -1.0f, step);
  }
  vec3 const center = make_vec3(0.0f, 0.0f, 0.0f);
  const sx = gen_spline(split.x, center.x, 2.0f, 1.0f);
  const sy = gen_spline(split.y, center.y, 2.0f, 3.0f);
  const sz = gen_spline(split.z, center.z, 2.0f, 2.0f);
  // const st = gen_spline(0.3f);
  int xsz = static_cast{int}(texsz.x);
  int ysz = static_cast{int}(texsz.y);
  int zsz = static_cast{int}(texsz.z);
  varray{float} buf;
  buf.resize(static_cast{size_t}(xsz * ysz * zsz), 0.0f);
  function void set(int x, int y, int z, float v)
  {
    if (x >= xsz || y >= ysz || z >= zsz ||
        x < 0 || y < 0 || z < 0) {
      dbg("invalid index: ", x, y, z);
      return;
    }
    buf[static_cast{size_t}((z * ysz + y) * xsz + x)] = v;
  }
  function float get(int x, int y, int z)
  {
    if (x >= xsz || y >= ysz || z >= zsz ||
        x < 0 || y < 0 || z < 0) {
      dbg("invalid index: ", x, y, z);
      return 0.0f;
    }
    return buf[static_cast{size_t}((z * ysz + y) * xsz + x)];
  }
  function float reshape_x(float x)
  {
    const px = 0.6f; // 0 - 1.0
    const pe = 1.8f;
    const ax = fabs(x);
    float wx = 1.0f;
    if (ax <= px) {
      return x;
    } else {
      const vx = (ax - px) * (1.0f - px);
      wx = 1.0f + pe * vx;
    }
    x = x * wx;
    if (fabs(x) <= 1.0f) {
      return x;
    } else if (x > 0.0f) {
      return 1.0f;
    } else {
      return -1.0f;
    }
  }
  function float reshape_y(float y)
  {
    const py1 = -0.6f; // -1.0 .. 1.0
    const py2 = -0.1f; // -1.0 .. 1.0
    const pe1 = 0.8f; // 0 .. 1.0
    const pe2 = 1.5f; // 0 .. 1.0
    float wy = 1.0f;
    if (y >= py1 && y <= py2) {
      return y;
    } else if (y < py1) {
      const vy = (py1 - y) * (py1 - 1.0f);
      wy = 1.0f + pe1 * vy;
    } else {
      const vy = (y - py2) * (1.0f - py2);
      wy = 1.0f + pe2 * vy;
    }
    y = y * wy;
    if (fabs(y) <= 1.0f) {
      return y;
    } else if (y > 0.0f) {
      return 1.0f;
    } else {
      return -1.0f;
    }
  }
  function float reshape_z(float z)
  {
    return z;
  }
  float mi = +99999.0f;
  float mx = -99999.0f;
  for (int z: 0 .. zsz) {
    for (int y: 0 .. ysz) {
      for (int x: 0 .. xsz) {
        float xf = xsz == 1 ? 0.0f :
          static_cast{float}(x * 2 - xsz + 1)
          / static_cast{float}(xsz - 1);
        float yf = ysz == 1 ? 0.0f :
          static_cast{float}(y * 2 - ysz + 1)
          / static_cast{float}(ysz - 1);
        float zf = zsz == 1 ? 0.0f :
          static_cast{float}(z * 2 - zsz + 1)
          / static_cast{float}(zsz - 1);
        const& szp = *sz;
        dbg("z=", z, "zf=", zf, "pz=", szp(zf));
        float v = 0.0f;
        v += ((*sx)(xf) + (*sx)(-xf)) * 0.5f; // * (0.5f + xf * xf * 0.5f);
        v += (*sy)(yf); // * (0.2f + yf * yf * 0.5f);
        v += (*sz)(zf); // * (0.2f + zf * zf * 0.5f);
        // v += (((zf*0.2f+0.1f)*yf*0.3f+0.1f)*zf+0.2f)*yf+0.2f;
        /*
        v *= smooth_bump(xf * 0.6);
        v *= smooth_bump(yf * 0.6);
        v *= smooth_bump(zf * 0.6);
          */
        set(x, y, z, v);
        mi = min(mi, v);
        mx = max(mx, v);
        // dbg(xf, yf, zf, v, smooth_bump(xf * 2.5));
      }
    }
  }
  dbg("min", mi, "max", mx);
  // mi = max(mi, 0.0f);
  // dbg("min", mi, "max", mx);
  /*
  for (int z: 0 .. zsz) {
    for (int y: 0 .. ysz) {
      for (int x: 0 .. xsz) {
        float v = get(x, y, z);
        tex.set(ui(x), ui(y), ui(z), v > th ? 1u : 0u);
      }
    }
  }
  */
  for (int z: 0 .. zsz) {
    dbg("z=", z);
    for (int y: 0 .. ysz) {
      string s = "[";
      for (int x: 0 .. xsz) {
        float xf = xsz == 1 ? 0.0f :
          static_cast{float}(x * 2 - xsz + 1)
          / static_cast{float}(xsz - 1);
        float yf = ysz == 1 ? 0.0f :
          static_cast{float}(y * 2 - ysz + 1)
          / static_cast{float}(ysz - 1);
        float zf = zsz == 1 ? 0.0f :
          static_cast{float}(z * 2 - zsz + 1)
          / static_cast{float}(zsz - 1);
        // xf = reshape_x(xf);
        // yf = reshape_y(yf);
        float v = get(x, y, z);
        float rat = thr_coefficient(xf, yf, zf) * 0.5f;
        // float rat = 1.0f - ((*st)(xf) + (*st)(yf) + (*st)(zf)) * 0.5f;
        rat += thr_param;
        rat = min(max(rat, 0.0), 1.0);
        float th = mi * (1.0f - rat) + mx * rat;
        if (v > th) {
          tex.set(ui(x), ui(y), ui(z), 1u);
          s += "*";
        } else if (clear_flag) {
          tex.set(ui(x), ui(y), ui(z), 0u);
          s += " ";
        }
      }
      s += "]";
      dbg(s);
    }
  }
}

private pure function float smooth_bump(float x)
{
  float d = 1.0f - x * x;
  if (d <= 0.0f) {
    return 0.0f;
  }
  float v = exp(-1.0f / d);
  return v;
}

private pure function float thr_coefficient(float x, float y, float z)
{
  // return (x * x + y * y) / 2.0f;
  /*
  float v = max(max(fabs(x), fabs(y)), fabs(z));
  // float v = fabs(x) + fabs(y) + fabs(z);
  */
  // v = min(v, 1.0);
  // return pow(x, 2.0f);
  // return 0.0f;
  // float v = max(max(fabs(x), fabs(y)), fabs(z));
  // float v = max(max(x * x, y * y), z * z);
  float v = 1.5f * x * x + y * y + z * z;
  return 0.5f + v * 0.75f;
}

