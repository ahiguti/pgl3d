public threaded namespace pgl3d::texture::atlas;
public import core::common -;
public import glm -;
public import core::meta m;
public import pgl3d::texture::texture -;
public import pgl3d::engine::util -;

metafunction debug_size 1;

public pure mtvaluetype struct atlas_entry {
  public glm::vec3 position; // テクスチャ座標での始点座標(padding内側)
  public glm::uvec3 uposition_pad; // タイルマップ上の始点座標(padding含む)
  public glm::vec3 size; // テクスチャ座標での大きさ(padding内側)
  public glm::uvec3 usize_pad; // タイルマップ上の大きさ(padding含む)
  public varray{glm::vec2} boundary;
    // テクスチャ座標でのデータ生成範囲底面ポリゴン
  public float height; // テクスチャ座標でのデータ生成範囲高さ(TODO)
}

public pure multithreaded struct atlas /* (uvec3 tmap_size0) */ {
  private uvec3 tmap_size;
    // テクスチャのブロック単位の大きさ。xyz軸がそれぞれ2の冪。
  private uint tmap_size_max;
    // tmap_sizeの最大軸の値
  private vec3 offset_max;
    // テクスチャ座標の最大値
  private varray{atlas_entry} entries;
  private texture_data offset_to_entry;
  public function varray{atlas_entry} get_entries() const {
    return entries;
  }
  public function void reset(uvec3 tmap_size0) {
    tmap_size = tmap_size0;
    tmap_size_max = foldl{max}(expand(f: m::field_names{uvec3}; tmap_size.f));
    offset_max = map{vec3, static_cast{float, uint}}(tmap_size)
      / static_cast{float}(tmap_size_max);
    const tmsz_l2 = map{uvec3, integral_log2}(tmap_size);
    offset_to_entry.set_size_l2_uvec3(tmsz_l2);
    entries.push_back(atlas_entry());
      // entries[0]はダミー
  }
  public function atlas_entry assign(cslice{vec2} const& boundary,
    float height) {
    // boundaryはテクスチャ座標スケールの底面ポリゴン。この大きさが収まる
    // ようにテクスチャの一部を割り当てる。
    debug_log("atlas assign", boundary, height);
    const i = entries.size();
    const aabb0 = calc_aabb(boundary); // paddingなしのaabb
    const aabb0_sz2 = aabb0.second - aabb0.first;
    const padding = 0.5f / static_cast{float}(tmap_size_max);
    const aabb_pad = aabb_add_padding(aabb0, padding); // paddingを含むaabb
    const aabb_pad_sz2 = aabb_pad.second - aabb_pad.first;
    const aabb_pad_sz = make_vec3(aabb_pad_sz2.x, aabb_pad_sz2.y, height);
    const uaabb_pad_sz = map{uvec3, static_cast{uint, float}}(
      (aabb_pad_sz - 0.0001f) * static_cast{float}(tmap_size_max)) + 1u;
      // aabb_pad_szより小さくないボクセル単位の大きさ
    atlas_entry ent;
    ent.height = height;
    ent.boundary = boundary;
    ent.size = make_vec3(aabb0_sz2.x, aabb0_sz2.y, height);
    ent.usize_pad = uaabb_pad_sz;
    debug_log("atlas assign find_space", ent, "aabb0", aabb0, "aabb_pad",
      aabb_pad, "tmap_size_max", tmap_size_max);
    ent.uposition_pad = find_space(ent.usize_pad);
    ent.position = to_pos(ent.uposition_pad)
      + make_vec3(padding, padding, 0.0f);
    for (size_t i, mutable& bnd: ent.boundary) {
      bnd += make_vec2(ent.position.x, ent.position.y);
    }
    if (m::is_true{debug_size}) {
      const sc = static_cast{float}(tmap_size_max);
      debug_log("uposition_pad(min)", ent.uposition_pad);
      debug_log("uposition_pad(max)", ent.uposition_pad + ent.usize_pad);
      debug_log("position nopad(min)", ent.position * sc);
      debug_log("position nopad(max)", (ent.position + ent.size) * sc);
    }
    debug_log("atlas assign ent=", ent);
    entries.push_back(ent);
    return ent;
  }
  private function uvec3 to_upos(vec3 pos) const {
    return map{uvec3, static_cast{uint, float}}(
      pos * static_cast{float}(tmap_size_max));
  }
  private function vec3 to_pos(uvec3 upos) const {
    return map{vec3, static_cast{float, uint}}(upos)
      / static_cast{float}(tmap_size_max);
  }
  private function uvec3 find_space(uvec3 mutable& usize) {
    if (!le_all_uvec3(usize, tmap_size)) {
      debug_log("atlas find_space size", usize, tmap_size);
      throw runtime_error_template{"atlas"}("find_space size");
    }
    const offset_max = (tmap_size - usize) + 1u;
    bool found = false;
    uvec3 offset_found;
    range_foreach(offset_max) bool (uint ox, uint oy, uint oz) {
      bool is_space = true;
      range_foreach(usize) bool (uint x, uint y, uint z) {
        const v = offset_to_entry.get(ox + x, oy + y, oz + z);
        if (v != 0) {
          is_space = false;
          return false;
        }
        return true;
      }
      if (!is_space) {
        return true;
      }
      found = true;
      offset_found = make_uvec3(ox, oy, oz);
      const ent_id = static_cast{uint}(entries.size());
      range_foreach(usize) void (uint x, uint y, uint z) {
        offset_to_entry.set(ox + x, oy + y, oz + z, ent_id);
      }
      return false;
    }
    if (!found) {
      debug_log("atlas find_space nospace", usize, tmap_size);
      throw runtime_error_template{"atlas"}("find_space nospace");
    }
    return offset_found;
  }
}

private pure function pair{vec2, vec2}
aabb_add_padding(pair{vec2, vec2} const& aabb0, float padding)
{
  mutable aabb = aabb0;
  aabb.first -= padding;
  aabb.second += padding;
  return aabb;
}

private pure function pair{vec2, vec2} calc_aabb(cslice{vec2} const& vs)
{
  vec2 mi = vs[0];
  vec2 mx = vs[0];
  for (const i, const& v: vs) {
    expand (f: m::field_names{vec2}) {
      mi.f = min(mi.f, v.f);
      mx.f = max(mx.f, v.f);
    }
  }
  return pair(mi, mx);
}
