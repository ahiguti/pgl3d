public threaded namespace pgl3d::texture::editable_voxel "use-unsafe";
public import core::common -;
public import core::meta m;
public import core::meta::vararg va;
public import glm -;
private import sdl2::api_types -;
public import core::text::serialize::compact_pod -;
public import pgl3d::texture::texture -;
public import pgl3d::texture::voxel -;
public import pgl3d::engine::util -;
public import pgl3d::sdl::sdlutil -;
public import core::pointer::tfuncptr -;

public metafunction texture_reshaped array3_pot{varray{uint}, 0};
  // TODO: test reshape
public metafunction texture_dist_dirty array3_pot{varray{uchar}, 0};
public metafunction texture_data_mip varray{texture_reshaped};

private metafunction dbg_paste{f} no_operation;
private metafunction dbg_dist{f} no_operation;

public metafunction texture_value_index
  distinct_uint{uint, "texture_value_index"};

public metafunction multiword_num_words 2;
public metafunction multiword farray{texel_value, multiword_num_words};

public pure function {tlist} multiword
make_multiword(expand(va::arg_decls_bycref{tlist}))
{
  multiword r;
  uint i;
  expand (a: va::arg_names{m::size{tlist}}) {
    r[i] = a;
    ++i;
  }
  return r;
}

public pure multithreaded struct modified_range
{
  private uvec3 merged_modified_pos;
  private uvec3 merged_modified_sz;
  private varray{pair{ivec3, ivec3}} modified_arr;
  public function pair{uvec3, uvec3} get_modified_merged(bool reset_flag)
  {
    const r = pair{uvec3, uvec3}(merged_modified_pos, merged_modified_sz);
    if (reset_flag) {
      reset();
    }
    return r;
  }
  public function varray{pair{ivec3, ivec3}}
  get_modified_array(bool reset_flag)
  {
    const r = modified_arr;
    if (reset_flag) {
      reset();
    }
    return r;
  }
  private function void reset()
  {
    merged_modified_pos = uvec3();
    merged_modified_sz = uvec3();
    modified_arr.clear();
  }
  public function void set_modified(ivec3 mi, ivec3 mx)
  {
    modified_arr.push_back(pair(mi, mx));
    if (merged_modified_sz.x != 0) {
      mi = map{ivec3, min}(to_ivec3(merged_modified_pos), mi);
      mx = map{ivec3, max}(
        to_ivec3(
          merged_modified_pos +
          merged_modified_sz -
          make_uvec3(1, 1, 1)),
        mx);
    }
    merged_modified_pos = to_uvec3(mi);
    merged_modified_sz = to_uvec3(mx + make_ivec3(1, 1, 1) - mi);
  }
}

private pure function uint
merge_mode_f_opaque(uint ov, uint v)
{
  return v;
}

private pure function uint
merge_mode_f_or_ori(uint ov, uint v)
{
  return is_space_voxel(ov) ? v : ov;
}

public metafunction merge_mode
  tfuncptr_matching_function{merge_mode_f_opaque};
public metafunction merge_mode_opaque
  make_tfuncptr{merge_mode_f_opaque};
public metafunction merge_mode_or_ori
  make_tfuncptr{merge_mode_f_or_ori};

public pure multithreaded struct
texture_edit()
{
  /* 更新可能なボクセルデータのテクスチャを保持するクラス。更新されたら
   * raycast用の「埋め込み距離」を再計算する。*/
  public metafunction tex_mip_words
    farray{texture_data_mip, multiword_num_words};
  public texture_data_mip data_pri; // 旧データ読み込み用。現行では不使用
  public texture_data_mip data_sec; // 旧データ読み込み用。現行では不使用
  public texture_data grid_dummy; // もう使っていないはず
  public tex_mip_words data;
  private modified_range modified;
  public function pair{uvec3, uvec3} get_modified_merged(bool reset_flag)
  {
    return modified.get_modified_merged(reset_flag);
  }
  public function varray{pair{ivec3, ivec3}}
  get_modified_array(bool reset_flag)
  {
    return modified.get_modified_array(reset_flag);
  }
  public function void resize_texture(uvec3 szl2, bool enable_short_circuit)
  {
    const& data00sz = data[0][0].get_size_l2_uvec3();
    debug_log("texture_edit resize_texture: ", szl2, data00sz);
    tex_mip_words ttex;
    const nmip = data[0].size();
    for (const i, mutable& ttex_w: ttex) {
      ttex_w.resize(nmip, texture_reshaped());
    }
    mutable s = szl2;
    for (const i: 0 .. nmip) {
      for (const j, mutable& ttex_w: ttex) {
        ttex_w[i].set_size_l2(s.x, s.y, s.z);
      }
      if (s.x > 0u) { s.x -= 1u; }
      if (s.y > 0u) { s.y -= 1u; }
      if (s.z > 0u) { s.z -= 1u; }
    }
    debug_log("texture_edit resize: copy");
    {
      const msz = map{uvec3, min}(data[0][0].get_size_uvec3(),
        ttex[0][0].get_size_uvec3());
      range_foreach(msz) void (uint x, uint y, uint z) {
        for (const i, mutable& ttex_w: ttex) {
          ttex_w[0].set(x, y, z, data[i][0].get(x, y, z));
        }
      }
    }
    for (const i, mutable& ttex_w: ttex) {
      data[i].swap(ttex_w);
    }
    debug_log("texture_edit resize: recalc distance");
    recalc_distance_range(enable_short_circuit, uvec3(),
      data[0][0].get_size_uvec3(), false);
  }
  public function uint get_mip(uvec3 pos, texture_value_index idx,
    size_t miplevel)
  {
    // debug_log("get_mip", pos, idx, miplevel);
    if (miplevel >= data[0].size()) {
      miplevel = data[0].size() - 1;
    }
    const datasz = data[0][0].get_size_uvec3();
    if (!lt_all_uvec3(pos, datasz)) {
      // debug_log("get_mip range error", pos, datasz);
      return 0u;
    }
    pos.x >>= static_cast{uint}(miplevel);
    pos.y >>= static_cast{uint}(miplevel);
    pos.z >>= static_cast{uint}(miplevel);
    const i = static_cast{size_t}(idx);
    return data[i][miplevel].get(pos.x, pos.y, pos.z);
  }
  public function uint get(uvec3 const& pos, texture_value_index idx)
  {
    return get_mip(pos, idx, 0u);
  }
  private function void set_space_mip(size_t miplevel, uvec3 const& pos)
  {
    data[0][miplevel].set(pos.x, pos.y, pos.z, 0u);
    if (miplevel + 1 >= data[0].size()) {
      return;
    }
    const p2 = make_uvec3((pos.x / 2) * 2, (pos.y / 2) * 2, (pos.z / 2) * 2);
    bool is_space = true;
    for (const z: 0 .. 2u) {
      for (const y: 0 .. 2u) {
        for (const x: 0 .. 2u) {
          const v = data[0][miplevel].get(p2.x + x, p2.y + y, p2.z + z);
          is_space &= is_space_voxel(v);
        }
      }
    }
    if (is_space) {
      const p = make_uvec3(pos.x / 2, pos.y / 2, pos.z / 2);
      set_space_mip(miplevel + 1, p);
    }
  }
  public function void set(uvec3 const& pos, texture_value_index idx, uint v)
  {
    const datasz = data[0][0].get_size_uvec3();
    if (!lt_all_uvec3(pos, datasz)) {
      return;
    }
    // debug_log("texture_edit set", pos);
    v = (idx == 0 && is_space_voxel(v)) ? 0u : v;
    if (idx == 0) {
      if (v == 0) {
        // 空白にする。mipmapも必要なら更新する
        set_space_mip(0, pos);
      } else {
        data[0][0].set(pos.x, pos.y, pos.z, v);
      }
    } else {
      data[static_cast{size_t}(idx)][0].set(pos.x, pos.y, pos.z, v);
    }
    if (idx == 0) {
      recalc_distance_range(true, pos, make_uvec3(1, 1, 1), v == 0);
    }
  }
  public function void fill_range(uvec3 const& dpos, uvec3 const& sz,
    multiword v)
  {
    const datasz = data[0][0].get_size_uvec3();
    if (!lt_all_uvec3(dpos, datasz)) {
      return;
    }
    if (is_space_voxel(v[0])) {
      v = make_multiword(make_space_voxel());
    }
    for (const i, mutable& dataw: data) {
      texture_data_fill_range(dataw[0], dpos, sz, v[i]);

    }
    dbg_dist() {
      debug_log("fill_range", dpos, sz);
    }
    recalc_distance_range(true, dpos, sz, is_space_voxel(v[0]));
  }
  public function {t} void copy_range(uvec3 const& spos, uvec3 sz,
    t mutable& dest, uvec3 const& dpos) const
  {
    // destはtextureの配列で、各要素がmultiwordの各wordのtexture。
    sz = clamp_size(data[0][0], spos, sz);
    sz = clamp_size(dest[0], dpos, sz);
    if (empty_range(sz)) {
      return;
    }
    // debug_log("copy_range", spos, sz, dpos);
    for (const i, const& dataw: data) {
      texture_data_copy_range(dest[i], dpos, dataw[0], spos, sz);
    }
  }
  public function {t} void paste_range(uvec3 const& dpos, uvec3 sz,
    t const& src, uvec3 const& spos, uint index_mask,
    merge_mode const& mmod)
  {
    // srcはtextureの配列で、各要素がmultiwordの各wordのtexture。
    sz = clamp_size(src[0], spos, sz);
    sz = clamp_size(data[0][0], dpos, sz);
    if (empty_range(sz)) {
      return;
    }
    dbg_paste() {
      debug_log("editable_voxel paste_range", spos, sz, dpos, index_mask);
    }
    bool shape_modified = false;
    for (const i, mutable& dataw: data) {
      if ((index_mask & (1u << i)) != 0) {
        if (i == 0) {
          shape_modified = texture_data_copy_range_check_modified(
            dataw[0], dpos, src[i], spos, sz, mmod);
        } else {
          texture_data_copy_range_secondary(data[0][0], dataw[0], dpos,
            src[i], spos, sz);
        }
      }
    }
    if (shape_modified) {
      dbg_paste() {
        debug_log("editable_voxel paste_range recalc dist", spos, sz, dpos);
      }
      recalc_distance_range(true, dpos, sz, false);
    } else {
      modified.set_modified(to_ivec3(dpos),
        to_ivec3(dpos + sz - make_uvec3(1, 1, 1)));
    }
  }
  private function void recalc_distance_range(bool enable_short_circuit,
    uvec3 const& pos, uvec3 const& sz, bool clear_flag)
  {
    /* 領域の更新に伴う距離の更新をおこなう。領域が全て空白になったと
     * わかっている場合はclear_flagを真にしてよい。*/
    dbg_dist() {
      debug_log("recalc_distance_range", pos, sz, clear_flag);
    }
    ivec3 mod_mi = to_ivec3(pos);
    ivec3 mod_mx = mod_mi + to_ivec3(sz) - make_ivec3(1, 1, 1);
    dbg_dist() {
      debug_log("recalc_distance_range nogrid", mod_mi, mod_mx);
    }
    if (clear_flag) {
      /* 遅すぎるので更新しない。うまい実装があるか? */
      /* update_distance(enable_short_circuit, data[0][0], mod_mi, mod_mx,
       *   clear_flag); */
      modified.set_modified(mod_mi, mod_mx);
    } else {
      update_distance(enable_short_circuit, data[0][0], mod_mi, mod_mx,
        clear_flag);
      modified.set_modified(mod_mi, mod_mx);
    }
  }
}

public pure multithreaded struct
texture_update()
{
  // テクスチャ更新の情報をスレッド越しに渡すための構造体。詳細後でつめる。
  public glm::uvec3 pos;
  public uint value;
}

public metafunction texture_updates varray{texture_update};

/* private */

metafunction ui static_cast{uint};
metafunction si static_cast{int};

private pure function {t0, t1} bool texture_data_copy_range_check_modified(
  t0 mutable& dest,
  uvec3 const& dpos, t1 const& src, uvec3 const& spos,
  uvec3 const& sz, merge_mode const& mmod)
{
  bool modified = false;
  for (uint z: 0 .. sz.z) {
    for (uint y: 0 .. sz.y) {
      for (uint x: 0 .. sz.x) {
        const v = src.get(spos.x + x, spos.y + y, spos.z + z);
        const ov = dest.get(dpos.x + x, dpos.y + y, dpos.z + z);
        const nv = mmod(ov, v);
        modified |= (ov != nv);
        dest.set(dpos.x + x, dpos.y + y, dpos.z + z, nv);
      }
    }
  }
  return modified;
}

private pure function {t0, t1} void texture_data_copy_range_secondary(
  t0 const& dest_pri, t0 mutable& dest_sec,
  uvec3 const& dpos, t1 const& src_sec, uvec3 const& spos,
  uvec3 const& sz)
{
  for (uint z: 0 .. sz.z) {
    for (uint y: 0 .. sz.y) {
      for (uint x: 0 .. sz.x) {
        const ov = dest_pri.get(dpos.x + x, dpos.y + y, dpos.z + z);
        if (is_space_voxel(ov) || is_node_reference(ov)) {
          continue;
        }
        const v = src_sec.get(spos.x + x, spos.y + y, spos.z + z);
        dest_sec.set(dpos.x + x, dpos.y + y, dpos.z + z, v);
      }
    }
  }
}

// vecutil.px
private pure function bool lt_all_uvec3(uvec3 const& a, uvec3 const& b)
{
  return map_fold{monoid_and{bool}, core::operator::lt}(a, b);
  // return a.x < b.x && a.y < b.y && a.z < b.z;
}

// vecutil.px
private pure function bool le_all_uvec3(uvec3 const& a, uvec3 const& b)
{
  return map_fold{monoid_and{bool}, core::operator::le}(a, b);
  // return a.x <= b.x && a.y <= b.y && a.z <= b.z;
}

private pure function bool empty_range(uvec3 const& a)
{
  return a.x == 0 || a.y == 0 || a.z == 0;
}

private pure function {t} uvec3
clamp_size(t const& data, uvec3 const& pos, uvec3 const& sz)
{
  const tsz = data.get_size_uvec3();
  if (!lt_all_uvec3(pos, tsz)) {
    return uvec3();
  }
  const trem = tsz - pos;
  return map{uvec3, min}(trem, sz);
}

