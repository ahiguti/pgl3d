public threaded namespace pgl3d::geometry::funcs "use-unsafe";
public import common -;
public import exception -;
public import meta m;
public import glm -;
public import numeric::fpmath -;
public import operator op;
public import pgl3d::geometry::wfobj -;
public import pgl3d::texture::voxel_surface -;
public import pgl3d::engine::util -;

public threaded interface build_context_i
{
  // 実装はpgl3d::engine::pglshader::build_context_impl
  public function void fill(bool flat_flat, bool polyjoint, size_t n,
    string const& joint_name, poly_t const& poly, mesh_index const& mp) const;
    // 引数nはdgf_fillersのn番を使用して描画することを指定する。
    // joint_nameが空文字列でないときはその名前のjointをその位置に作成する。
}

/* vertex_attr構造体はdrawerのfillerへ渡す頂点データを保持する。個々の
 * drawerのfillerはこのデータから一部を切り出してGPUに渡す頂点データを
 * 作る。*/
public tsvaluetype struct
vertex_attr()
{
  public vec3 pos;
  public vec3 nor;
  public vec3 tan;
  public vec3 uvw;
  public vec4 aabb_or_tconv;
  public vec3 aabb_min;
  public vec3 aabb_max;
  public farray{vec2, 4} boundary;
    // trianglesの底面のテクスチャ座標
  public bool is_tconv;
    // aabb_or_tconvがtconvをあらわすときtrue。これはvoxel貼り付けのときに
    // trueにする。このときposには各頂点の座標ではなく、voxel原点の座標が
    // (全ての頂点について同じ値が)セットされる。
}

/* implicit conversion from vec3 to vertex_attr */
public function {tto, tfrom} vertex_attr
vec_to__(vec3 const& x)
{
  vertex_attr r;
  r.pos = x;
  return r;
}

public metafunction poly_t cslice{vertex_attr};
public metafunction gf_poly
  callable_ptr{void, {build_context_i, poly_t, mesh_index}};
public metafunction to_gf_poly{f}
  make_callable_ptr{f, m::sub{m::size{m::args{f}}, 3}};

public metafunction regular_polygon to_gf_poly{gf_regular_polygon};
public metafunction bump_rec to_gf_poly{gf_bump_rec};
public metafunction bump_rec_seq to_gf_poly{gf_bump_rec_seq};
public metafunction rand_bump to_gf_poly{gf_rand_bump};
public metafunction rand_bump2 to_gf_poly{gf_rand_bump2};
public metafunction ctx_fill to_gf_poly{gf_ctx_fill};
public metafunction ctx_fill_smooth to_gf_poly{gf_ctx_fill_smooth};
public metafunction ctx_poly_joint to_gf_poly{gf_ctx_poly_joint};
public metafunction ctx_point_joint to_gf_poly{gf_ctx_point_joint};
public metafunction cuboid_tex3d to_gf_poly{gf_cuboid_tex3d};
public metafunction ctx_tex3d to_gf_poly{gf_ctx_tex3d};
public metafunction ctx_tex3d_int_surf to_gf_poly{gf_ctx_tex3d_int_surf};
public metafunction ctx_tex3d_opt to_gf_poly{gf_ctx_tex3d_opt};
public metafunction lid to_gf_poly{gf_lid};
public metafunction hole to_gf_poly{gf_hole};
public metafunction sphere to_gf_poly{gf_sphere};
public metafunction rectangle_split to_gf_poly{gf_rectangle_split};
public metafunction rotate_local to_gf_poly{gf_rotate_local};
public metafunction backside to_gf_poly{gf_backside};
public metafunction apply to_gf_poly{gf_apply};
public metafunction bump_apply to_gf_poly{gf_bump_apply};
public metafunction rand_sphere to_gf_poly{gf_rand_sphere};
public metafunction import_wfobj to_gf_poly{gf_import_wfobj};

public threaded function {t} float cast_float(t x)
{ return static_cast{float, t}(x); }
public threaded function {t} uint cast_uint(t x)
{ return static_cast{uint, t}(x); }
public threaded function {t} int cast_int(t x)
{ return static_cast{int, t}(x); }

public tsvaluetype struct mesh_index {
  public size_t x;
  public size_t y;
  public size_t z;
  public size_t w;
}

public threaded function {t} void polygon_scale(t mutable& poly, float scale)
{
  const c = polygon_center(poly);
  for (const i, mutable& p: poly) {
    p.pos = c + ((p.pos - c) * scale);
  }
}

public threaded function vec3 polygon_center(poly_t const& poly)
{
  vec3 mutable c;
  for (const i, const& p: poly) {
    c += p.pos;
  }
  c /= cast_float(poly.size());
  return c;
}

public threaded function float polygon_radius(poly_t const& poly)
{
  const c = polygon_center(poly);
  float mutable r = 0.0;
  for (const i, const& p: poly) {
    r = max(r, length(p.pos - c));
  }
  return r;
}

public threaded function vec3 normal_from_poly(poly_t const& poly,
  bool scale_flag)
{
  const sz = poly.size();
  if (sz < 3) { return vec3(); }
  vec3 v;
  if (sz == 3) {
    v = cross(poly[1].pos - poly[0].pos, poly[2].pos - poly[1].pos);
  } else {
    for (const i: 0 .. sz) {
      v += poly_cross_at(poly, i);
    }
  }
  v = v.normalize();
  if (scale_flag) {
    float len;
    for (const i: 0 .. sz - 1) {
      len += length(poly[i].pos - poly[i + 1].pos);
    }
    len /= static_cast{float}(sz - 1);
    v *= len;
  }
  return v;
}

/* private */

private threaded function vec3 poly_cross_at(poly_t const& poly, size_t i)
{
  const sz = poly.size();
  const i1 = (i + 1) >= sz ? (i + 1 - sz) : (i + 1);
  const i2 = (i + 2) >= sz ? (i + 2 - sz) : (i + 2);
  return cross(poly[i1].pos - poly[i].pos, poly[i2].pos - poly[i1].pos);
}

/*
private threaded function vec3 normal_scale_from_poly(poly_t const& poly)
{
  const sz = poly.size();
  if (sz < 3) { return vec3(); }
  vec3 v;
  if (sz == 3) {
    v = cross(poly[1].pos - poly[0].pos, poly[2].pos - poly[1].pos);
  } else {
    for (const i: 0 .. sz) {
      v += poly_cross_at(poly, i);
    }
    v /= static_cast{float}(sz);
  }
  return v / sqrt(length(v));
}
*/

private threaded function void gf_cuboid_tex3d(vec3 const& coord_min,
  vec3 const& coord_max, vec3 const& center, float scale,
  build_context_i const& ctx, poly_t const& poly, mesh_index const& mp)
{
  // polyは無視される。centerを中央とする位置に大きさscaleの直方体を
  // 作り、coord_minとcoord_maxで指定されたテクスチャオフセットの
  // raycastテクスチャを適用する。
  const coord_sz = coord_max - coord_min;
  const px = coord_sz.x * scale;
  const py = coord_sz.y * scale;
  const pz = coord_sz.z * scale;
  // 底面の長方形の座標
  farray{vertex_attr, 4} arr;
  arr[0].pos.x = center.x - px;
  arr[0].pos.y = center.y - py;
  arr[0].pos.z = center.z - pz;
  arr[1].pos.x = center.x + px;
  arr[1].pos.y = center.y - py;
  arr[1].pos.z = center.z - pz;
  arr[2].pos.x = center.x + px;
  arr[2].pos.y = center.y + py;
  arr[2].pos.z = center.z - pz;
  arr[3].pos.x = center.x - px;
  arr[3].pos.y = center.y + py;
  arr[3].pos.z = center.z - pz;
  // 底面の長方形(arr)を指定すると直方体が作られる
  gf_ctx_tex3d(0, 0, coord_min, coord_max, ctx, arr, mp);
}

private threaded function void gf_regular_polygon(float radius, size_t n,
  gf_poly const& c0, gf_poly const& c1, build_context_i const& ctx,
  poly_t const& poly, mesh_index const& mp)
{
  // polyは無視される。半径radiusの正n角形を作り、表にc0を、裏にc1を
  // 適用する。
  mutable arr = darray{vertex_attr}(n, vertex_attr());
  for (const i: 0 .. n) {
    const a = (cast_float(i) * 2.0f * pi_float()) / cast_float(n);
    arr[i].pos.x = sin(a) * radius;
    arr[i].pos.y = -cos(a) * radius;
    arr[i].pos.z = 0.0f;
  }
  c0(ctx, arr, mesh_index());
  reverse(arr.range());
  c1(ctx, arr, mesh_index());
}

private threaded function void gf_polygon_points(poly_t const& pts, 
  gf_poly const& c0, gf_poly const& c1, build_context_i const& ctx,
  poly_t const& poly, mesh_index const& mp)
{
  // polyは無視される。ptsの表にc0を、裏にc1を適用する。
  darrayst{vertex_attr} arr = pts;
  c0(ctx, arr, mesh_index());
  reverse(arr.range());
  c1(ctx, arr, mesh_index());
}

private threaded function void gf_bump_rec_internal(float z, float scale,
  int recurse, bool seq_flag, gf_poly const& c0, gf_poly const& c1,
  build_context_i const& ctx, poly_t const& poly, mesh_index const& mp)
{
  // polyを垂線方向へzだけ移動した位置にc1を適用し、側面にはc0を適用する。
  // recurse回再帰的に適用する。seq_flagが真なら中間の床にもc1を適用する。
  if (poly.size() < 3) { return; }
  darrayst{vertex_attr} front = poly;
  const nor = normal_from_poly(poly, true);
  for (const i, mutable& e: front) {
    e.pos += nor * z;
  }
  polygon_scale(front, scale);
  /* front */
  if (recurse > 1) {
    if (seq_flag) {
      c1(ctx, front, mesh_index());
    }
    gf_bump_rec_internal(z, scale, recurse - 1, seq_flag, c0, c1, ctx, front,
      mesh_index());
  } else {
    c1(ctx, front, mesh_index());
  }
  /* side */
  const sz = front.size();
  for (const i: 0 .. sz) {
    const i1 = i + 1 != sz ? i + 1 : 0;
    const side = make_farray{vertex_attr}(poly[i], poly[i1], front[i1],
      front[i]);
    c0(ctx, side, mesh_index());
  }
}

private threaded function void gf_bump_rec(float z, float scale, int recurse,
  gf_poly const& c0, gf_poly const& c1, build_context_i const& ctx,
  poly_t const& poly, mesh_index const& mp)
{
  gf_bump_rec_internal(z, scale, recurse, false, c0, c1, ctx, poly, mp);
}

private threaded function void gf_bump_rec_seq(float z, float scale,
  int recurse, gf_poly const& c0, gf_poly const& c1,
  build_context_i const& ctx, poly_t const& poly, mesh_index const& mp)
{
  gf_bump_rec_internal(z, scale, recurse, true, c0, c1, ctx, poly, mp);
}

private threaded function void gf_rand_bump(size_t num, float scale,
  float xmin, float xmax, float ymin, float ymax, float zmin, float zmax,
  rand_generator_ptr const& rnd, gf_poly const& c0, gf_poly const& c1,
  gf_poly const& c2, build_context_i const& ctx, poly_t const& poly,
  mesh_index const& mp)
{
  if (poly.size() != 4) { return; }
  darrayst{vertex_attr} front = poly;
  /* bumps */
  for (const i: 0 .. num) {
    const xsz = xmin + (xmax - xmin) * rnd->generate_float();
    const ysz = ymin + (ymax - ymin) * rnd->generate_float();
    const zsz = zmin + (zmax - zmin) * rnd->generate_float();
    const xp = (1.0f - xsz) * rnd->generate_float();
    const yp = (1.0f - ysz) * rnd->generate_float();
    function vec3 pos(vec3 const& vec, float x, float xmax)
    {
      return vec * x / xmax;
    }
    const s0 = poly[0].pos + (poly[1].pos - poly[0].pos) * xp;
    const s1 = poly[0].pos + (poly[1].pos - poly[0].pos) * (xp + xsz);
    const s2 = poly[3].pos + (poly[2].pos - poly[3].pos) * (xp + xsz);
    const s3 = poly[3].pos + (poly[2].pos - poly[3].pos) * xp;
    const t0 = s0 + (s3 - s0) * yp;
    const t1 = s1 + (s2 - s1) * yp;
    const t2 = s1 + (s2 - s1) * (yp + ysz);
    const t3 = s0 + (s3 - s0) * (yp + ysz);
    const poly1 = make_farray{vertex_attr}(t0, t1, t2, t3);
    gf_bump_rec(zsz * scale, 1.0, 1, c0, c1, ctx, poly1, mp);
  }
  /* front */
  c2(ctx, poly, mesh_index());
}

private threaded function void gf_rand_bump2(size_t num, float scale,
  float xmin, float xmax, float ymin, float ymax, float zmin, float zmax,
  rand_generator_ptr const& rnd, gf_poly const& c0, gf_poly const& c1,
  gf_poly const& c2, build_context_i const& ctx, poly_t const& poly,
  mesh_index const& mp)
{
  varray{pair{vec2, vec2}} posarr;
  if (poly.size() != 4) { return; }
  darrayst{vertex_attr} front = poly;
  /* bumps */
  for (const i: 0 .. num) {
    const xsz = xmin + (xmax - xmin) * rnd->generate_float();
    const ysz = ymin + (ymax - ymin) * rnd->generate_float();
    const zsz = zmin + (zmax - zmin) * rnd->generate_float();
    const xp = (1.0f - xsz) * rnd->generate_float();
    const yp = (1.0f - ysz) * rnd->generate_float();
    pair{vec2, vec2} p = pair(
      make_vec2(xp - xsz / 2.0f, yp - ysz / 2.0f),
      make_vec2(xsz / 2.0f, ysz / 2.0f));
    bool intersec = false;
    function bool has_intersect(pair{vec2, vec2} const& a,
      pair{vec2, vec2} const& b)
    {
      const xd = fabs(a.first.x - b.first.x);
      const yd = fabs(a.first.y - b.first.y);
      const xs = a.second.x + b.second.x;
      const ys = a.second.y + b.second.y;
      return xd < xs && yd < ys;
    }
    for (const j, const& pos: posarr) {
      if (has_intersect(p, pos)) {
	intersec = true;
	break;
      }
    }
    if (intersec) {
      continue;
    }
    posarr.push_back(p);
    function vec3 pos(vec3 const& vec, float x, float xmax)
    {
      return vec * x / xmax;
    }
    const s0 = poly[0].pos + (poly[1].pos - poly[0].pos) * xp;
    const s1 = poly[0].pos + (poly[1].pos - poly[0].pos) * (xp + xsz);
    const s2 = poly[3].pos + (poly[2].pos - poly[3].pos) * (xp + xsz);
    const s3 = poly[3].pos + (poly[2].pos - poly[3].pos) * xp;
    const t0 = s0 + (s3 - s0) * yp;
    const t1 = s1 + (s2 - s1) * yp;
    const t2 = s1 + (s2 - s1) * (yp + ysz);
    const t3 = s0 + (s3 - s0) * (yp + ysz);
    const poly1 = make_farray{vertex_attr}(t0, t1, t2, t3);
    gf_bump_rec(zsz * scale, 1.0, 1, c0, c1, ctx, poly1, mp);
  }
  /* front */
  c2(ctx, poly, mesh_index());
}

public threaded function mat4
poly_trans(poly_t const& poly)
{
  vec3 ex;
  vec3 ey;
  vec3 ez;
  if (poly.size() >= 3) {
    ex = (poly[1].pos - poly[0].pos).normalize();
    ez = normal_from_poly(poly, false);
  } else {
    ex = make_vec3(1.0, 0.0, 0.0);
    ez = make_vec3(0.0, 1.0, 0.0);
  }
  ey = cross(ez, ex);
  const c = polygon_center(poly);
  return make_mat4(
    ex.x, ex.y, ex.z,  0.0, 
    ey.x, ey.y, ey.z,  0.0,
    ez.x, ez.y, ez.z,  0.0,
     c.x,  c.y,  c.z,  1.0);  
}

private threaded function vec3 generate_rand_sphere(
  rand_generator_ptr const& rnd, bool surface_flag, float radius)
{
  vec3 r;
  while (true) {
    const x = rnd->generate_float() * 2.0f - 1.0f;
    const y = rnd->generate_float() * 2.0f - 1.0f;
    const z = rnd->generate_float() * 2.0f - 1.0f;
    const d = x * x + y * y + z * z;
    if (d > 1.0f) {
      continue;
    }
    if (surface_flag) {
      if (d < 0.001f) {
	continue;
      }
      const m = radius / sqrt(d);
      r = make_vec3(x * m, y * m, z * m);
    } else {
      r = make_vec3(x * radius, y * radius, z * radius);
    }
    break;
  }
  return r;
}

private threaded function void gf_rand_sphere(float radius, size_t n,
  bool surface_flag, bool rotate_flag, rand_generator_ptr const& rnd,
  gf_poly const& c0, build_context_i const& ctx, poly_t const& poly,
  mesh_index const& mp)
{
  /* poly is ignored */
  farray{vertex_attr, 1} arr;
  size_t i;
  while (i < n) {
    arr[0].pos = generate_rand_sphere(rnd, surface_flag, radius);
    if (rotate_flag) {
      const m = generate_rand_quat(rnd).to_mat3();
      arr[0].nor = m * make_vec3(1.0, 0.0, 0.0);
      arr[0].tan = m * make_vec3(0.0, 1.0, 0.0);
    }
    c0(ctx, arr, mesh_index());
    ++i;
  }
}

private threaded function void gf_lid(gf_poly const& c0, gf_poly const& c1,
  build_context_i const& ctx, poly_t const& poly, mesh_index const& mp)
{
  darrayst{vertex_attr} arr = poly;
  c0(ctx, arr, mesh_index());
  reverse(arr.range());
  c1(ctx, arr, mesh_index());
}

private threaded function void gf_ctx_fill(size_t n,
  build_context_i const& ctx, poly_t const& poly, mesh_index const& mp)
{
  ctx.fill(true, false, n, "", poly, mp);
}

private threaded function void gf_ctx_fill_smooth(size_t n,
  build_context_i const& ctx, poly_t const& poly, mesh_index const& mp)
{
  ctx.fill(false, false, n, "", poly, mp);
}

private threaded function void gf_ctx_poly_joint(string const& joint_name,
  build_context_i const& ctx, poly_t const& poly, mesh_index const& mp)
{
  ctx.fill(true, true, 0, joint_name, poly, mp);
}

private threaded function void gf_ctx_point_joint(string const& joint_name,
  build_context_i const& ctx, poly_t const& poly, mesh_index const& mp)
{
  ctx.fill(true, false, 0, joint_name, poly, mp);
}

private threaded function void gf_ctx_tex3d(size_t nbase,
  size_t ntex, vec3 const& mi, vec3 const& mx, build_context_i const& ctx,
  poly_t const& poly, mesh_index const& mp)
{
  // polyで指定されたポリゴンの表面にraycast 3dテクスチャを貼り付ける。
  // int_quadsとsurf_quadsに空を指定してctx_tex3d_int_surfを呼ぶ。
  // miとmxは貼り付けるテクスチャ内の範囲。
  varray{varray{vec3}} e;
  gf_ctx_tex3d_int_surf(nbase, ntex, mi, mx, false, e, e, ctx, poly, mp);
}

private threaded function void gf_ctx_tex3d_int_surf(size_t nbase,
  size_t ntex, vec3 const& mi, vec3 const& mx, bool fill_bottom,
  varray{varray{vec3}} const& int_quads,
  varray{varray{vec3}} const& surf_quads,
  build_context_i const& ctx, poly_t const& poly, mesh_index const& mp)
{
  const sz = mx - mi;
  varray{varray{vec3}} quads = surf_quads;
  if (quads.empty()) {
    // surf_quadsが指定されていないとき、テクスチャ座標の(mx-mi)の大きさの
    // 直方体の6面の座標をquadsにセットする。
    const front = make_varray{vec3}(
      make_vec3(0.0f, 0.0f, sz.z),
      make_vec3(sz.x, 0.0f, sz.z),
      make_vec3(sz.x, sz.y, sz.z),
      make_vec3(0.0f, sz.y, sz.z));
    quads.push_back(front);
    const back = make_varray{vec3}(
      make_vec3(0.0f, sz.y, 0.0f),
      make_vec3(sz.x, sz.y, 0.0f),
      make_vec3(sz.x, 0.0f, 0.0f),
      make_vec3(0.0f, 0.0f, 0.0f));
    quads.push_back(back);
    for (const i: 0 .. 4u) {
      const i1 = i + 1 != 4u ? i + 1 : 0u;
      varray{vec3} side;
      side.resize(4, vec3());
      side[0] = front[i];
      side[1] = front[i1];
      side[2] = front[i1];
      side[3] = front[i];
      side[0].z = 0.0f;
      side[1].z = 0.0f;
      side[2].z = sz.z;
      side[3].z = sz.z;
      quads.push_back(side);
    }
  }
  if (fill_bottom) {
    gf_ctx_fill(nbase, ctx, poly, mp);
  }
  if (!surf_quads.empty()) {
    // 引数surf_quadsとint_quadsの両方が指定された場合のみ。
    // 使っていない？
    const len = glm::length(poly[1].pos - poly[0].pos);
    const tan = (poly[1].pos - poly[0].pos).normalize();
    const nor = normal_from_poly(poly, false);
    const bno = cross(nor, tan);
    const m = make_mat3(
      tan.x, tan.y, tan.z,
      bno.x, bno.y, bno.z,
      nor.x, nor.y, nor.z);
    for (const i, const& quad: int_quads) {
      farray{vertex_attr, 4} q;
      for (const j: 0 .. 4u) {
	q[j].pos = poly[0].pos + m * quad[j] * len;
      }
      gf_ctx_fill(nbase, ctx, q, mp);
    }
  }
  gf_ctx_tex3d_surf(ntex, mi, mx, quads, ctx, poly, mp);
}

private threaded function void gf_ctx_tex3d_opt(size_t nbase, size_t ntex,
  vec3 const& mi, vec3 const& mx, varray{varray{vec3}} const& surf_quads,
  build_context_i const& ctx, poly_t const& poly, mesh_index const& mp)
{
  gf_ctx_fill(nbase, ctx, poly, mp);
  gf_ctx_tex3d_surf(ntex, mi, mx, surf_quads, ctx, poly, mp);
}

private threaded function void gf_ctx_tex3d_surf(size_t ntex,
  vec3 const& mi, vec3 const& mx, varray{varray{vec3}} const& surf_quads,
  build_context_i const& ctx, poly_t const& poly, mesh_index const& mp)
{
  const fill_floor = true;
    // FIXME: 実装中
    // FIXME: 貼り付けるテクスチャの範囲はこの関数の中で割り当て、あとで
    // そこにボクセルデータを生成する。
  // tex3d(ボクセルデータを貼り付けた直方体)の頂点データを作りfill()を呼ぶ
  // 引数polyはtex3dの作成位置を決めるために使われるだけ。
  // surf_quadsには(mx-mi)の大きさの6面の頂点座標が入っている
  const& coord_min = mi;
  const& coord_max = mx;
  if (poly.size() != 4) {
    debug_log("WARN gf_ctx_tex3d_surf poly.size() != 4");
    return;
  }
  // debug_log("gf_ctx_tex3d_surf surf_quads=", surf_quads, "poly=", poly);
  const tan = (poly[1].pos - poly[0].pos).normalize();
  const nor = normal_from_poly(poly, false);
  mutable len = glm::length(poly[1].pos - poly[0].pos);
  mutable darrayst{vec2} bnd = darrayst{vec2}(poly.size(), vec2());
  vec3 base_pos = poly[0].pos;
  if (fill_floor) {
    const bno = cross(nor, tan);
    mutable darrayst{vec2} base = darrayst{vec2}(poly.size(), vec2());
    vec2 base_min;
    vec2 base_max;
    for (const i, const& p: poly) {
      base[i].x = dot(p.pos, tan);
      base[i].y = dot(p.pos, bno);
      if (i == 0) {
        base_min = base[i];
        base_max = base[i];
      } else {
        base_min.x = min(base_min.x, base[i].x);
        base_max.x = max(base_max.x, base[i].x);
        base_min.y = min(base_min.y, base[i].y);
        base_max.y = max(base_max.y, base[i].y);
      }
    }
    const base_sz = base_max - base_min;
    for (const i, const& b: base) {
      bnd[i] = b - base_min;
    }
    len = base_sz.x;
    debug_log("tan=", tan, "bno=", bno, "poly01=", poly[1].pos - poly[0].pos,
      "poly12=", poly[2].pos - poly[1].pos);
  }
  const coord_len = coord_max.x - coord_min.x;
  const texscale = len / coord_len;
    // テクスチャ座標からオブジェクト座標への倍率
  darrayst{vertex_attr} front = poly;
  mutable attr0 = poly[0];
  attr0.pos = base_pos; // 接線空間原点のオブジェクト座標。
  attr0.nor = nor; // 基準平面の法線ベクトル
  attr0.tan = tan;
  attr0.aabb_or_tconv = glm::make_vec4(
    -coord_min.x * texscale,
    -coord_min.y * texscale,
    -coord_min.z * texscale,
    texscale);
    // tconv: テクスチャ座標からオブジェクト座標への変換scaleと位置。
    // pos, nor, tan
  attr0.aabb_min = coord_min;
  attr0.aabb_max = coord_max;
  attr0.is_tconv = true;
  if (fill_floor) {
    const texscale_inv = coord_len / len;
      // オブジェクト座標からテクスチャ座標への倍率
    const coord_min_xy = glm::make_vec2(coord_min.x, coord_min.y);
    for (const i, const b: bnd) {
      // 底面ポリゴンの位置
      attr0.boundary[i] = coord_min_xy + bnd[i] * texscale_inv;
    }
  }
  // quad_attrとしてsurf_quadsの各面の各頂点の頂点データを作る。
  mutable quad_attr = make_farray{vertex_attr}(attr0, attr0, attr0, attr0);
  // 頂点データのuvw以外の属性はすべての頂点で同じ値(無駄大きい？)。
  for (const i, const q: surf_quads) {
    quad_attr[0].uvw = coord_min + q[0];
    quad_attr[1].uvw = coord_min + q[1];
    quad_attr[2].uvw = coord_min + q[2];
    quad_attr[3].uvw = coord_min + q[3];
    gf_ctx_fill_smooth(ntex, ctx, quad_attr, mesh_index());
  }
  // triangles.vshに渡る頂点データは以下の通り
  // pos(vec3 position): オブジェクト座標系での接線空間の原点
  // nor(vec3 normal): オブジェクト座標系での法線(接線空間のz軸)
  // tan(vec3 tangent): オブジェクト座標系での接線(接線空間のx軸)
  // uvw(vec3 uvw): 各頂点のテクスチャ座標
  // aabb_or_tconv(vec4 aabb_or_tconv): テクスチャ座標からオブジェクト座標
  //   への変換
  // aabb_min(vec3 aabb_min): テクスチャ座標系での描画範囲aabb最小
  // aabb_max(vec3 aabb_max): テクスチャ座標系での描画範囲aabb最大
  // boundary(vec2 boundary0から3): テクスチャ座標系での底面多角形
  // 各頂点の位置はuvw値からわかる。オブジェクト座標系への変換は
  // pos, nor, tan とaabb_or_tconvで計算できる。
  //
}

private threaded function void gf_hole(build_context_i const& ctx,
  poly_t const& poly, mesh_index const& mp)
{
}

private threaded function void gf_sphere(size_t split, gf_poly const& c0,
  build_context_i const& ctx, poly_t const& poly, mesh_index const& mp)
{
  const poly_sz = poly.size();
  if (poly_sz < 3) { return; }
  if (split == 0) { c0(ctx, poly, mesh_index()); }
  const pcenter = polygon_center(poly);
  const nor = normal_from_poly(poly, false);
  const radius = polygon_radius(poly);
  darrayst{vertex_attr} sp = poly;
  mesh_index mp1;
  for (size_t i: 1 .. split) {
    mp1.x = i;
    const a1 = pi_float() * cast_float(i) / cast_float(split * 2);
    darrayst{vertex_attr} p = poly;
    for (size_t j, mutable& x: p) {
      x.pos += nor * radius * sin(a1);
    }
    polygon_scale(p, cos(a1));
    for (const j: 0 .. poly_sz) {
      const j1 = j + 1 != poly_sz ? j + 1 : 0;
      mutable side = make_farray{vertex_attr}(sp[j], sp[j1], p[j1], p[j]);
      for (size_t i, mutable& p: side) {
	p.nor = (p.pos - pcenter).normalize();
      }
      mp1.y = j;
      c0(ctx, side, mp1);
    }
    for (const j: 0 .. poly_sz) {
      sp[j] = p[j];
    }
  }
  const top_pos = pcenter + nor * radius;
  for (const j: 0 .. poly_sz) {
    const j1 = j + 1 != poly_sz ? j + 1 : 0;
    mutable side = make_farray{vertex_attr}(top_pos, sp[j], sp[j1]);
    for (size_t i, mutable& p: side) {
      p.nor = (p.pos - pcenter).normalize();
    }
    c0(ctx, side, mesh_index());
  }
}

private threaded function void gf_import_wfobj(wfobject const& wfo,
  wfgroup const& wfgrp, gf_poly const& c0, build_context_i const& ctx,
  poly_t const& poly, mesh_index const& mp)
{
  mesh_index midx;
  varray{vertex_attr} arr;
  //debug_log("import f", wfgrp.f);
  for (const i, const& p: wfgrp.f) {
    //debug_log("import p", p);
    if (arr.size() != p.size()) {
      arr.resize(p.size(), vertex_attr());
    }
    mutable& sli = arr;
    for (const j, const& v: p) {
      // mutable& ae = sli[arr.size() - j - 1];
      mutable& ae = sli[j];
      const vid = v.vertex;
      //debug_log("vid", vid);
      if (vid > 0 && wfo.v.size() >= vid) {
	ae.pos = wfo.v[vid - 1];
	// debug_log("vertex", ae.pos);
      }
      const nid = v.normal;
      if (nid > 0 && wfo.vn.size() >= nid) {
	ae.nor = wfo.vn[nid - 1];
      }
      const cid = v.texcoord;
      if (cid > 0 && wfo.vt.size() >= cid) {
	const coord = wfo.vt[cid - 1];
	ae.uvw = make_vec3(coord.x, coord.y, 0.0f);
      }
    }
    midx.x = i;
    // if (arr.size() >= 5) { debug_log("polygon", p, arr); }
    c0(ctx, arr, midx);
  }
}

private threaded function void gf_rectangle_split(size_t split_x,
  size_t split_y, gf_poly const& c0, build_context_i const& ctx,
  poly_t const& poly, mesh_index const& mp)
{
  if (poly.size() != 4) { return; }
  function vec3 pos(vec3 const& vec, size_t i, size_t imax)
  {
    return vec * (cast_float(i) / cast_float(imax));
  }
  mesh_index mp1;
  for (const i: 0 .. split_x) {
    mp1.x = i;
    const s0 = poly[0].pos + pos(poly[1].pos - poly[0].pos, i, split_x);
    const s1 = poly[0].pos + pos(poly[1].pos - poly[0].pos, i + 1, split_x);
    const s2 = poly[3].pos + pos(poly[2].pos - poly[3].pos, i + 1, split_x);
    const s3 = poly[3].pos + pos(poly[2].pos - poly[3].pos, i , split_x);
    for (const j: 0 .. split_y) {
      mp1.y = j;
      const t0 = s0 + pos(s3 - s0, j, split_y);
      const t1 = s1 + pos(s2 - s1, j, split_y);
      const t2 = s1 + pos(s2 - s1, j + 1, split_y);
      const t3 = s0 + pos(s3 - s0, j + 1, split_y);
      c0(ctx, make_farray{vertex_attr}(t0, t1, t2, t3), mp1);
    }
  }
}

private threaded function void gf_rotate_local(quat const& q,
  gf_poly const& c0, build_context_i const& ctx, poly_t const& poly,
  mesh_index const& mp)
{
  const trans = poly_trans(poly);
  const trans_inv = trans.inverse();
  const m = trans_inv * q.to_mat4() * trans;
  darrayst{vertex_attr} p = poly;
  for (const i, mutable& v: p) {
    const v1 = m * make_vec4(v.pos.x, v.pos.y, v.pos.z, 1.0);
    v.pos = make_vec3(v1.x, v1.y, v1.z);
  }
  c0(ctx, p, mp);
}

private threaded function void gf_backside(gf_poly const& c0,
  build_context_i const& ctx, poly_t const& poly, mesh_index const& mp)
{
  darrayst{vertex_attr} p = poly;
  reverse(p.range());
  c0(ctx, p, mp);
}

private threaded function void gf_apply(mat4 const& m, gf_poly const& c0,
  build_context_i const& ctx, poly_t const& poly, mesh_index const& mp)
{
  darrayst{vertex_attr} p = poly;
  for (const i, mutable& v: p) {
    const v1 = m * make_vec4(v.pos.x, v.pos.y, v.pos.z, 1.0);
    v.pos = make_vec3(v1.x / v1.w, v1.y / v1.w, v1.z / v1.w);
  }
  c0(ctx, p, mp);
}

private threaded function void gf_bump_apply(mat4 const& m,
  bool split_reverse, gf_poly const& c0, gf_poly const& c1,
  build_context_i const& ctx, poly_t const& poly, mesh_index const& mp)
{
  const trans = poly_trans(poly);
  const trans_inv = trans.inverse();
  const m1 = trans_inv * m * trans;
  darrayst{vertex_attr} front = poly;
  for (const i, mutable& v: front) {
    const v1 = m1 * make_vec4(v.pos.x, v.pos.y, v.pos.z, 1.0);
    v.pos = make_vec3(v1.x / v1.w, v1.y / v1.w, v1.z / v1.w);
  }
  /* front */
  c1(ctx, front, mp);
  /* side */
  const sz = poly.size();
  for (const i: 0 .. sz) {
    const i1 = i + 1 != sz ? i + 1 : 0;
    if (split_reverse) {
      // const s0 = make_farray{vertex_attr}(poly[i], poly[i1], front[i1]);
      // const s1 = make_farray{vertex_attr}(front[i1], front[i], poly[i]);
      // c0(ctx, s0, mesh_index());
      // c0(ctx, s1, mesh_index());
      const s0 = make_farray{vertex_attr}(poly[i], poly[i1], front[i1],
	front[i]);
      c0(ctx, s0, mesh_index());
    } else {
      // const s0 = make_farray{vertex_attr}(poly[i], poly[i1], front[i]);
      // const s1 = make_farray{vertex_attr}(front[i], poly[i1], front[i1]);
      // c0(ctx, s0, mesh_index());
      // c0(ctx, s1, mesh_index());
      const s0 = make_farray{vertex_attr}(poly[i], poly[i1], front[i],
	poly[i1]);
      c0(ctx, s0, mesh_index());
    }
  }
}

