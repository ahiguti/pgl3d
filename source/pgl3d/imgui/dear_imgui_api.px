
/* this file is generated by dear_imgui_gen_api.py */
private threaded namespace pgl3d::imgui::dear_imgui_api "use-unsafe";
public import core::common -;
private import core::pointer::raw -;

extern "types" inline
#include "imgui.h"
;

public pure tsvaluetype struct extern "::ImGuiID" "extuint" ImGuiID { }

public pure tsvaluetype struct extern "::ImVec2"  ImVec2 {
  public float x;
  public float y;
}
public pure tsvaluetype struct extern "::ImVec4"  ImVec4 {
  public float x;
  public float y;
  public float z;
  public float w;
}
public pure tsvaluetype struct extern "::ImGuiStyle" "nonmovable" ImGuiStyle {
  public float Alpha;
  public float DisabledAlpha;
  public ImVec2 WindowPadding;
  public float WindowRounding;
  public float WindowBorderSize;
  public ImVec2 WindowMinSize;
  public ImVec2 WindowTitleAlign;
  public ImGuiDir WindowMenuButtonPosition;
  public float ChildRounding;
  public float ChildBorderSize;
  public float PopupRounding;
  public float PopupBorderSize;
  public ImVec2 FramePadding;
  public float FrameRounding;
  public float FrameBorderSize;
  public ImVec2 ItemSpacing;
  public ImVec2 ItemInnerSpacing;
  public ImVec2 CellPadding;
  public ImVec2 TouchExtraPadding;
  public float IndentSpacing;
  public float ColumnsMinSpacing;
  public float ScrollbarSize;
  public float ScrollbarRounding;
  public float GrabMinSize;
  public float GrabRounding;
  public float LogSliderDeadzone;
  public float TabRounding;
  public float TabBorderSize;
  public float TabMinWidthForCloseButton;
  public float TabBarBorderSize;
  public float TableAngledHeadersAngle;
  public ImGuiDir ColorButtonPosition;
  public ImVec2 ButtonTextAlign;
  public ImVec2 SelectableTextAlign;
  public float SeparatorTextBorderSize;
  public ImVec2 SeparatorTextAlign;
  public ImVec2 SeparatorTextPadding;
  public ImVec2 DisplayWindowPadding;
  public ImVec2 DisplaySafeAreaPadding;
  public float MouseCursorScale;
  public bool AntiAliasedLines;
  public bool AntiAliasedLinesUseTex;
  public bool AntiAliasedFill;
  public float CurveTessellationTol;
  public float CircleTessellationMaxError;
  public float HoverStationaryDelay;
  public float HoverDelayShort;
  public float HoverDelayNormal;
  public ImGuiHoveredFlags HoverFlagsForTooltipMouse;
  public ImGuiHoveredFlags HoverFlagsForTooltipNav;
}
public pure tsvaluetype struct extern "::ImGuiKeyData"  ImGuiKeyData {
  public bool Down;
  public float DownDuration;
  public float DownDurationPrev;
  public float AnalogValue;
}
public pure tsvaluetype struct extern "::ImGuiIO" "nonmovable" ImGuiIO {
  public ImVec2 DisplaySize;
  public float DeltaTime;
  public float IniSavingRate;
  public float FontGlobalScale;
  public bool FontAllowUserScaling;
  public ImVec2 DisplayFramebufferScale;
  public bool MouseDrawCursor;
  public bool ConfigMacOSXBehaviors;
  public bool ConfigInputTrickleEventQueue;
  public bool ConfigInputTextCursorBlink;
  public bool ConfigInputTextEnterKeepActive;
  public bool ConfigDragClickToInputText;
  public bool ConfigWindowsResizeFromEdges;
  public bool ConfigWindowsMoveFromTitleBarOnly;
  public float ConfigMemoryCompactTimer;
  public float MouseDoubleClickTime;
  public float MouseDoubleClickMaxDist;
  public float MouseDragThreshold;
  public float KeyRepeatDelay;
  public float KeyRepeatRate;
  public bool ConfigDebugBeginReturnValueOnce;
  public bool ConfigDebugBeginReturnValueLoop;
  public bool ConfigDebugIgnoreFocusLoss;
  public bool ConfigDebugIniSettings;
  public bool WantCaptureMouse;
  public bool WantCaptureKeyboard;
  public bool WantTextInput;
  public bool WantSetMousePos;
  public bool WantSaveIniSettings;
  public bool NavActive;
  public bool NavVisible;
  public float Framerate;
  public int MetricsRenderVertices;
  public int MetricsRenderIndices;
  public int MetricsRenderWindows;
  public int MetricsActiveWindows;
  public ImVec2 MouseDelta;
  public ImVec2 MousePos;
  public float MouseWheel;
  public float MouseWheelH;
  public bool KeyCtrl;
  public bool KeyShift;
  public bool KeyAlt;
  public bool KeySuper;
  public bool WantCaptureMouseUnlessPopupClose;
  public ImVec2 MousePosPrev;
  public bool MouseWheelRequestAxisSwap;
  public float PenPressure;
  public bool AppFocusLost;
  public bool AppAcceptingEvents;
  public bool BackendUsingLegacyNavInputArray;
}
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiWindowFlags { }
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_None;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_NoTitleBar;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_NoResize;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_NoMove;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_NoScrollbar;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_NoScrollWithMouse;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_NoCollapse;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_AlwaysAutoResize;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_NoBackground;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_NoSavedSettings;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_NoMouseInputs;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_MenuBar;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_HorizontalScrollbar;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_NoFocusOnAppearing;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_NoBringToFrontOnFocus;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_AlwaysVerticalScrollbar;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_AlwaysHorizontalScrollbar;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_NoNavInputs;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_NoNavFocus;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_UnsavedDocument;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_NoNav;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_NoDecoration;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_NoInputs;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_NavFlattened;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_ChildWindow;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_Tooltip;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_Popup;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_Modal;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_ChildMenu;
public extern "::ImGui::%" ImGuiWindowFlags ImGuiWindowFlags_AlwaysUseWindowPadding;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiChildFlags { }
public extern "::ImGui::%" ImGuiChildFlags ImGuiChildFlags_None;
public extern "::ImGui::%" ImGuiChildFlags ImGuiChildFlags_Border;
public extern "::ImGui::%" ImGuiChildFlags ImGuiChildFlags_AlwaysUseWindowPadding;
public extern "::ImGui::%" ImGuiChildFlags ImGuiChildFlags_ResizeX;
public extern "::ImGui::%" ImGuiChildFlags ImGuiChildFlags_ResizeY;
public extern "::ImGui::%" ImGuiChildFlags ImGuiChildFlags_AutoResizeX;
public extern "::ImGui::%" ImGuiChildFlags ImGuiChildFlags_AutoResizeY;
public extern "::ImGui::%" ImGuiChildFlags ImGuiChildFlags_AlwaysAutoResize;
public extern "::ImGui::%" ImGuiChildFlags ImGuiChildFlags_FrameStyle;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiInputTextFlags { }
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_None;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_CharsDecimal;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_CharsHexadecimal;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_CharsUppercase;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_CharsNoBlank;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_AutoSelectAll;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_EnterReturnsTrue;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_CallbackCompletion;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_CallbackHistory;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_CallbackAlways;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_CallbackCharFilter;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_AllowTabInput;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_CtrlEnterForNewLine;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_NoHorizontalScroll;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_AlwaysOverwrite;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_ReadOnly;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_Password;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_NoUndoRedo;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_CharsScientific;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_CallbackResize;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_CallbackEdit;
public extern "::ImGui::%" ImGuiInputTextFlags ImGuiInputTextFlags_EscapeClearsAll;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiTreeNodeFlags { }
public extern "::ImGui::%" ImGuiTreeNodeFlags ImGuiTreeNodeFlags_None;
public extern "::ImGui::%" ImGuiTreeNodeFlags ImGuiTreeNodeFlags_Selected;
public extern "::ImGui::%" ImGuiTreeNodeFlags ImGuiTreeNodeFlags_Framed;
public extern "::ImGui::%" ImGuiTreeNodeFlags ImGuiTreeNodeFlags_AllowOverlap;
public extern "::ImGui::%" ImGuiTreeNodeFlags ImGuiTreeNodeFlags_NoTreePushOnOpen;
public extern "::ImGui::%" ImGuiTreeNodeFlags ImGuiTreeNodeFlags_NoAutoOpenOnLog;
public extern "::ImGui::%" ImGuiTreeNodeFlags ImGuiTreeNodeFlags_DefaultOpen;
public extern "::ImGui::%" ImGuiTreeNodeFlags ImGuiTreeNodeFlags_OpenOnDoubleClick;
public extern "::ImGui::%" ImGuiTreeNodeFlags ImGuiTreeNodeFlags_OpenOnArrow;
public extern "::ImGui::%" ImGuiTreeNodeFlags ImGuiTreeNodeFlags_Leaf;
public extern "::ImGui::%" ImGuiTreeNodeFlags ImGuiTreeNodeFlags_Bullet;
public extern "::ImGui::%" ImGuiTreeNodeFlags ImGuiTreeNodeFlags_FramePadding;
public extern "::ImGui::%" ImGuiTreeNodeFlags ImGuiTreeNodeFlags_SpanAvailWidth;
public extern "::ImGui::%" ImGuiTreeNodeFlags ImGuiTreeNodeFlags_SpanFullWidth;
public extern "::ImGui::%" ImGuiTreeNodeFlags ImGuiTreeNodeFlags_SpanAllColumns;
public extern "::ImGui::%" ImGuiTreeNodeFlags ImGuiTreeNodeFlags_NavLeftJumpsBackHere;
public extern "::ImGui::%" ImGuiTreeNodeFlags ImGuiTreeNodeFlags_CollapsingHeader;
public extern "::ImGui::%" ImGuiTreeNodeFlags ImGuiTreeNodeFlags_AllowItemOverlap;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiPopupFlags { }
public extern "::ImGui::%" ImGuiPopupFlags ImGuiPopupFlags_None;
public extern "::ImGui::%" ImGuiPopupFlags ImGuiPopupFlags_MouseButtonLeft;
public extern "::ImGui::%" ImGuiPopupFlags ImGuiPopupFlags_MouseButtonRight;
public extern "::ImGui::%" ImGuiPopupFlags ImGuiPopupFlags_MouseButtonMiddle;
public extern "::ImGui::%" ImGuiPopupFlags ImGuiPopupFlags_MouseButtonMask_;
public extern "::ImGui::%" ImGuiPopupFlags ImGuiPopupFlags_MouseButtonDefault_;
public extern "::ImGui::%" ImGuiPopupFlags ImGuiPopupFlags_NoOpenOverExistingPopup;
public extern "::ImGui::%" ImGuiPopupFlags ImGuiPopupFlags_NoOpenOverItems;
public extern "::ImGui::%" ImGuiPopupFlags ImGuiPopupFlags_AnyPopupId;
public extern "::ImGui::%" ImGuiPopupFlags ImGuiPopupFlags_AnyPopupLevel;
public extern "::ImGui::%" ImGuiPopupFlags ImGuiPopupFlags_AnyPopup;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiSelectableFlags { }
public extern "::ImGui::%" ImGuiSelectableFlags ImGuiSelectableFlags_None;
public extern "::ImGui::%" ImGuiSelectableFlags ImGuiSelectableFlags_DontClosePopups;
public extern "::ImGui::%" ImGuiSelectableFlags ImGuiSelectableFlags_SpanAllColumns;
public extern "::ImGui::%" ImGuiSelectableFlags ImGuiSelectableFlags_AllowDoubleClick;
public extern "::ImGui::%" ImGuiSelectableFlags ImGuiSelectableFlags_Disabled;
public extern "::ImGui::%" ImGuiSelectableFlags ImGuiSelectableFlags_AllowOverlap;
public extern "::ImGui::%" ImGuiSelectableFlags ImGuiSelectableFlags_AllowItemOverlap;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiComboFlags { }
public extern "::ImGui::%" ImGuiComboFlags ImGuiComboFlags_None;
public extern "::ImGui::%" ImGuiComboFlags ImGuiComboFlags_PopupAlignLeft;
public extern "::ImGui::%" ImGuiComboFlags ImGuiComboFlags_HeightSmall;
public extern "::ImGui::%" ImGuiComboFlags ImGuiComboFlags_HeightRegular;
public extern "::ImGui::%" ImGuiComboFlags ImGuiComboFlags_HeightLarge;
public extern "::ImGui::%" ImGuiComboFlags ImGuiComboFlags_HeightLargest;
public extern "::ImGui::%" ImGuiComboFlags ImGuiComboFlags_NoArrowButton;
public extern "::ImGui::%" ImGuiComboFlags ImGuiComboFlags_NoPreview;
public extern "::ImGui::%" ImGuiComboFlags ImGuiComboFlags_WidthFitPreview;
public extern "::ImGui::%" ImGuiComboFlags ImGuiComboFlags_HeightMask_;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiTabBarFlags { }
public extern "::ImGui::%" ImGuiTabBarFlags ImGuiTabBarFlags_None;
public extern "::ImGui::%" ImGuiTabBarFlags ImGuiTabBarFlags_Reorderable;
public extern "::ImGui::%" ImGuiTabBarFlags ImGuiTabBarFlags_AutoSelectNewTabs;
public extern "::ImGui::%" ImGuiTabBarFlags ImGuiTabBarFlags_TabListPopupButton;
public extern "::ImGui::%" ImGuiTabBarFlags ImGuiTabBarFlags_NoCloseWithMiddleMouseButton;
public extern "::ImGui::%" ImGuiTabBarFlags ImGuiTabBarFlags_NoTabListScrollingButtons;
public extern "::ImGui::%" ImGuiTabBarFlags ImGuiTabBarFlags_NoTooltip;
public extern "::ImGui::%" ImGuiTabBarFlags ImGuiTabBarFlags_FittingPolicyResizeDown;
public extern "::ImGui::%" ImGuiTabBarFlags ImGuiTabBarFlags_FittingPolicyScroll;
public extern "::ImGui::%" ImGuiTabBarFlags ImGuiTabBarFlags_FittingPolicyMask_;
public extern "::ImGui::%" ImGuiTabBarFlags ImGuiTabBarFlags_FittingPolicyDefault_;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiTabItemFlags { }
public extern "::ImGui::%" ImGuiTabItemFlags ImGuiTabItemFlags_None;
public extern "::ImGui::%" ImGuiTabItemFlags ImGuiTabItemFlags_UnsavedDocument;
public extern "::ImGui::%" ImGuiTabItemFlags ImGuiTabItemFlags_SetSelected;
public extern "::ImGui::%" ImGuiTabItemFlags ImGuiTabItemFlags_NoCloseWithMiddleMouseButton;
public extern "::ImGui::%" ImGuiTabItemFlags ImGuiTabItemFlags_NoPushId;
public extern "::ImGui::%" ImGuiTabItemFlags ImGuiTabItemFlags_NoTooltip;
public extern "::ImGui::%" ImGuiTabItemFlags ImGuiTabItemFlags_NoReorder;
public extern "::ImGui::%" ImGuiTabItemFlags ImGuiTabItemFlags_Leading;
public extern "::ImGui::%" ImGuiTabItemFlags ImGuiTabItemFlags_Trailing;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiTableFlags { }
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_None;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_Resizable;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_Reorderable;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_Hideable;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_Sortable;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_NoSavedSettings;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_ContextMenuInBody;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_RowBg;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_BordersInnerH;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_BordersOuterH;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_BordersInnerV;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_BordersOuterV;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_BordersH;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_BordersV;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_BordersInner;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_BordersOuter;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_Borders;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_NoBordersInBody;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_NoBordersInBodyUntilResize;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_SizingFixedFit;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_SizingFixedSame;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_SizingStretchProp;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_SizingStretchSame;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_NoHostExtendX;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_NoHostExtendY;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_NoKeepColumnsVisible;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_PreciseWidths;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_NoClip;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_PadOuterX;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_NoPadOuterX;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_NoPadInnerX;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_ScrollX;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_ScrollY;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_SortMulti;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_SortTristate;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_HighlightHoveredColumn;
public extern "::ImGui::%" ImGuiTableFlags ImGuiTableFlags_SizingMask_;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiTableColumnFlags { }
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_None;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_Disabled;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_DefaultHide;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_DefaultSort;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_WidthStretch;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_WidthFixed;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_NoResize;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_NoReorder;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_NoHide;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_NoClip;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_NoSort;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_NoSortAscending;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_NoSortDescending;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_NoHeaderLabel;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_NoHeaderWidth;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_PreferSortAscending;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_PreferSortDescending;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_IndentEnable;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_IndentDisable;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_AngledHeader;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_IsEnabled;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_IsVisible;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_IsSorted;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_IsHovered;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_WidthMask_;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_IndentMask_;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_StatusMask_;
public extern "::ImGui::%" ImGuiTableColumnFlags ImGuiTableColumnFlags_NoDirectResize_;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiTableRowFlags { }
public extern "::ImGui::%" ImGuiTableRowFlags ImGuiTableRowFlags_None;
public extern "::ImGui::%" ImGuiTableRowFlags ImGuiTableRowFlags_Headers;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiTableBgTarget { }
public extern "::ImGui::%" ImGuiTableBgTarget ImGuiTableBgTarget_None;
public extern "::ImGui::%" ImGuiTableBgTarget ImGuiTableBgTarget_RowBg0;
public extern "::ImGui::%" ImGuiTableBgTarget ImGuiTableBgTarget_RowBg1;
public extern "::ImGui::%" ImGuiTableBgTarget ImGuiTableBgTarget_CellBg;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiFocusedFlags { }
public extern "::ImGui::%" ImGuiFocusedFlags ImGuiFocusedFlags_None;
public extern "::ImGui::%" ImGuiFocusedFlags ImGuiFocusedFlags_ChildWindows;
public extern "::ImGui::%" ImGuiFocusedFlags ImGuiFocusedFlags_RootWindow;
public extern "::ImGui::%" ImGuiFocusedFlags ImGuiFocusedFlags_AnyWindow;
public extern "::ImGui::%" ImGuiFocusedFlags ImGuiFocusedFlags_NoPopupHierarchy;
public extern "::ImGui::%" ImGuiFocusedFlags ImGuiFocusedFlags_RootAndChildWindows;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiHoveredFlags { }
public extern "::ImGui::%" ImGuiHoveredFlags ImGuiHoveredFlags_None;
public extern "::ImGui::%" ImGuiHoveredFlags ImGuiHoveredFlags_ChildWindows;
public extern "::ImGui::%" ImGuiHoveredFlags ImGuiHoveredFlags_RootWindow;
public extern "::ImGui::%" ImGuiHoveredFlags ImGuiHoveredFlags_AnyWindow;
public extern "::ImGui::%" ImGuiHoveredFlags ImGuiHoveredFlags_NoPopupHierarchy;
public extern "::ImGui::%" ImGuiHoveredFlags ImGuiHoveredFlags_AllowWhenBlockedByPopup;
public extern "::ImGui::%" ImGuiHoveredFlags ImGuiHoveredFlags_AllowWhenBlockedByActiveItem;
public extern "::ImGui::%" ImGuiHoveredFlags ImGuiHoveredFlags_AllowWhenOverlappedByItem;
public extern "::ImGui::%" ImGuiHoveredFlags ImGuiHoveredFlags_AllowWhenOverlappedByWindow;
public extern "::ImGui::%" ImGuiHoveredFlags ImGuiHoveredFlags_AllowWhenDisabled;
public extern "::ImGui::%" ImGuiHoveredFlags ImGuiHoveredFlags_NoNavOverride;
public extern "::ImGui::%" ImGuiHoveredFlags ImGuiHoveredFlags_AllowWhenOverlapped;
public extern "::ImGui::%" ImGuiHoveredFlags ImGuiHoveredFlags_RectOnly;
public extern "::ImGui::%" ImGuiHoveredFlags ImGuiHoveredFlags_RootAndChildWindows;
public extern "::ImGui::%" ImGuiHoveredFlags ImGuiHoveredFlags_ForTooltip;
public extern "::ImGui::%" ImGuiHoveredFlags ImGuiHoveredFlags_Stationary;
public extern "::ImGui::%" ImGuiHoveredFlags ImGuiHoveredFlags_DelayNone;
public extern "::ImGui::%" ImGuiHoveredFlags ImGuiHoveredFlags_DelayShort;
public extern "::ImGui::%" ImGuiHoveredFlags ImGuiHoveredFlags_DelayNormal;
public extern "::ImGui::%" ImGuiHoveredFlags ImGuiHoveredFlags_NoSharedDelay;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiDragDropFlags { }
public extern "::ImGui::%" ImGuiDragDropFlags ImGuiDragDropFlags_None;
public extern "::ImGui::%" ImGuiDragDropFlags ImGuiDragDropFlags_SourceNoPreviewTooltip;
public extern "::ImGui::%" ImGuiDragDropFlags ImGuiDragDropFlags_SourceNoDisableHover;
public extern "::ImGui::%" ImGuiDragDropFlags ImGuiDragDropFlags_SourceNoHoldToOpenOthers;
public extern "::ImGui::%" ImGuiDragDropFlags ImGuiDragDropFlags_SourceAllowNullID;
public extern "::ImGui::%" ImGuiDragDropFlags ImGuiDragDropFlags_SourceExtern;
public extern "::ImGui::%" ImGuiDragDropFlags ImGuiDragDropFlags_SourceAutoExpirePayload;
public extern "::ImGui::%" ImGuiDragDropFlags ImGuiDragDropFlags_AcceptBeforeDelivery;
public extern "::ImGui::%" ImGuiDragDropFlags ImGuiDragDropFlags_AcceptNoDrawDefaultRect;
public extern "::ImGui::%" ImGuiDragDropFlags ImGuiDragDropFlags_AcceptNoPreviewTooltip;
public extern "::ImGui::%" ImGuiDragDropFlags ImGuiDragDropFlags_AcceptPeekOnly;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiDir { }
public extern "::ImGui::%" ImGuiDir ImGuiDir_None;
public extern "::ImGui::%" ImGuiDir ImGuiDir_Left;
public extern "::ImGui::%" ImGuiDir ImGuiDir_Right;
public extern "::ImGui::%" ImGuiDir ImGuiDir_Up;
public extern "::ImGui::%" ImGuiDir ImGuiDir_Down;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiSortDirection { }
public extern "::ImGui::%" ImGuiSortDirection ImGuiSortDirection_None;
public extern "::ImGui::%" ImGuiSortDirection ImGuiSortDirection_Ascending;
public extern "::ImGui::%" ImGuiSortDirection ImGuiSortDirection_Descending;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiKey { }
public extern "::ImGui::%" ImGuiKey ImGuiKey_None;
public extern "::ImGui::%" ImGuiKey ImGuiKey_Tab;
public extern "::ImGui::%" ImGuiKey ImGuiKey_LeftCtrl;
public extern "::ImGui::%" ImGuiKey ImGuiKey_LeftShift;
public extern "::ImGui::%" ImGuiKey ImGuiKey_LeftAlt;
public extern "::ImGui::%" ImGuiKey ImGuiKey_LeftSuper;
public extern "::ImGui::%" ImGuiKey ImGuiKey_RightCtrl;
public extern "::ImGui::%" ImGuiKey ImGuiKey_RightShift;
public extern "::ImGui::%" ImGuiKey ImGuiKey_RightAlt;
public extern "::ImGui::%" ImGuiKey ImGuiKey_RightSuper;
public extern "::ImGui::%" ImGuiKey ImGuiKey_0;
public extern "::ImGui::%" ImGuiKey ImGuiKey_1;
public extern "::ImGui::%" ImGuiKey ImGuiKey_2;
public extern "::ImGui::%" ImGuiKey ImGuiKey_3;
public extern "::ImGui::%" ImGuiKey ImGuiKey_4;
public extern "::ImGui::%" ImGuiKey ImGuiKey_5;
public extern "::ImGui::%" ImGuiKey ImGuiKey_6;
public extern "::ImGui::%" ImGuiKey ImGuiKey_7;
public extern "::ImGui::%" ImGuiKey ImGuiKey_8;
public extern "::ImGui::%" ImGuiKey ImGuiKey_9;
public extern "::ImGui::%" ImGuiKey ImGuiKey_A;
public extern "::ImGui::%" ImGuiKey ImGuiKey_B;
public extern "::ImGui::%" ImGuiKey ImGuiKey_C;
public extern "::ImGui::%" ImGuiKey ImGuiKey_D;
public extern "::ImGui::%" ImGuiKey ImGuiKey_E;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F;
public extern "::ImGui::%" ImGuiKey ImGuiKey_G;
public extern "::ImGui::%" ImGuiKey ImGuiKey_H;
public extern "::ImGui::%" ImGuiKey ImGuiKey_I;
public extern "::ImGui::%" ImGuiKey ImGuiKey_J;
public extern "::ImGui::%" ImGuiKey ImGuiKey_K;
public extern "::ImGui::%" ImGuiKey ImGuiKey_L;
public extern "::ImGui::%" ImGuiKey ImGuiKey_M;
public extern "::ImGui::%" ImGuiKey ImGuiKey_N;
public extern "::ImGui::%" ImGuiKey ImGuiKey_O;
public extern "::ImGui::%" ImGuiKey ImGuiKey_P;
public extern "::ImGui::%" ImGuiKey ImGuiKey_Q;
public extern "::ImGui::%" ImGuiKey ImGuiKey_R;
public extern "::ImGui::%" ImGuiKey ImGuiKey_S;
public extern "::ImGui::%" ImGuiKey ImGuiKey_T;
public extern "::ImGui::%" ImGuiKey ImGuiKey_U;
public extern "::ImGui::%" ImGuiKey ImGuiKey_V;
public extern "::ImGui::%" ImGuiKey ImGuiKey_W;
public extern "::ImGui::%" ImGuiKey ImGuiKey_X;
public extern "::ImGui::%" ImGuiKey ImGuiKey_Y;
public extern "::ImGui::%" ImGuiKey ImGuiKey_Z;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F1;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F2;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F3;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F4;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F5;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F6;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F7;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F8;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F9;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F10;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F11;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F12;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F13;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F14;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F15;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F16;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F17;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F18;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F19;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F20;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F21;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F22;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F23;
public extern "::ImGui::%" ImGuiKey ImGuiKey_F24;
public extern "::ImGui::%" ImGuiKey ImGuiKey_Keypad0;
public extern "::ImGui::%" ImGuiKey ImGuiKey_Keypad1;
public extern "::ImGui::%" ImGuiKey ImGuiKey_Keypad2;
public extern "::ImGui::%" ImGuiKey ImGuiKey_Keypad3;
public extern "::ImGui::%" ImGuiKey ImGuiKey_Keypad4;
public extern "::ImGui::%" ImGuiKey ImGuiKey_Keypad5;
public extern "::ImGui::%" ImGuiKey ImGuiKey_Keypad6;
public extern "::ImGui::%" ImGuiKey ImGuiKey_Keypad7;
public extern "::ImGui::%" ImGuiKey ImGuiKey_Keypad8;
public extern "::ImGui::%" ImGuiKey ImGuiKey_Keypad9;
public extern "::ImGui::%" ImGuiKey ImGuiKey_MouseLeft;
public extern "::ImGui::%" ImGuiKey ImGuiKey_MouseRight;
public extern "::ImGui::%" ImGuiKey ImGuiKey_MouseMiddle;
public extern "::ImGui::%" ImGuiKey ImGuiKey_MouseX1;
public extern "::ImGui::%" ImGuiKey ImGuiKey_MouseX2;
public extern "::ImGui::%" ImGuiKey ImGuiKey_MouseWheelX;
public extern "::ImGui::%" ImGuiKey ImGuiKey_MouseWheelY;
public extern "::ImGui::%" ImGuiKey ImGuiKey_ReservedForModCtrl;
public extern "::ImGui::%" ImGuiKey ImGuiKey_ReservedForModShift;
public extern "::ImGui::%" ImGuiKey ImGuiKey_ReservedForModAlt;
public extern "::ImGui::%" ImGuiKey ImGuiKey_ReservedForModSuper;
public extern "::ImGui::%" ImGuiKey ImGuiMod_None;
public extern "::ImGui::%" ImGuiKey ImGuiMod_Ctrl;
public extern "::ImGui::%" ImGuiKey ImGuiMod_Shift;
public extern "::ImGui::%" ImGuiKey ImGuiMod_Alt;
public extern "::ImGui::%" ImGuiKey ImGuiMod_Super;
public extern "::ImGui::%" ImGuiKey ImGuiMod_Shortcut;
public extern "::ImGui::%" ImGuiKey ImGuiMod_Mask_;
public extern "::ImGui::%" ImGuiKey ImGuiKey_NamedKey_BEGIN;
public extern "::ImGui::%" ImGuiKey ImGuiKey_NamedKey_END;
public extern "::ImGui::%" ImGuiKey ImGuiKey_NamedKey_COUNT;
public extern "::ImGui::%" ImGuiKey ImGuiKey_KeysData_SIZE;
public extern "::ImGui::%" ImGuiKey ImGuiKey_KeysData_OFFSET;
public extern "::ImGui::%" ImGuiKey ImGuiKey_ModCtrl;
public extern "::ImGui::%" ImGuiKey ImGuiKey_KeyPadEnter;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiNavInput { }
public extern "::ImGui::%" ImGuiNavInput ImGuiNavInput_Activate;
public extern "::ImGui::%" ImGuiNavInput ImGuiNavInput_Cancel;
public extern "::ImGui::%" ImGuiNavInput ImGuiNavInput_Input;
public extern "::ImGui::%" ImGuiNavInput ImGuiNavInput_Menu;
public extern "::ImGui::%" ImGuiNavInput ImGuiNavInput_DpadLeft;
public extern "::ImGui::%" ImGuiNavInput ImGuiNavInput_DpadRight;
public extern "::ImGui::%" ImGuiNavInput ImGuiNavInput_DpadUp;
public extern "::ImGui::%" ImGuiNavInput ImGuiNavInput_DpadDown;
public extern "::ImGui::%" ImGuiNavInput ImGuiNavInput_LStickLeft;
public extern "::ImGui::%" ImGuiNavInput ImGuiNavInput_LStickRight;
public extern "::ImGui::%" ImGuiNavInput ImGuiNavInput_LStickUp;
public extern "::ImGui::%" ImGuiNavInput ImGuiNavInput_LStickDown;
public extern "::ImGui::%" ImGuiNavInput ImGuiNavInput_FocusPrev;
public extern "::ImGui::%" ImGuiNavInput ImGuiNavInput_FocusNext;
public extern "::ImGui::%" ImGuiNavInput ImGuiNavInput_TweakSlow;
public extern "::ImGui::%" ImGuiNavInput ImGuiNavInput_TweakFast;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiConfigFlags { }
public extern "::ImGui::%" ImGuiConfigFlags ImGuiConfigFlags_None;
public extern "::ImGui::%" ImGuiConfigFlags ImGuiConfigFlags_NavEnableKeyboard;
public extern "::ImGui::%" ImGuiConfigFlags ImGuiConfigFlags_NavEnableGamepad;
public extern "::ImGui::%" ImGuiConfigFlags ImGuiConfigFlags_NavEnableSetMousePos;
public extern "::ImGui::%" ImGuiConfigFlags ImGuiConfigFlags_NavNoCaptureKeyboard;
public extern "::ImGui::%" ImGuiConfigFlags ImGuiConfigFlags_NoMouse;
public extern "::ImGui::%" ImGuiConfigFlags ImGuiConfigFlags_NoMouseCursorChange;
public extern "::ImGui::%" ImGuiConfigFlags ImGuiConfigFlags_IsSRGB;
public extern "::ImGui::%" ImGuiConfigFlags ImGuiConfigFlags_IsTouchScreen;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiBackendFlags { }
public extern "::ImGui::%" ImGuiBackendFlags ImGuiBackendFlags_None;
public extern "::ImGui::%" ImGuiBackendFlags ImGuiBackendFlags_HasGamepad;
public extern "::ImGui::%" ImGuiBackendFlags ImGuiBackendFlags_HasMouseCursors;
public extern "::ImGui::%" ImGuiBackendFlags ImGuiBackendFlags_HasSetMousePos;
public extern "::ImGui::%" ImGuiBackendFlags ImGuiBackendFlags_RendererHasVtxOffset;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiButtonFlags { }
public extern "::ImGui::%" ImGuiButtonFlags ImGuiButtonFlags_None;
public extern "::ImGui::%" ImGuiButtonFlags ImGuiButtonFlags_MouseButtonLeft;
public extern "::ImGui::%" ImGuiButtonFlags ImGuiButtonFlags_MouseButtonRight;
public extern "::ImGui::%" ImGuiButtonFlags ImGuiButtonFlags_MouseButtonMiddle;
public extern "::ImGui::%" ImGuiButtonFlags ImGuiButtonFlags_MouseButtonMask_;
public extern "::ImGui::%" ImGuiButtonFlags ImGuiButtonFlags_MouseButtonDefault_;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiColorEditFlags { }
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_None;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_NoAlpha;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_NoPicker;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_NoOptions;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_NoSmallPreview;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_NoInputs;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_NoTooltip;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_NoLabel;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_NoSidePreview;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_NoDragDrop;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_NoBorder;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_AlphaBar;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_AlphaPreview;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_AlphaPreviewHalf;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_HDR;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_DisplayRGB;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_DisplayHSV;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_DisplayHex;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_Uint8;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_Float;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_PickerHueBar;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_PickerHueWheel;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_InputRGB;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_InputHSV;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_DefaultOptions_;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_DisplayMask_;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_DataTypeMask_;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_PickerMask_;
public extern "::ImGui::%" ImGuiColorEditFlags ImGuiColorEditFlags_InputMask_;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiSliderFlags { }
public extern "::ImGui::%" ImGuiSliderFlags ImGuiSliderFlags_None;
public extern "::ImGui::%" ImGuiSliderFlags ImGuiSliderFlags_AlwaysClamp;
public extern "::ImGui::%" ImGuiSliderFlags ImGuiSliderFlags_Logarithmic;
public extern "::ImGui::%" ImGuiSliderFlags ImGuiSliderFlags_NoRoundToFormat;
public extern "::ImGui::%" ImGuiSliderFlags ImGuiSliderFlags_NoInput;
public extern "::ImGui::%" ImGuiSliderFlags ImGuiSliderFlags_InvalidMask_;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiMouseButton { }
public extern "::ImGui::%" ImGuiMouseButton ImGuiMouseButton_Left;
public extern "::ImGui::%" ImGuiMouseButton ImGuiMouseButton_Right;
public extern "::ImGui::%" ImGuiMouseButton ImGuiMouseButton_Middle;
public extern "::ImGui::%" ImGuiMouseButton ImGuiMouseButton_COUNT;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiMouseCursor { }
public extern "::ImGui::%" ImGuiMouseCursor ImGuiMouseCursor_None;
public extern "::ImGui::%" ImGuiMouseCursor ImGuiMouseCursor_Arrow;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiMouseSource { }
public extern "::ImGui::%" ImGuiMouseSource ImGuiMouseSource_Mouse;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiCond { }
public extern "::ImGui::%" ImGuiCond ImGuiCond_None;
public extern "::ImGui::%" ImGuiCond ImGuiCond_Always;
public extern "::ImGui::%" ImGuiCond ImGuiCond_Once;
public extern "::ImGui::%" ImGuiCond ImGuiCond_FirstUseEver;
public extern "::ImGui::%" ImGuiCond ImGuiCond_Appearing;
public pure tsvaluetype struct extern "int" "extbitmask" ImDrawFlags { }
public extern "::ImGui::%" ImDrawFlags ImDrawFlags_None;
public extern "::ImGui::%" ImDrawFlags ImDrawFlags_Closed;
public extern "::ImGui::%" ImDrawFlags ImDrawFlags_RoundCornersTopLeft;
public extern "::ImGui::%" ImDrawFlags ImDrawFlags_RoundCornersTopRight;
public extern "::ImGui::%" ImDrawFlags ImDrawFlags_RoundCornersBottomLeft;
public extern "::ImGui::%" ImDrawFlags ImDrawFlags_RoundCornersBottomRight;
public extern "::ImGui::%" ImDrawFlags ImDrawFlags_RoundCornersNone;
public extern "::ImGui::%" ImDrawFlags ImDrawFlags_RoundCornersTop;
public extern "::ImGui::%" ImDrawFlags ImDrawFlags_RoundCornersBottom;
public extern "::ImGui::%" ImDrawFlags ImDrawFlags_RoundCornersLeft;
public extern "::ImGui::%" ImDrawFlags ImDrawFlags_RoundCornersRight;
public extern "::ImGui::%" ImDrawFlags ImDrawFlags_RoundCornersAll;
public extern "::ImGui::%" ImDrawFlags ImDrawFlags_RoundCornersDefault_;
public extern "::ImGui::%" ImDrawFlags ImDrawFlags_RoundCornersMask_;
public pure tsvaluetype struct extern "int" "extbitmask" ImDrawListFlags { }
public extern "::ImGui::%" ImDrawListFlags ImDrawListFlags_None;
public extern "::ImGui::%" ImDrawListFlags ImDrawListFlags_AntiAliasedLines;
public extern "::ImGui::%" ImDrawListFlags ImDrawListFlags_AntiAliasedLinesUseTex;
public extern "::ImGui::%" ImDrawListFlags ImDrawListFlags_AntiAliasedFill;
public extern "::ImGui::%" ImDrawListFlags ImDrawListFlags_AllowVtxOffset;
public pure tsvaluetype struct extern "int" "extbitmask" ImFontAtlasFlags { }
public extern "::ImGui::%" ImFontAtlasFlags ImFontAtlasFlags_None;
public extern "::ImGui::%" ImFontAtlasFlags ImFontAtlasFlags_NoPowerOfTwoHeight;
public extern "::ImGui::%" ImFontAtlasFlags ImFontAtlasFlags_NoMouseCursors;
public extern "::ImGui::%" ImFontAtlasFlags ImFontAtlasFlags_NoBakedLines;
public pure tsvaluetype struct extern "int" "extbitmask" ImGuiViewportFlags { }
public extern "::ImGui::%" ImGuiViewportFlags ImGuiViewportFlags_None;
public extern "::ImGui::%" ImGuiViewportFlags ImGuiViewportFlags_IsPlatformWindow;
public extern "::ImGui::%" ImGuiViewportFlags ImGuiViewportFlags_IsPlatformMonitor;
public extern "::ImGui::%" ImGuiViewportFlags ImGuiViewportFlags_OwnedByApp;
public threaded function extern "::ImGui::%" void NewFrame();
public threaded function extern "::ImGui::%" void EndFrame();
public threaded function extern "::ImGui::%" void Render();
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void ShowDemoWindow(bool mutable& p_open);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void ShowMetricsWindow(bool mutable& p_open);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void ShowDebugLogWindow(bool mutable& p_open);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void ShowIDStackToolWindow(bool mutable& p_open);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void ShowAboutWindow(bool mutable& p_open);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool ShowStyleSelector(cstrref const& label);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void ShowFontSelector(cstrref const& label);
public threaded function extern "::ImGui::%" void ShowUserGuide();
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool Begin(cstrref const& name, bool mutable& p_open, ImGuiWindowFlags flags);
public threaded function extern "::ImGui::%" void End();
public threaded function extern "::ImGui::%" void EndChild();
public threaded function extern "::ImGui::%" bool IsWindowAppearing();
public threaded function extern "::ImGui::%" bool IsWindowCollapsed();
public threaded function extern "::ImGui::%" bool IsWindowFocused(ImGuiFocusedFlags flags);
public threaded function extern "::ImGui::%" bool IsWindowHovered(ImGuiHoveredFlags flags);
public threaded function extern "::ImGui::%" ImVec2 GetWindowPos();
public threaded function extern "::ImGui::%" ImVec2 GetWindowSize();
public threaded function extern "::ImGui::%" float GetWindowWidth();
public threaded function extern "::ImGui::%" float GetWindowHeight();
public threaded function extern "::ImGui::%" void SetNextWindowPos(ImVec2 const& pos, ImGuiCond cond, ImVec2 const& pivot);
public threaded function extern "::ImGui::%" void SetNextWindowSize(ImVec2 const& size, ImGuiCond cond);
public threaded function extern "::ImGui::%" void SetNextWindowContentSize(ImVec2 const& size);
public threaded function extern "::ImGui::%" void SetNextWindowCollapsed(bool collapsed, ImGuiCond cond);
public threaded function extern "::ImGui::%" void SetNextWindowFocus();
public threaded function extern "::ImGui::%" void SetNextWindowScroll(ImVec2 const& scroll);
public threaded function extern "::ImGui::%" void SetNextWindowBgAlpha(float alpha);
public threaded function extern "::ImGui::%" void SetWindowFontScale(float scale);
public threaded function extern "::ImGui::%" ImVec2 GetContentRegionAvail();
public threaded function extern "::ImGui::%" ImVec2 GetContentRegionMax();
public threaded function extern "::ImGui::%" ImVec2 GetWindowContentRegionMin();
public threaded function extern "::ImGui::%" ImVec2 GetWindowContentRegionMax();
public threaded function extern "::ImGui::%" float GetScrollX();
public threaded function extern "::ImGui::%" float GetScrollY();
public threaded function extern "::ImGui::%" void SetScrollX(float scroll_x);
public threaded function extern "::ImGui::%" void SetScrollY(float scroll_y);
public threaded function extern "::ImGui::%" float GetScrollMaxX();
public threaded function extern "::ImGui::%" float GetScrollMaxY();
public threaded function extern "::ImGui::%" void SetScrollHereX(float center_x_ratio);
public threaded function extern "::ImGui::%" void SetScrollHereY(float center_y_ratio);
public threaded function extern "::ImGui::%" void SetScrollFromPosX(float local_x, float center_x_ratio);
public threaded function extern "::ImGui::%" void SetScrollFromPosY(float local_y, float center_y_ratio);
public threaded function extern "::ImGui::%" void PopFont();
public threaded function extern "::ImGui::%" void PopStyleColor(int count);
public threaded function extern "::ImGui::%" void PopStyleVar(int count);
public threaded function extern "::ImGui::%" void PushTabStop(bool tab_stop);
public threaded function extern "::ImGui::%" void PopTabStop();
public threaded function extern "::ImGui::%" void PushButtonRepeat(bool repeat);
public threaded function extern "::ImGui::%" void PopButtonRepeat();
public threaded function extern "::ImGui::%" void PushItemWidth(float item_width);
public threaded function extern "::ImGui::%" void PopItemWidth();
public threaded function extern "::ImGui::%" void SetNextItemWidth(float item_width);
public threaded function extern "::ImGui::%" float CalcItemWidth();
public threaded function extern "::ImGui::%" void PushTextWrapPos(float wrap_local_pos_x);
public threaded function extern "::ImGui::%" void PopTextWrapPos();
public threaded function extern "::ImGui::%" float GetFontSize();
public threaded function extern "::ImGui::%" ImVec2 GetFontTexUvWhitePixel();
public threaded function extern "::ImGui::%" ImVec2 GetCursorScreenPos();
public threaded function extern "::ImGui::%" void SetCursorScreenPos(ImVec2 const& pos);
public threaded function extern "::ImGui::%" ImVec2 GetCursorPos();
public threaded function extern "::ImGui::%" float GetCursorPosX();
public threaded function extern "::ImGui::%" float GetCursorPosY();
public threaded function extern "::ImGui::%" void SetCursorPos(ImVec2 const& local_pos);
public threaded function extern "::ImGui::%" void SetCursorPosX(float local_x);
public threaded function extern "::ImGui::%" void SetCursorPosY(float local_y);
public threaded function extern "::ImGui::%" ImVec2 GetCursorStartPos();
public threaded function extern "::ImGui::%" void Separator();
public threaded function extern "::ImGui::%" void SameLine(float offset_from_start_x, float spacing);
public threaded function extern "::ImGui::%" void NewLine();
public threaded function extern "::ImGui::%" void Spacing();
public threaded function extern "::ImGui::%" void Dummy(ImVec2 const& size);
public threaded function extern "::ImGui::%" void Indent(float indent_w);
public threaded function extern "::ImGui::%" void Unindent(float indent_w);
public threaded function extern "::ImGui::%" void BeginGroup();
public threaded function extern "::ImGui::%" void EndGroup();
public threaded function extern "::ImGui::%" void AlignTextToFramePadding();
public threaded function extern "::ImGui::%" float GetTextLineHeight();
public threaded function extern "::ImGui::%" float GetTextLineHeightWithSpacing();
public threaded function extern "::ImGui::%" float GetFrameHeight();
public threaded function extern "::ImGui::%" float GetFrameHeightWithSpacing();
public threaded function extern "::ImGui::%" void PopID();
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void TextUnformatted(cstrref const& text);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void SeparatorText(cstrref const& label);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool Button(cstrref const& label, ImVec2 const& size);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool SmallButton(cstrref const& label);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool InvisibleButton(cstrref const& str_id, ImVec2 const& size, ImGuiButtonFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool ArrowButton(cstrref const& str_id, ImGuiDir dir);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool Checkbox(cstrref const& label, bool mutable& v);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void ProgressBar(float fraction, ImVec2 const& size_arg, cstrref const& overlay);
public threaded function extern "::ImGui::%" void Bullet();
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool BeginCombo(cstrref const& label, cstrref const& preview_value, ImGuiComboFlags flags);
public threaded function extern "::ImGui::%" void EndCombo();
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool DragFloat2(cstrref const& label, farray{float, 2} const& v, float v_speed, float v_min, float v_max, cstrref const& format, ImGuiSliderFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool DragFloat3(cstrref const& label, farray{float, 3} const& v, float v_speed, float v_min, float v_max, cstrref const& format, ImGuiSliderFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool DragFloat4(cstrref const& label, farray{float, 4} const& v, float v_speed, float v_min, float v_max, cstrref const& format, ImGuiSliderFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool DragInt(cstrref const& label, int mutable& v, float v_speed, int v_min, int v_max, cstrref const& format, ImGuiSliderFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool DragInt2(cstrref const& label, farray{int, 2} const& v, float v_speed, int v_min, int v_max, cstrref const& format, ImGuiSliderFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool DragInt3(cstrref const& label, farray{int, 3} const& v, float v_speed, int v_min, int v_max, cstrref const& format, ImGuiSliderFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool DragInt4(cstrref const& label, farray{int, 4} const& v, float v_speed, int v_min, int v_max, cstrref const& format, ImGuiSliderFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool DragIntRange2(cstrref const& label, int mutable& v_current_min, int mutable& v_current_max, float v_speed, int v_min, int v_max, cstrref const& format, ImGuiSliderFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool SliderFloat2(cstrref const& label, farray{float, 2} const& v, float v_min, float v_max, cstrref const& format, ImGuiSliderFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool SliderFloat3(cstrref const& label, farray{float, 3} const& v, float v_min, float v_max, cstrref const& format, ImGuiSliderFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool SliderFloat4(cstrref const& label, farray{float, 4} const& v, float v_min, float v_max, cstrref const& format, ImGuiSliderFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool SliderInt(cstrref const& label, int mutable& v, int v_min, int v_max, cstrref const& format, ImGuiSliderFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool SliderInt2(cstrref const& label, farray{int, 2} const& v, int v_min, int v_max, cstrref const& format, ImGuiSliderFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool SliderInt3(cstrref const& label, farray{int, 3} const& v, int v_min, int v_max, cstrref const& format, ImGuiSliderFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool SliderInt4(cstrref const& label, farray{int, 4} const& v, int v_min, int v_max, cstrref const& format, ImGuiSliderFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool VSliderInt(cstrref const& label, ImVec2 const& size, int mutable& v, int v_min, int v_max, cstrref const& format, ImGuiSliderFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool InputFloat2(cstrref const& label, farray{float, 2} const& v, cstrref const& format, ImGuiInputTextFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool InputFloat3(cstrref const& label, farray{float, 3} const& v, cstrref const& format, ImGuiInputTextFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool InputFloat4(cstrref const& label, farray{float, 4} const& v, cstrref const& format, ImGuiInputTextFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool InputInt(cstrref const& label, int mutable& v, int step, int step_fast, ImGuiInputTextFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool InputInt2(cstrref const& label, farray{int, 2} const& v, ImGuiInputTextFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool InputInt3(cstrref const& label, farray{int, 3} const& v, ImGuiInputTextFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool InputInt4(cstrref const& label, farray{int, 4} const& v, ImGuiInputTextFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool ColorEdit3(cstrref const& label, farray{float, 3} const& col, ImGuiColorEditFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool ColorEdit4(cstrref const& label, farray{float, 4} const& col, ImGuiColorEditFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool ColorPicker3(cstrref const& label, farray{float, 3} const& col, ImGuiColorEditFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool ColorButton(cstrref const& desc_id, ImVec4 const& col, ImGuiColorEditFlags flags, ImVec2 const& size);
public threaded function extern "::ImGui::%" void SetColorEditOptions(ImGuiColorEditFlags flags);
public threaded function extern "::ImGui::%" void TreePop();
public threaded function extern "::ImGui::%" float GetTreeNodeToLabelSpacing();
public threaded function extern "::ImGui::%" void SetNextItemOpen(bool is_open, ImGuiCond cond);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool BeginListBox(cstrref const& label, ImVec2 const& size);
public threaded function extern "::ImGui::%" void EndListBox();
public threaded function extern "::ImGui::%" bool BeginMenuBar();
public threaded function extern "::ImGui::%" void EndMenuBar();
public threaded function extern "::ImGui::%" bool BeginMainMenuBar();
public threaded function extern "::ImGui::%" void EndMainMenuBar();
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool BeginMenu(cstrref const& label, bool enabled);
public threaded function extern "::ImGui::%" void EndMenu();
public threaded function extern "::ImGui::%" bool BeginTooltip();
public threaded function extern "::ImGui::%" void EndTooltip();
public threaded function extern "::ImGui::%" bool BeginItemTooltip();
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool BeginPopup(cstrref const& str_id, ImGuiWindowFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool BeginPopupModal(cstrref const& name, bool mutable& p_open, ImGuiWindowFlags flags);
public threaded function extern "::ImGui::%" void EndPopup();
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void OpenPopupOnItemClick(cstrref const& str_id, ImGuiPopupFlags popup_flags);
public threaded function extern "::ImGui::%" void CloseCurrentPopup();
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool BeginPopupContextItem(cstrref const& str_id, ImGuiPopupFlags popup_flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool BeginPopupContextWindow(cstrref const& str_id, ImGuiPopupFlags popup_flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool BeginPopupContextVoid(cstrref const& str_id, ImGuiPopupFlags popup_flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool IsPopupOpen(cstrref const& str_id, ImGuiPopupFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool BeginTable(cstrref const& str_id, int column, ImGuiTableFlags flags, ImVec2 const& outer_size, float inner_width);
public threaded function extern "::ImGui::%" void EndTable();
public threaded function extern "::ImGui::%" void TableNextRow(ImGuiTableRowFlags row_flags, float min_row_height);
public threaded function extern "::ImGui::%" bool TableNextColumn();
public threaded function extern "::ImGui::%" bool TableSetColumnIndex(int column_n);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void TableSetupColumn(cstrref const& label, ImGuiTableColumnFlags flags, float init_width_or_weight, ImGuiID user_id);
public threaded function extern "::ImGui::%" void TableSetupScrollFreeze(int cols, int rows);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void TableHeader(cstrref const& label);
public threaded function extern "::ImGui::%" void TableHeadersRow();
public threaded function extern "::ImGui::%" void TableAngledHeadersRow();
public threaded function extern "::ImGui::%" int TableGetColumnCount();
public threaded function extern "::ImGui::%" int TableGetColumnIndex();
public threaded function extern "::ImGui::%" int TableGetRowIndex();
public threaded function extern "::ImGui::%" ImGuiTableColumnFlags TableGetColumnFlags(int column_n);
public threaded function extern "::ImGui::%" void TableSetColumnEnabled(int column_n, bool v);
public threaded function extern "::ImGui::%" void TableSetBgColor(ImGuiTableBgTarget target, uint color, int column_n);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void Columns(int count, cstrref const& id, bool border);
public threaded function extern "::ImGui::%" void NextColumn();
public threaded function extern "::ImGui::%" int GetColumnIndex();
public threaded function extern "::ImGui::%" float GetColumnWidth(int column_index);
public threaded function extern "::ImGui::%" void SetColumnWidth(int column_index, float width);
public threaded function extern "::ImGui::%" float GetColumnOffset(int column_index);
public threaded function extern "::ImGui::%" void SetColumnOffset(int column_index, float offset_x);
public threaded function extern "::ImGui::%" int GetColumnsCount();
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool BeginTabBar(cstrref const& str_id, ImGuiTabBarFlags flags);
public threaded function extern "::ImGui::%" void EndTabBar();
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool BeginTabItem(cstrref const& label, bool mutable& p_open, ImGuiTabItemFlags flags);
public threaded function extern "::ImGui::%" void EndTabItem();
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool TabItemButton(cstrref const& label, ImGuiTabItemFlags flags);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void SetTabItemClosed(cstrref const& tab_or_docked_window_label);
public threaded function extern "::ImGui::%" void LogToTTY(int auto_open_depth);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void LogToFile(int auto_open_depth, cstrref const& filename);
public threaded function extern "::ImGui::%" void LogToClipboard(int auto_open_depth);
public threaded function extern "::ImGui::%" void LogFinish();
public threaded function extern "::ImGui::%" void LogButtons();
public threaded function extern "::ImGui::%" bool BeginDragDropSource(ImGuiDragDropFlags flags);
public threaded function extern "::ImGui::%" void EndDragDropSource();
public threaded function extern "::ImGui::%" bool BeginDragDropTarget();
public threaded function extern "::ImGui::%" void EndDragDropTarget();
public threaded function extern "::ImGui::%" void BeginDisabled(bool disabled);
public threaded function extern "::ImGui::%" void EndDisabled();
public threaded function extern "::ImGui::%" void PushClipRect(ImVec2 const& clip_rect_min, ImVec2 const& clip_rect_max, bool intersect_with_current_clip_rect);
public threaded function extern "::ImGui::%" void PopClipRect();
public threaded function extern "::ImGui::%" void SetItemDefaultFocus();
public threaded function extern "::ImGui::%" void SetKeyboardFocusHere(int offset);
public threaded function extern "::ImGui::%" void SetNextItemAllowOverlap();
public threaded function extern "::ImGui::%" bool IsItemHovered(ImGuiHoveredFlags flags);
public threaded function extern "::ImGui::%" bool IsItemActive();
public threaded function extern "::ImGui::%" bool IsItemFocused();
public threaded function extern "::ImGui::%" bool IsItemClicked(ImGuiMouseButton mouse_button);
public threaded function extern "::ImGui::%" bool IsItemVisible();
public threaded function extern "::ImGui::%" bool IsItemEdited();
public threaded function extern "::ImGui::%" bool IsItemActivated();
public threaded function extern "::ImGui::%" bool IsItemDeactivated();
public threaded function extern "::ImGui::%" bool IsItemDeactivatedAfterEdit();
public threaded function extern "::ImGui::%" bool IsItemToggledOpen();
public threaded function extern "::ImGui::%" bool IsAnyItemHovered();
public threaded function extern "::ImGui::%" bool IsAnyItemActive();
public threaded function extern "::ImGui::%" bool IsAnyItemFocused();
public threaded function extern "::ImGui::%" ImGuiID GetItemID();
public threaded function extern "::ImGui::%" ImVec2 GetItemRectMin();
public threaded function extern "::ImGui::%" ImVec2 GetItemRectMax();
public threaded function extern "::ImGui::%" ImVec2 GetItemRectSize();
public threaded function extern "::ImGui::%" int GetFrameCount();
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" ImVec2 CalcTextSize(cstrref const& text, bool hide_text_after_double_hash, float wrap_width);
public threaded function extern "::ImGui::%" uint ColorConvertFloat4ToU32(ImVec4 const& in);
public threaded function extern "::ImGui::%" void ColorConvertRGBtoHSV(float r, float g, float b, float mutable& out_h, float mutable& out_s, float mutable& out_v);
public threaded function extern "::ImGui::%" void ColorConvertHSVtoRGB(float h, float s, float v, float mutable& out_r, float mutable& out_g, float mutable& out_b);
public threaded function extern "::ImGui::%" bool IsKeyDown(ImGuiKey key);
public threaded function extern "::ImGui::%" bool IsKeyPressed(ImGuiKey key, bool repeat);
public threaded function extern "::ImGui::%" bool IsKeyReleased(ImGuiKey key);
public threaded function extern "::ImGui::%" int GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate);
public threaded function extern "::ImGui::%" void SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard);
public threaded function extern "::ImGui::%" bool IsMouseDown(ImGuiMouseButton button);
public threaded function extern "::ImGui::%" bool IsMouseClicked(ImGuiMouseButton button, bool repeat);
public threaded function extern "::ImGui::%" bool IsMouseReleased(ImGuiMouseButton button);
public threaded function extern "::ImGui::%" bool IsMouseDoubleClicked(ImGuiMouseButton button);
public threaded function extern "::ImGui::%" int GetMouseClickedCount(ImGuiMouseButton button);
public threaded function extern "::ImGui::%" bool IsMouseHoveringRect(ImVec2 const& r_min, ImVec2 const& r_max, bool clip);
public threaded function extern "::ImGui::%" bool IsAnyMouseDown();
public threaded function extern "::ImGui::%" ImVec2 GetMousePos();
public threaded function extern "::ImGui::%" ImVec2 GetMousePosOnOpeningCurrentPopup();
public threaded function extern "::ImGui::%" bool IsMouseDragging(ImGuiMouseButton button, float lock_threshold);
public threaded function extern "::ImGui::%" ImVec2 GetMouseDragDelta(ImGuiMouseButton button, float lock_threshold);
public threaded function extern "::ImGui::%" void ResetMouseDragDelta(ImGuiMouseButton button);
public threaded function extern "::ImGui::%" ImGuiMouseCursor GetMouseCursor();
public threaded function extern "::ImGui::%" void SetMouseCursor(ImGuiMouseCursor cursor_type);
public threaded function extern "::ImGui::%" void SetNextFrameWantCaptureMouse(bool want_capture_mouse);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void SetClipboardText(cstrref const& text);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void LoadIniSettingsFromDisk(cstrref const& ini_filename);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void LoadIniSettingsFromMemory(cstrref const& ini_data, size_t ini_size);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void SaveIniSettingsToDisk(cstrref const& ini_filename);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void DebugTextEncoding(cstrref const& text);
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" bool DebugCheckVersionAndDataLayout(cstrref const& version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx);
public threaded function extern "::ImGui::%" ImGuiKey GetKeyIndex(ImGuiKey key);
public threaded function extern "::ImGui::%" void SetItemAllowOverlap();
public threaded function extern "::pgl3d$n::imgui$n::dear_imgui$n::%_wrap" void CalcListClipping(int items_count, float items_height, slice{int} const& out_items_display_start);
extern "implementation" inline
namespace pgl3d$n {
namespace imgui$n {
namespace dear_imgui$n {
void ShowDemoWindow_wrap(bool& p_open) {
  return  ::ImGui::ShowDemoWindow(&p_open);
}
void ShowMetricsWindow_wrap(bool& p_open) {
  return  ::ImGui::ShowMetricsWindow(&p_open);
}
void ShowDebugLogWindow_wrap(bool& p_open) {
  return  ::ImGui::ShowDebugLogWindow(&p_open);
}
void ShowIDStackToolWindow_wrap(bool& p_open) {
  return  ::ImGui::ShowIDStackToolWindow(&p_open);
}
void ShowAboutWindow_wrap(bool& p_open) {
  return  ::ImGui::ShowAboutWindow(&p_open);
}
bool ShowStyleSelector_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  return  ::ImGui::ShowStyleSelector(label_nt.get());
}
void ShowFontSelector_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  return  ::ImGui::ShowFontSelector(label_nt.get());
}
bool Begin_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& name, bool& p_open, ImGuiWindowFlags flags) {
  PXCRT_ALLOCA_NTSTRING(name_nt, name);
  return  ::ImGui::Begin(name_nt.get(), &p_open, flags);
}
void TextUnformatted_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& text) {
  return  ::ImGui::TextUnformatted(reinterpret_cast<const char *>(text.rawarr()), reinterpret_cast<const char *>(text.rawarr()) + text.size());
}
void SeparatorText_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  return  ::ImGui::SeparatorText(label_nt.get());
}
bool Button_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, const ImVec2& size) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  return  ::ImGui::Button(label_nt.get(), size);
}
bool SmallButton_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  return  ::ImGui::SmallButton(label_nt.get());
}
bool InvisibleButton_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& str_id, const ImVec2& size, ImGuiButtonFlags flags) {
  PXCRT_ALLOCA_NTSTRING(str_id_nt, str_id);
  return  ::ImGui::InvisibleButton(str_id_nt.get(), size, flags);
}
bool ArrowButton_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& str_id, ImGuiDir dir) {
  PXCRT_ALLOCA_NTSTRING(str_id_nt, str_id);
  return  ::ImGui::ArrowButton(str_id_nt.get(), dir);
}
bool Checkbox_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, bool& v) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  return  ::ImGui::Checkbox(label_nt.get(), &v);
}
void ProgressBar_wrap(float fraction, const ImVec2& size_arg, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& overlay) {
  PXCRT_ALLOCA_NTSTRING(overlay_nt, overlay);
  return  ::ImGui::ProgressBar(fraction, size_arg, overlay_nt.get());
}
bool BeginCombo_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& preview_value, ImGuiComboFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  PXCRT_ALLOCA_NTSTRING(preview_value_nt, preview_value);
  return  ::ImGui::BeginCombo(label_nt.get(), preview_value_nt.get(), flags);
}
bool DragFloat2_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< float, 2 >& v, float v_speed, float v_min, float v_max, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& format, ImGuiSliderFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  PXCRT_ALLOCA_NTSTRING(format_nt, format);
  return  ::ImGui::DragFloat2(label_nt.get(), v.rawarr(), v_speed, v_min, v_max, format_nt.get(), flags);
}
bool DragFloat3_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< float, 3 >& v, float v_speed, float v_min, float v_max, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& format, ImGuiSliderFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  PXCRT_ALLOCA_NTSTRING(format_nt, format);
  return  ::ImGui::DragFloat3(label_nt.get(), v.rawarr(), v_speed, v_min, v_max, format_nt.get(), flags);
}
bool DragFloat4_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< float, 4 >& v, float v_speed, float v_min, float v_max, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& format, ImGuiSliderFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  PXCRT_ALLOCA_NTSTRING(format_nt, format);
  return  ::ImGui::DragFloat4(label_nt.get(), v.rawarr(), v_speed, v_min, v_max, format_nt.get(), flags);
}
bool DragInt_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, int& v, float v_speed, int v_min, int v_max, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& format, ImGuiSliderFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  PXCRT_ALLOCA_NTSTRING(format_nt, format);
  return  ::ImGui::DragInt(label_nt.get(), &v, v_speed, v_min, v_max, format_nt.get(), flags);
}
bool DragInt2_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< int, 2 >& v, float v_speed, int v_min, int v_max, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& format, ImGuiSliderFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  PXCRT_ALLOCA_NTSTRING(format_nt, format);
  return  ::ImGui::DragInt2(label_nt.get(), v.rawarr(), v_speed, v_min, v_max, format_nt.get(), flags);
}
bool DragInt3_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< int, 3 >& v, float v_speed, int v_min, int v_max, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& format, ImGuiSliderFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  PXCRT_ALLOCA_NTSTRING(format_nt, format);
  return  ::ImGui::DragInt3(label_nt.get(), v.rawarr(), v_speed, v_min, v_max, format_nt.get(), flags);
}
bool DragInt4_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< int, 4 >& v, float v_speed, int v_min, int v_max, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& format, ImGuiSliderFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  PXCRT_ALLOCA_NTSTRING(format_nt, format);
  return  ::ImGui::DragInt4(label_nt.get(), v.rawarr(), v_speed, v_min, v_max, format_nt.get(), flags);
}
bool DragIntRange2_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, int& v_current_min, int& v_current_max, float v_speed, int v_min, int v_max, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& format, ImGuiSliderFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  return  ::ImGui::DragIntRange2(label_nt.get(), &v_current_min, &v_current_max, v_speed, v_min, v_max, reinterpret_cast<const char *>(format.rawarr()), reinterpret_cast<const char *>(format.rawarr()) + format.size(), flags);
}
bool SliderFloat2_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< float, 2 >& v, float v_min, float v_max, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& format, ImGuiSliderFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  PXCRT_ALLOCA_NTSTRING(format_nt, format);
  return  ::ImGui::SliderFloat2(label_nt.get(), v.rawarr(), v_min, v_max, format_nt.get(), flags);
}
bool SliderFloat3_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< float, 3 >& v, float v_min, float v_max, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& format, ImGuiSliderFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  PXCRT_ALLOCA_NTSTRING(format_nt, format);
  return  ::ImGui::SliderFloat3(label_nt.get(), v.rawarr(), v_min, v_max, format_nt.get(), flags);
}
bool SliderFloat4_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< float, 4 >& v, float v_min, float v_max, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& format, ImGuiSliderFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  PXCRT_ALLOCA_NTSTRING(format_nt, format);
  return  ::ImGui::SliderFloat4(label_nt.get(), v.rawarr(), v_min, v_max, format_nt.get(), flags);
}
bool SliderInt_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, int& v, int v_min, int v_max, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& format, ImGuiSliderFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  PXCRT_ALLOCA_NTSTRING(format_nt, format);
  return  ::ImGui::SliderInt(label_nt.get(), &v, v_min, v_max, format_nt.get(), flags);
}
bool SliderInt2_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< int, 2 >& v, int v_min, int v_max, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& format, ImGuiSliderFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  PXCRT_ALLOCA_NTSTRING(format_nt, format);
  return  ::ImGui::SliderInt2(label_nt.get(), v.rawarr(), v_min, v_max, format_nt.get(), flags);
}
bool SliderInt3_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< int, 3 >& v, int v_min, int v_max, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& format, ImGuiSliderFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  PXCRT_ALLOCA_NTSTRING(format_nt, format);
  return  ::ImGui::SliderInt3(label_nt.get(), v.rawarr(), v_min, v_max, format_nt.get(), flags);
}
bool SliderInt4_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< int, 4 >& v, int v_min, int v_max, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& format, ImGuiSliderFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  PXCRT_ALLOCA_NTSTRING(format_nt, format);
  return  ::ImGui::SliderInt4(label_nt.get(), v.rawarr(), v_min, v_max, format_nt.get(), flags);
}
bool VSliderInt_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, const ImVec2& size, int& v, int v_min, int v_max, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& format, ImGuiSliderFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  PXCRT_ALLOCA_NTSTRING(format_nt, format);
  return  ::ImGui::VSliderInt(label_nt.get(), size, &v, v_min, v_max, format_nt.get(), flags);
}
bool InputFloat2_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< float, 2 >& v, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& format, ImGuiInputTextFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  PXCRT_ALLOCA_NTSTRING(format_nt, format);
  return  ::ImGui::InputFloat2(label_nt.get(), v.rawarr(), format_nt.get(), flags);
}
bool InputFloat3_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< float, 3 >& v, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& format, ImGuiInputTextFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  PXCRT_ALLOCA_NTSTRING(format_nt, format);
  return  ::ImGui::InputFloat3(label_nt.get(), v.rawarr(), format_nt.get(), flags);
}
bool InputFloat4_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< float, 4 >& v, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& format, ImGuiInputTextFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  PXCRT_ALLOCA_NTSTRING(format_nt, format);
  return  ::ImGui::InputFloat4(label_nt.get(), v.rawarr(), format_nt.get(), flags);
}
bool InputInt_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, int& v, int step, int step_fast, ImGuiInputTextFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  return  ::ImGui::InputInt(label_nt.get(), &v, step, step_fast, flags);
}
bool InputInt2_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< int, 2 >& v, ImGuiInputTextFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  return  ::ImGui::InputInt2(label_nt.get(), v.rawarr(), flags);
}
bool InputInt3_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< int, 3 >& v, ImGuiInputTextFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  return  ::ImGui::InputInt3(label_nt.get(), v.rawarr(), flags);
}
bool InputInt4_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< int, 4 >& v, ImGuiInputTextFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  return  ::ImGui::InputInt4(label_nt.get(), v.rawarr(), flags);
}
bool ColorEdit3_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< float, 3 >& col, ImGuiColorEditFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  return  ::ImGui::ColorEdit3(label_nt.get(), col.rawarr(), flags);
}
bool ColorEdit4_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< float, 4 >& col, ImGuiColorEditFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  return  ::ImGui::ColorEdit4(label_nt.get(), col.rawarr(), flags);
}
bool ColorPicker3_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ::pxcrt::farray< float, 3 >& col, ImGuiColorEditFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  return  ::ImGui::ColorPicker3(label_nt.get(), col.rawarr(), flags);
}
bool ColorButton_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& desc_id, const ImVec4& col, ImGuiColorEditFlags flags, const ImVec2& size) {
  PXCRT_ALLOCA_NTSTRING(desc_id_nt, desc_id);
  return  ::ImGui::ColorButton(desc_id_nt.get(), col, flags, size);
}
bool BeginListBox_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, const ImVec2& size) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  return  ::ImGui::BeginListBox(label_nt.get(), size);
}
bool BeginMenu_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, bool enabled) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  return  ::ImGui::BeginMenu(label_nt.get(), enabled);
}
bool BeginPopup_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& str_id, ImGuiWindowFlags flags) {
  PXCRT_ALLOCA_NTSTRING(str_id_nt, str_id);
  return  ::ImGui::BeginPopup(str_id_nt.get(), flags);
}
bool BeginPopupModal_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& name, bool& p_open, ImGuiWindowFlags flags) {
  PXCRT_ALLOCA_NTSTRING(name_nt, name);
  return  ::ImGui::BeginPopupModal(name_nt.get(), &p_open, flags);
}
void OpenPopupOnItemClick_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& str_id, ImGuiPopupFlags popup_flags) {
  PXCRT_ALLOCA_NTSTRING(str_id_nt, str_id);
  return  ::ImGui::OpenPopupOnItemClick(str_id_nt.get(), popup_flags);
}
bool BeginPopupContextItem_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& str_id, ImGuiPopupFlags popup_flags) {
  PXCRT_ALLOCA_NTSTRING(str_id_nt, str_id);
  return  ::ImGui::BeginPopupContextItem(str_id_nt.get(), popup_flags);
}
bool BeginPopupContextWindow_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& str_id, ImGuiPopupFlags popup_flags) {
  PXCRT_ALLOCA_NTSTRING(str_id_nt, str_id);
  return  ::ImGui::BeginPopupContextWindow(str_id_nt.get(), popup_flags);
}
bool BeginPopupContextVoid_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& str_id, ImGuiPopupFlags popup_flags) {
  PXCRT_ALLOCA_NTSTRING(str_id_nt, str_id);
  return  ::ImGui::BeginPopupContextVoid(str_id_nt.get(), popup_flags);
}
bool IsPopupOpen_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& str_id, ImGuiPopupFlags flags) {
  PXCRT_ALLOCA_NTSTRING(str_id_nt, str_id);
  return  ::ImGui::IsPopupOpen(str_id_nt.get(), flags);
}
bool BeginTable_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& str_id, int column, ImGuiTableFlags flags, const ImVec2& outer_size, float inner_width) {
  PXCRT_ALLOCA_NTSTRING(str_id_nt, str_id);
  return  ::ImGui::BeginTable(str_id_nt.get(), column, flags, outer_size, inner_width);
}
void TableSetupColumn_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ImGuiTableColumnFlags flags, float init_width_or_weight, ImGuiID user_id) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  return  ::ImGui::TableSetupColumn(label_nt.get(), flags, init_width_or_weight, user_id);
}
void TableHeader_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  return  ::ImGui::TableHeader(label_nt.get());
}
void Columns_wrap(int count, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& id, bool border) {
  PXCRT_ALLOCA_NTSTRING(id_nt, id);
  return  ::ImGui::Columns(count, id_nt.get(), border);
}
bool BeginTabBar_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& str_id, ImGuiTabBarFlags flags) {
  PXCRT_ALLOCA_NTSTRING(str_id_nt, str_id);
  return  ::ImGui::BeginTabBar(str_id_nt.get(), flags);
}
bool BeginTabItem_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, bool& p_open, ImGuiTabItemFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  return  ::ImGui::BeginTabItem(label_nt.get(), &p_open, flags);
}
bool TabItemButton_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& label, ImGuiTabItemFlags flags) {
  PXCRT_ALLOCA_NTSTRING(label_nt, label);
  return  ::ImGui::TabItemButton(label_nt.get(), flags);
}
void SetTabItemClosed_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& tab_or_docked_window_label) {
  PXCRT_ALLOCA_NTSTRING(tab_or_docked_window_label_nt, tab_or_docked_window_label);
  return  ::ImGui::SetTabItemClosed(tab_or_docked_window_label_nt.get());
}
void LogToFile_wrap(int auto_open_depth, ::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& filename) {
  PXCRT_ALLOCA_NTSTRING(filename_nt, filename);
  return  ::ImGui::LogToFile(auto_open_depth, filename_nt.get());
}
ImVec2 CalcTextSize_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& text, bool hide_text_after_double_hash, float wrap_width) {
  return  ::ImGui::CalcTextSize(reinterpret_cast<const char *>(text.rawarr()), reinterpret_cast<const char *>(text.rawarr()) + text.size(), hide_text_after_double_hash, wrap_width);
}
void SetClipboardText_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& text) {
  PXCRT_ALLOCA_NTSTRING(text_nt, text);
  return  ::ImGui::SetClipboardText(text_nt.get());
}
void LoadIniSettingsFromDisk_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& ini_filename) {
  PXCRT_ALLOCA_NTSTRING(ini_filename_nt, ini_filename);
  return  ::ImGui::LoadIniSettingsFromDisk(ini_filename_nt.get());
}
void LoadIniSettingsFromMemory_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& ini_data, size_t ini_size) {
  PXCRT_ALLOCA_NTSTRING(ini_data_nt, ini_data);
  return  ::ImGui::LoadIniSettingsFromMemory(ini_data_nt.get(), ini_size);
}
void SaveIniSettingsToDisk_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& ini_filename) {
  PXCRT_ALLOCA_NTSTRING(ini_filename_nt, ini_filename);
  return  ::ImGui::SaveIniSettingsToDisk(ini_filename_nt.get());
}
void DebugTextEncoding_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& text) {
  PXCRT_ALLOCA_NTSTRING(text_nt, text);
  return  ::ImGui::DebugTextEncoding(text_nt.get());
}
bool DebugCheckVersionAndDataLayout_wrap(::pxcrt::bt_cslice< ::pxcrt::bt_uchar > const& version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx) {
  PXCRT_ALLOCA_NTSTRING(version_str_nt, version_str);
  return  ::ImGui::DebugCheckVersionAndDataLayout(version_str_nt.get(), sz_io, sz_style, sz_vec2, sz_vec4, sz_drawvert, sz_drawidx);
}
void CalcListClipping_wrap(int items_count, float items_height, ::pxcrt::bt_slice< ::pxcrt::bt_int > const& out_items_display_start) {
  return  ::ImGui::CalcListClipping(items_count, items_height, out_items_display_start.rawarr(), out_items_display_start.rawarr() + out_items_display_start.size());
}
};
};
};
;
